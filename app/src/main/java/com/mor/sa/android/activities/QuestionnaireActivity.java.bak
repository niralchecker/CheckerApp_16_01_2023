package com.mor.sa.android.activities;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Random;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.SerializationUtils;
import org.apache.http.NameValuePair;

import DateTimePicker.DateTimePicker;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.TimePickerDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentUris;
import android.content.Context;
import android.content.CursorLoader;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ImageDecoder;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.GradientDrawable.Orientation;
import android.graphics.drawable.TransitionDrawable;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.ExifInterface;
import android.media.MediaRecorder;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.os.Handler;
import android.provider.BaseColumns;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.provider.Settings;
import android.speech.SpeechRecognizer;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.text.Editable;
import android.text.Html;
import android.text.InputFilter;
import android.text.InputType;
import android.text.Spanned;
import android.text.TextWatcher;
import android.text.method.LinkMovementMethod;
import android.text.util.Linkify;
import android.util.Log;
import android.util.Patterns;
import android.util.TypedValue;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnLongClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.MediaController;
import android.widget.PopupMenu;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import android.widget.TimePicker;
import android.widget.Toast;
import android.widget.ToggleButton;
import android.widget.VideoView;

import com.checker.sa.android.adapter.menuAdapter;
import com.checker.sa.android.adapter.selectedFilesAdapter;
import com.checker.sa.android.adapter.serverFilesPreviewAdapter;
import com.checker.sa.android.data.AltLanguage;
import com.checker.sa.android.data.Answers;
import com.checker.sa.android.data.AutoValues;
import com.checker.sa.android.data.BasicLog;
import com.checker.sa.android.data.Block;
import com.checker.sa.android.data.BranchProperties;
import com.checker.sa.android.data.Branches;
import com.checker.sa.android.data.CustomFields;
import com.checker.sa.android.data.EditorNote;
import com.checker.sa.android.data.ExpirationItem;
import com.checker.sa.android.data.InProgressFileData;
import com.checker.sa.android.data.LoopsEntry;
import com.checker.sa.android.data.Note;
import com.checker.sa.android.data.Objects;
import com.checker.sa.android.data.Order;
import com.checker.sa.android.data.Orders;
import com.checker.sa.android.data.POS_Shelf;
import com.checker.sa.android.data.Picture;
import com.checker.sa.android.data.Price;
import com.checker.sa.android.data.Products;
import com.checker.sa.android.data.Quantity;
import com.checker.sa.android.data.QuestionnaireData;
import com.checker.sa.android.data.Quota;
import com.checker.sa.android.data.Ranking;
import com.checker.sa.android.data.Set;
import com.checker.sa.android.data.Sets;
import com.checker.sa.android.data.SubmitQuestionnaireData;
import com.checker.sa.android.data.Survey;
import com.checker.sa.android.data.SurveyQnA;
import com.checker.sa.android.data.Surveys;
import com.checker.sa.android.data.Titles;
import com.checker.sa.android.data.Workers;
import com.checker.sa.android.data.backScreenList;
import com.checker.sa.android.data.dataQuestionGroup;
import com.checker.sa.android.data.filePathDataID;
import com.checker.sa.android.data.parser.Parser;
import com.checker.sa.android.db.DBAdapter;
import com.checker.sa.android.db.DBHelper;
import com.checker.sa.android.dialog.Revamped_Loading_Dialog;
import com.checker.sa.android.helper.ActivitySwipeDetector;
import com.checker.sa.android.helper.Calculation;
import com.checker.sa.android.helper.Constants;
import com.checker.sa.android.helper.CustomRBar;
import com.checker.sa.android.helper.CustomRadioButtonGroup;
import com.checker.sa.android.helper.CustomTimePicker;
import com.checker.sa.android.helper.DateValidator;
import com.checker.sa.android.helper.Helper;
import com.checker.sa.android.helper.MultiSelectionSpinner;
import com.checker.sa.android.helper.NewUIQuestionGroupHelper;
import com.checker.sa.android.helper.NewUITitleGroupHelper;
import com.checker.sa.android.helper.POS_Toggles;
import com.checker.sa.android.helper.POS_Toggles.EnumToggleButton;
import com.checker.sa.android.helper.POS_Toggles.onListShown;
import com.checker.sa.android.helper.UIHelper;
import com.checker.sa.android.helper.UIQuestionGroupHelper;
import com.checker.sa.android.helper.UIVerticalGroupHelper;
import com.checker.sa.android.helper.UIVerticalOldGroupHelper;
import com.checker.sa.android.helper.audioMediaRecorder;
import com.checker.sa.android.transport.Connector;
import com.elconfidencial.bubbleshowcase.BubbleShowCase;
import com.elconfidencial.bubbleshowcase.BubbleShowCaseBuilder;
import com.elconfidencial.bubbleshowcase.BubbleShowCaseSequence;
import com.github.gcacace.signaturepad.views.SignaturePad;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.wearable.MessageApi;
import com.google.android.gms.wearable.MessageEvent;
import com.google.android.gms.wearable.Node;
import com.google.android.gms.wearable.NodeApi;
import com.google.android.gms.wearable.Wearable;
import com.google.zxing.client.android.CaptureActivity;
import com.ikovac.timepickerwithseconds.view.MyTimePickerDialog;
import com.mikhaellopez.circularprogressbar.CircularProgressBar;
import com.mor.sa.android.data.CurrentLoopData;
import com.mor.sa.android.data.WatchObject;
import com.obsez.android.lib.filechooser.ChooserDialog;

import de.congrace.exp4j.Calculable;
import de.congrace.exp4j.ExpressionBuilder;
import de.congrace.exp4j.UnknownFunctionException;
import de.congrace.exp4j.UnparsableExpressionException;

import static com.checker.sa.android.db.DBHelper.convertFromBytesFileTbl;

public class QuestionnaireActivity extends Activity implements
        LocationListener, GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener, MessageApi.MessageListener,
        SurfaceHolder.Callback {

    private ArrayList<CustomFields> customFields;
    String selectedBranchID;
    String previousPageDataId = null;
    private String lastDataId = null;
    private SpeechRecognizer sr;
    private static final int PIC_CROP = 12344;
    private static final int PIC_CROP_LAST = 1234445;
    private static final int FILE_SELECT_CODE_CUSTOM = 112211;
    private static final int VIDEO_LAST = 887766;
    private static final int CAMERA_PIC_REQUEST_LAST = 5401;
    private ArrayList<Quota> thisSurveyQuotas;
    ArrayList<AutoValues> thisAutoValues = null;
    private String surveyId;
    boolean isCheckShown = false;
    boolean isRadioNotCheck = false;
    boolean isCompleted = false;
    boolean isBackJump = false;
    boolean isBackJumpThenBack = false;
    int backCount = 0;
    String Visiblesetname = "";
    String Visiblebranchname = "";
    String VisibleClientname = "";
    private int previousY;


    @Override
    protected void onDestroy() {
        if (recorder != null)
            recorder.stopService();
        super.onDestroy();
    }

    ArrayList<backScreenList> backScreenListData = null;

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd  kk:mm:ss",
            Locale.ENGLISH);
    Uri uri_Camera = null;
    String path_Camera = null;
    UIQuestionGroupHelper uqHelper = null;
    private static int CROP_PICTURE_REQUEST_CODE = 4;
    public static String langid;
    public static ArrayList<AltLanguage> langs;
    public static Set cachedSet;

    private boolean isNextButton;
    private String rhs;
    private float currentProgress = 0;
    private int previewLengthMax = 0;
    private CircularProgressBar circularProgress;
    private String currentLocationId = "";
    private String currentProductId = "";

    public void pressNextBtn(WatchObject o) {
        if (checkboxgrp != null && o.getSelectedAnswers() != null
                && o.getSelectedAnswers().size() > 0) {
            for (int i = 0; i < questionObject.getListAnswers().size(); i++) {
                CheckBox cb = null;
                if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                    RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                            .getChildAt(i);
                    if (thisLayout.getChildAt(0) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(0);
                    else if (thisLayout.getChildAt(1) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(1);
                    else if (thisLayout.getChildAt(2) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(2);
                } else {
                    cb = (CheckBox) checkboxgrp.getChildAt(i);
                }
                for (int j = 0; j < o.getSelectedAnswers().size(); j++) {
                    if (cb.getTag()
                            .toString()
                            .equals(questionObject.getListAnswers()
                                    .get(o.getSelectedAnswers().get(j))
                                    .getAnswer()))
                        cb.setChecked(true);
                }
            }
        } else if (radioGroup != null && o.getSelectedAnswers() != null
                && o.getSelectedAnswers().size() > 0) {
            radioGroup.setSelectedItemPosition(o.getSelectedAnswers().get(0));
        } else if (o.getSelectedAnswer() != null
                && (textbox != null || btextbox != null)) {
            if (textbox != null) {
                textbox.setText(o.getSelectedAnswer());
            } else if (btextbox != null) {

                btextbox.setText(o.getSelectedAnswer());
            }

        }

        nextbtnClickListener();
    }

    public void finish_job() {
        if (!orderID.contains("-")) {
            MENUID_SUBMIT_SURVEY();
        } else {
            MENUID_SUBMIT();
        }
    }

    public void pressBackBtn(WatchObject o) {
        if (checkboxgrp != null && o.getSelectedAnswers() != null
                && o.getSelectedAnswers().size() > 0) {
            for (int i = 0; i < questionObject.getListAnswers().size(); i++) {
                CheckBox cb = null;
                if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                    RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                            .getChildAt(i);
                    if (thisLayout.getChildAt(0) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(0);
                    else if (thisLayout.getChildAt(1) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(1);
                    else if (thisLayout.getChildAt(2) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(2);
                } else {
                    cb = (CheckBox) checkboxgrp.getChildAt(i);
                }

                for (int j = 0; j < o.getSelectedAnswers().size(); j++) {
                    if (cb.getTag()
                            .toString()
                            .equals(questionObject.getListAnswers()
                                    .get(o.getSelectedAnswers().get(j))
                                    .getAnswer()))
                        cb.setChecked(true);
                }

            }
        } else if (radioGroup != null && o.getSelectedAnswers() != null
                && o.getSelectedAnswers().size() > 0) {
            radioGroup.setSelectedItemPosition(o.getSelectedAnswers().get(0));
        } else if (o.getSelectedAnswer() != null
                && (textbox != null || btextbox != null)) {
            if (textbox != null) {
                textbox.setText(o.getSelectedAnswer());
            } else if (btextbox != null) {

                btextbox.setText(o.getSelectedAnswer());
            }

        }
        previousButton();
    }

    public void previousButton() {
        String txt = getResources().getString(R.string.questionnaire_next_btn);

        String txt1 = getResources().getString(R.string.questionnaire_prev_btn);
        if (modeSelect == 3) {
            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(
            // R.drawable.arrow_left, 0, 0, 0);
            nextBtn.setText(txt);

            // previousBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
            // R.drawable.arrow_right, 0);
            previousBtn.setText(txt1);

        } else {

            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
            // R.drawable.arrow_right, 0);
            nextBtn.setText(txt);

            // previousBtn.setCompoundDrawablesWithIntrinsicBounds(
            // R.drawable.arrow_left, 0, 0, 0);
            previousBtn.setText(txt1);
        }
        edit_purchase_details = null;
        edit_purchase_payment = null;
        edit_purchase_description = null;
        edit_service_invoice_number = null;
        edit_service_payment = null;
        edit_service_description = null;
        edit_transportation_payment = null;
        edit_transportation_description = null;
        IsMandatory = IsMiMandatory = false;
        // previousBtn.setBackgroundResource(R.drawable.button_n);
        hideKeyBoard();
        // if(!On_Next_Button_Click("Prev")) break;
        previousButtonClicked();

    }

    private void sendThisBug() {
        //
        // try {
        // byte[] SetsBytes = SerializationUtils.serialize((Set) DBHelper
        // .convertFromBytes(set.getSetID()));
        // ParseFile SetFile = new ParseFile("set.bin", SetsBytes);
        //
        // byte[] OrderBytes = SerializationUtils.serialize(order);
        // ParseFile OrderFile = new ParseFile("order.bin", OrderBytes);
        // final ParseObject gameScore = new ParseObject("BugReport");
        // if (questionnaireData != null && questionnaireData.size() > 0) {
        // byte[] SavedBytes = SerializationUtils
        // .serialize(questionnaireData);
        // ParseFile SavedFile = new ParseFile("saved.bin", SavedBytes);
        // gameScore.put("SavedAnswers", SavedFile);
        // }
        //
        // gameScore.put("Set", SetFile);
        // gameScore.put("Order", OrderFile);
        // gameScore.put("SetId", set.getSetID());
        // gameScore.put("OrderId", order.getOrderID());
        // gameScore.put("screenshot",
        // Helper.TakeScreenShot(findViewById(android.R.id.content)));
        // if (questionObject != null && questionObject.getDataID() != null)
        // gameScore.put("CurrentDataId", questionObject.getDataID());
        // Helper.customCrashAlert(QuestionnaireActivity.this, getResources()
        // .getString(R.string.please_enter_comment_for_bug),
        // gameScore);
        //
        // } catch (Exception ex) {
        // }

    }

    public void customAlertforDebug(Context context, String textString) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        dialog.setContentView(R.layout.custom_red_alert);

        // set the custom dialog components - text, image and button
        TextView text = (TextView) dialog.findViewById(R.id.textView1);
        text.setText(textString);

        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog
        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
                PrepareLayout(nextQIndex + 1, true, false);

                nextbtnClickListener();
            }
        });
        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public void customSignatureDialog(Context context) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        dialog.setContentView(R.layout.custom_signature_dialog);
        final SignaturePad signPad = (SignaturePad) dialog
                .findViewById(R.id.signature_pad);
        signPad.setPenColor(0xFF454545);
        final View selectedView = dialog.findViewById(R.id.colorselected);
        dialog.findViewById(R.id.colorblack).setOnClickListener(
                new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        selectedView
                                .setBackground(new ColorDrawable(0xFF454545));
                        signPad.setPenColor(0xFF454545);
                    }
                });
        dialog.findViewById(R.id.colorblue).setOnClickListener(
                new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        selectedView
                                .setBackground(new ColorDrawable(0xFF0000FF));
                        signPad.setPenColor(0xFF0000FF);
                    }
                });
        dialog.findViewById(R.id.colorred).setOnClickListener(
                new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        selectedView
                                .setBackground(new ColorDrawable(0xFFFF0000));
                        signPad.setPenColor(0xFFFF0000);
                    }
                });
        dialog.findViewById(R.id.colorgreen).setOnClickListener(
                new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        selectedView
                                .setBackground(new ColorDrawable(0xFF00FF00));
                        signPad.setPenColor(0xFF00FF00);
                    }
                });

        Button btnSave = (Button) dialog.findViewById(R.id.btnOk);
        btnSave.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                Bitmap sBmp = signPad.getSignatureBitmap();
                File thisFile = Helper.saveBitmapToCheckerFolder(sBmp, null);
                if (thisFile != null) {
                    String dataid = null;
                    if (questionObject != null
                            && questionObject.getDataID() != null
                            && isLastAttachment == false)
                        dataid = questionObject.getDataID();
                    else
                        isLastAttachment = true;
                    uploadList.add(getPathFromPath(thisFile, dataid,
                            order.getClientName(), order.getBranchName(),
                            order.getSetName(), sdf.format(new Date()),
                            order.getOrderID(), false));
                    Toast.makeText(
                            QuestionnaireActivity.this.getApplicationContext(),
                            getString(R.string.questionnaire_file_attached_text),
                            Toast.LENGTH_LONG).show();
                    if (isLastAttachment == true
                            && attach_btn_view != null
                            && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                        ShowAttachedFiles();
                    }

                }
                updateServerSideFiles();
                dialog.dismiss();
            }
        });

        Button btnCancel = (Button) dialog.findViewById(R.id.btnCancel);
        btnCancel.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });

        Button btnClear = (Button) dialog.findViewById(R.id.btnClear);
        btnClear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                signPad.clear();
            }
        });
        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));

        Display display = getWindowManager().getDefaultDisplay();
        Point size = new Point();
        getDisplay().getSize(size);
        int width = size.x;
        int height = size.y;

        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();

        lp.copyFrom(dialog.getWindow().getAttributes());
        lp.width = width - 100;
        lp.height = height - 100;
        dialog.getWindow().setAttributes(lp);

        dialog.show();
    }

    public void customAlert(Context context, String textString) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        dialog.setContentView(R.layout.custom_red_alert);

        // set the custom dialog components - text, image and button
        TextView text = (TextView) dialog.findViewById(R.id.textView1);
        text.setText(textString);

        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog
        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public void customAskAlert(final boolean isLast) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        dialog.setContentView(R.layout.custom_resize_alert);

        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog

        final RadioGroup radioGroup = (RadioGroup) dialog
                .findViewById(R.id.radioOptions);

        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                int selectedId = radioGroup.getCheckedRadioButtonId();

                // find the radiobutton by returned id
                if (selectedId == R.id.radioOriginal) {
                    dialog.dismiss();
                    Helper.setSampleSize(3 + 0);

                    if (isLast)
                        openCamera(CAMERA_PIC_REQUEST_LAST, true);
                    else
                        openCamera(CAMERA_PIC_REQUEST, false);
                    onSaveState(1);
                    photomenu = false;
                } else if (selectedId == R.id.radioMedium) {
                    dialog.dismiss();
                    Helper.setSampleSize(3 + 1);

                    if (isLast)
                        openCamera(CAMERA_PIC_REQUEST_LAST, true);
                    else
                        openCamera(CAMERA_PIC_REQUEST, false);
                    onSaveState(1);
                    photomenu = false;
                } else if (selectedId == R.id.radioSmall) {
                    Helper.setSampleSize(3 + 2);
                    dialog.dismiss();
                    if (isLast)
                        openCamera(CAMERA_PIC_REQUEST_LAST, true);
                    else
                        openCamera(CAMERA_PIC_REQUEST, false);
                    onSaveState(1);
                    photomenu = false;
                }
            }
        });

        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public void customGreenAlert(String textString) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        dialog.setContentView(R.layout.custom_green_alert);

        // set the custom dialog components - text, image and button
        TextView text = (TextView) dialog.findViewById(R.id.textView1);
        text.setText(textString);

        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog
        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();

                if (Helper.getOriginalSampleSize() >= 3) {
                    customAskAlert(false);
                } else {
                    openCamera(CAMERA_PIC_REQUEST, false);
                    onSaveState(1);
                    photomenu = false;
                }

            }
        });

        Button dialogButtonCancel = (Button) dialog
                .findViewById(R.id.btnCancel);
        // if button is clicked, close the custom dialog
        dialogButtonCancel.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });

        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public void customToast(String string, boolean allCool, int lengthShort) {
        Context context = getApplicationContext();
        LayoutInflater inflater = getLayoutInflater();
        View customToastroot = null;
        if (allCool)
            customToastroot = inflater.inflate(R.layout.custom_toast_green,
                    null);
        else {
            customAlert(context, string);
            return;
        }

        ((TextView) customToastroot.findViewById(R.id.textView1))
                .setText(string);

        Toast customtoast = new Toast(context);

        customtoast.setView(customToastroot);
        customtoast.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP, 0, 0);
        customtoast.setDuration(Toast.LENGTH_LONG);
        customtoast.show();
    }

    public void checkAutoValuesByDisplayCondition() {
        ArrayList<AutoValues> theseAutoValues = new ArrayList<AutoValues>();
        if (thisAutoValues != null && thisAutoValues.size() > 0) {
            // theseAutoValues.add(thisAutoValues.get(0));
            for (int i = 0; i < thisAutoValues.size(); i++) {
                if (thisAutoValues.get(i).getCondition() != null
                        && thisAutoValues.get(i).getCondition() != "") {
                    if (IsObjectdisplaybyCondition(thisAutoValues.get(i)
                            .getCondition()))
                        theseAutoValues.add(thisAutoValues.get(i));
                } else
                    theseAutoValues.add(thisAutoValues.get(i));
            }
        }
        thisAutoValues = theseAutoValues;
    }

    public void makeAutoValueRadioButtonNeat() {
        isRadioNotCheck = true;
        ArrayList<AutoValues> theseAutoValues = new ArrayList<AutoValues>();
        if (thisAutoValues != null && thisAutoValues.size() > 1) {
            String thisPriority = thisAutoValues.get(0).DB_TABLE_AUTOVALUES_Priority;
            theseAutoValues.add(thisAutoValues.get(0));
            for (int i = 1; i < thisAutoValues.size(); i++) {
                if (thisAutoValues.get(i).getPriority().equals(thisPriority)) {
                    theseAutoValues.add(thisAutoValues.get(i));
                }
            }
            Calendar calendar = Calendar.getInstance();
            System.out.println("Seconds in current minute = "
                    + calendar.get(Calendar.SECOND));
            int seed = -1;
            if (seed < 0) {
                seed = calendar.get(Calendar.SECOND);
            }
            Random randomGenerator = new Random(seed);
            int size = theseAutoValues.size();
            while (theseAutoValues.size() != 1) {
                int n = randomGenerator.nextInt(theseAutoValues.size() + 1);
                if (n >= theseAutoValues.size())
                    n--;
                theseAutoValues.remove(theseAutoValues.get(n));
            }
            thisAutoValues = theseAutoValues;
        }
    }

    public void makeAutoValueCheckBoxesButtonNeat() {
        isRadioNotCheck = false;
        ArrayList<AutoValues> theseAutoValues = new ArrayList<AutoValues>();
        if (thisAutoValues != null && thisAutoValues.size() > 1) {
            int biggestPriority = 999;
            for (int i = 0; i < thisAutoValues.size(); i++) {
                int thisPriority = Integer.parseInt(thisAutoValues.get(i)
                        .getPriority());
                if (thisPriority < biggestPriority)
                    biggestPriority = thisPriority;
            }

            for (int i = 0; i < thisAutoValues.size(); i++) {
                if (thisAutoValues.get(i).getPriority()
                        .equals(biggestPriority + "")) {
                    theseAutoValues.add(thisAutoValues.get(i));
                }
            }
            Calendar calendar = Calendar.getInstance();
            System.out.println("Seconds in current minute = "
                    + calendar.get(Calendar.SECOND));
            int seed = -1;
            if (seed < 0) {
                seed = calendar.get(Calendar.SECOND);
            }
            Random randomGenerator = new Random(seed);
            int size = theseAutoValues.size();
            // while (theseAutoValues.size() != 1) {
            // int n = randomGenerator.nextInt(theseAutoValues.size());
            // theseAutoValues.remove(theseAutoValues.get(n));
            // }
            thisAutoValues = theseAutoValues;
        }
    }

    public static String getHtml(ArrayList<Objects> listObjects
            , ArrayList<QuestionnaireData> questionnaireData, String orderID,
                                 ArrayList<filePathDataID> uploadList, Set set, String finishTimeText
            , QuestionnaireActivity thisInstance) {
        String html = "<body>";
        Helper helper = new Helper();
        for (int i = 0; listObjects != null && i < listObjects.size(); i++) {
            if (listObjects.get(i) == null || (listObjects.get(i).getListAutoValues() != null && listObjects.get(i).getListAutoValues().size() > 0))
                continue;
            if (listObjects.get(i).getObjectType().equals("4")
                    && listObjects.get(i).getQuestionTypeLink().equals("4")) {
                if (listObjects.get(i).getMiType() != null && !listObjects.get(i).getMiType().equals("0")
                        && !listObjects.get(i).getMiType().equals("11")
                        && !listObjects.get(i).getMiType().equals("12")
                        && !listObjects.get(i).getMiType().equals("13")
                        && !listObjects.get(i).getMiType().equals("14")
                        && !listObjects.get(i).getMiType().equals("15")) {
                } else continue;
            }
            if (listObjects.get(i).getObjectType().equals("2")) {
                if (listObjects.get(i) != null && listObjects.get(i).getText() != null) {

                    html += "<p><b>" + convertCodeIfPossible(listObjects.get(i).getText(), thisInstance) + "</b></p>";
                }
            }

            if (listObjects.get(i).getObjectType().equals("3") && listObjects.get(i).getPictureFilename() != null) {

                if (listObjects.get(i).getPictureFilename().toLowerCase()
                        .endsWith(".mp4")
                        || listObjects.get(i).getPictureFilename().toLowerCase()
                        .endsWith(".avi")
                        || listObjects.get(i).getPictureFilename().toLowerCase()
                        .endsWith(".3gp")) {

                    File root = CheckerApp.localFilesDir;//android.os.Environment.getExternalStorageDirectory();
                    String path = root.getAbsolutePath()
                            + "/mnt/sdcard/CheckerVideos/";
                    File rootFile = new File(path,
                            listObjects.get(i).getPictureFilename());
                    if (rootFile.exists()
                            && rootFile.getAbsolutePath().toLowerCase()
                            .endsWith(".mp4")) {
                        //return getVideoView(rootFile.getAbsolutePath());
                    }
                } else {

                    String imagePath = getHtmlImageView(listObjects.get(i).getPictureData()
                            , "img_" + listObjects.get(i).getDataID() + ".png", null); //"file://"+ base + "/test.jpg";

                    html += imagePath;//"<img src=\"" + imagePath + "\">";
                    //mWebView.loadDataWithBaseURL("", html, "text/html","utf-8", "");
                }
            }
            if (listObjects.get(i).getObjectType().equals("4") && listObjects.get(i).getQuestionGroups() == null) {
                if (listObjects.get(i) != null &&
                        listObjects.get(i).getMandatory() != null &&
                        listObjects.get(i).getMandatory().equals("1")) {
                    html += "<p><h3>" + listObjects.get(i).currentIndex + ". *" + listObjects.get(i).getQuestion() + "</h3></p>";
                    html += "<p style='color:#121212;'>" + convertCodeIfPossible(listObjects.get(i).getQuestionDescription(), thisInstance) + "</p>";
                } else {
                    html += "<p><h3>" + listObjects.get(i).currentIndex + ". " + convertCodeIfPossible(listObjects.get(i).getQuestion(), thisInstance) + "</h3></p>";
                    html += "<p style='color:#020202;'>" + convertCodeIfPossible(listObjects.get(i).getQuestionDescription(), thisInstance) + "</p>";
                }

                if (!(getAttachedFiles(uploadList, orderID, listObjects.get(i).getDataID()).equals(""))) {
                    html += "<h6>List of attached Files</h6>";
                    html += getAttachedFiles(uploadList, orderID, listObjects.get(i).getDataID());
                    html += "<br/>";
                }


                if (listObjects.get(i).getDisplayType() != null && (listObjects.get(i).getDisplayType().equals("1") || listObjects.get(i).getDisplayType().equals("5")) &&
                        (!listObjects.get(i).getQuestionTypeLink().equals("8") &&
                                !listObjects.get(i).getQuestionTypeLink().equals("9"))) { // drop down

                    for (int j = 0; j < listObjects.get(i).getListAnswers().size(); j++) {
                        if (isAnswerSelected(listObjects.get(i).getListAnswers().get(j),
                                listObjects.get(i), questionnaireData))
                            html += "<li>" + getHtmlImageView(null,
                                    listObjects.get(i).getListAnswers().get(j).getIconName(),
                                    helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                            false)) + "<b style='color:white; background-color:#94BA09; padding-left:5px; padding-right:5px'>" + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</b></li>";
                        else
                            html += "<li>" + getHtmlImageView(null,
                                    listObjects.get(i).getListAnswers().get(j).getIconName(),
                                    helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                            false)) + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</li>";
                    }
                }
                if (listObjects.get(i).getDisplayType() != null && listObjects.get(i).getDisplayType().equals("0") &&
                        (listObjects.get(i).getQuestionTypeLink().equals("7") ||
                                listObjects.get(i).getQuestionTypeLink().equals("9") ||
                                listObjects.get(i).getQuestionTypeLink().equals("3"))) {  // Radio Button
                    for (int j = 0; j < listObjects.get(i).getListAnswers().size(); j++) {
                        if (isAnswerSelected(listObjects.get(i).getListAnswers().get(j), listObjects.get(i), questionnaireData))
                            html += "<li>" + getHtmlImageView(null,
                                    listObjects.get(i).getListAnswers().get(j).getIconName(),
                                    helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                            false)) + "<b style='color:white; background-color:#94BA09; padding-left:5px; padding-right:5px'>" + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</b></li>";
                        else
                            html += "<li>" + getHtmlImageView(null,
                                    listObjects.get(i).getListAnswers().get(j).getIconName(),
                                    helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                            false)) + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</li>";
                    }
                }
                if (listObjects.get(i) != null
                        && listObjects.get(i).getDisplayType() != null
                        && listObjects.get(i).getQuestionTypeLink() != null) {
                    if (((listObjects.get(i).getDisplayType().equals("2") || listObjects.get(i).getDisplayType().equals("3") ||
                            listObjects.get(i).getDisplayType().equals("4")) || (listObjects.get(i).getDisplayType().equals("0") &&
                            listObjects.get(i).getQuestionTypeLink().equals("8") || listObjects.get(i).getQuestionTypeLink().equals("9")))) {  // CheckBox
                        for (int j = 0; j < listObjects.get(i).getListAnswers().size(); j++) {
                            if (isAnswerSelected(listObjects.get(i).getListAnswers().get(j),
                                    listObjects.get(i), questionnaireData))
                                html += "<li>" + getHtmlImageView(null,
                                        listObjects.get(i).getListAnswers().get(j).getIconName(),
                                        helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                                false)) + "<b style='color:white; background-color:#94BA09;  padding-left:5px; padding-right:5px'>" + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</b></li>";
                            else

                                html += "<li>" + getHtmlImageView(null,
                                        listObjects.get(i).getListAnswers().get(j).getIconName(),
                                        helper.readFile(listObjects.get(i).getListAnswers().get(j).getIconName(),
                                                false)) + convertCodeIfPossible(listObjects.get(i).getListAnswers().get(j).getAnswer(), thisInstance) + "</li>";
//                        html+="<li>"+listObjects.get(i).getListAnswers().get(j).getAnswer()+"</li>";
                        }
                    }
                }

                if (listObjects.get(i).getMiType() != null && !listObjects.get(i).getMiType().equals("0")
                        && !listObjects.get(i).getMiType().equals("11")
                        && !listObjects.get(i).getMiType().equals("12")
                        && !listObjects.get(i).getMiType().equals("13")
                        && !listObjects.get(i).getMiType().equals("14")
                        && !listObjects.get(i).getMiType().equals("15")) {
                    if (listObjects.get(i).getMiType() != null && listObjects.get(i).getMiType().equals("1")) {
                        String miAns = miAnswerSelected(listObjects.get(i), questionnaireData);
                        if (miAns != null && miAns.length() > 0) {
                            //html+="<textarea rows='4' cols='50'>"+miAns+"</textarea>";
                            html += "<h4 style='color:#e56a1d;'>"
                                    + miAns
                                    + "</h4>";
                        }
//                    	else{
//							html += "<textarea rows='4' cols='50'></textarea>";
//						}

                    } else {
                        String miAns = getMiPreviewAnswer(listObjects.get(i).getDataID(), questionnaireData);
                        if (miAns != null && miAns.length() > 0) {
                            html += "<p style='color:#e56a1d;'>"
                                    + miAns
                                    + "</h4>";
                        }

                    }

                }
            }

            if (listObjects.get(i) != null && listObjects.get(i).getObjectType() != null &&
                    listObjects.get(i).getObjectType().equals("6") && listObjects.get(i).getQuestionLinks() != null &&
                    listObjects.get(i).getQuestionLinks().size() > 0) {
                // groupView Question
//				String queLbl1 = makeQuestionLbl(listObjects.get(i), i);
//				html+=queLbl1;

                if (listObjects.get(i).getMandatory() != null && listObjects.get(i).getMandatory().equals("1")) {
                    html += "<p><b>" + (i + 1) + ". *" + listObjects.get(i).getGroupName() + "</b></p>";
                } else {
                    html += "<p><b>" + (i + 1) + ". " + listObjects.get(i).getGroupName() + "</b></p>";
                }
                html += "<table border=2>";
                if (listObjects.get(i).getQuestionOrientation() != null && listObjects.get(i).getQuestionOrientation().equals("1")) {
                    // horizontal Group Question
                    if (listObjects.get(i).getQuestionTitles() != null && listObjects.get(i).getQuestionTitles().size() > 0) {
                        ArrayList<String> titleHtml = new ArrayList<String>();
                        for (int qt = 0; qt < listObjects.get(i).getQuestionTitles().size(); qt++) {

                            titleHtml.add(callSimpleHorizontalGroupFunction(listObjects,
                                    listObjects.get(i).getQuestionTitles().get(qt), i,
                                    "<table border=1>", questionnaireData) + "</table>");
                        }
                        String innerHtml = "";

                        for (int titleCount = 0; titleCount < titleHtml.size(); titleCount++) {
                            innerHtml += "<tr><td><b>" + listObjects.get(i).getQuestionTitles().get(titleCount).getTitleText() + "</b></td></tr>";
                            innerHtml += "<tr><td>" + titleHtml.get(titleCount) + "</td></tr>";
                        }

                        //innerHtml+="</table>";
                        html += innerHtml;
                    } else {
                        html = callSimpleHorizontalGroupFunction(listObjects, null, i, html, questionnaireData);
                    }

                } else if (listObjects.get(i).getQuestionOrientation() != null && listObjects.get(i).getQuestionOrientation().equals("0")) {
                    // vertical Group View

                    if (listObjects.get(i).getQuestionTitles() != null && listObjects.get(i).getQuestionTitles().size() > 0) {
                        ArrayList<String> titleHtml = new ArrayList<String>();
                        for (int qt = 0; qt < listObjects.get(i).getQuestionTitles().size(); qt++) {

                            titleHtml.add(
                                    callSimpleVerticalGroupFunction(listObjects, listObjects.get(i).getQuestionTitles().get(qt), i, "<table border=1>", helper, questionnaireData) + "</table>");
                        }
                        String innerHtml = "";
                        innerHtml += "<tr>";
                        for (int titleCount = 0; titleCount < titleHtml.size(); titleCount++) {
                            innerHtml += "<td><b>" + listObjects.get(i).getQuestionTitles().get(titleCount).getTitleText() + "</b></td>";
                        }
                        innerHtml += "</tr>";
                        innerHtml += "<tr>";
                        for (int titleCount = 0; titleCount < titleHtml.size(); titleCount++) {
                            innerHtml += "<td>" + titleHtml.get(titleCount) + "</td>";
                        }
                        innerHtml += "</tr>";
                        //innerHtml+="</table>";
                        html += innerHtml;
                    } else {
                        html = callSimpleVerticalGroupFunction(listObjects, null, i, html, helper, questionnaireData);
                    }
                }
                html += "</table><br/>";
            }

        }

        if (set.getAllowCheckerToSetFinishTime() != null
                && set.getAllowCheckerToSetFinishTime().equals("1")
        ) {
            html += "<h3>Finish Time</h3><p>Survey Implementation Time</p>";
            if (finishTimeText != null && !finishTimeText.equals("")) {

                html += "<p>" + finishTimeText + "</p>";
            }
        }
        html += "</body>";

        DBHelper.writeHTMLToFile(html, "html_" + orderID + ".html");
        return html;
    }

    private static String convertCodeIfPossible(String answer, QuestionnaireActivity thisInstance) {
        if (thisInstance != null) return thisInstance.ConvertTextCodetoText(answer, false);
        return answer;
    }

    private static String callSimpleHorizontalGroupFunction(ArrayList<Objects> listObjects,
                                                            Titles titles, int i,
                                                            String html,
                                                            ArrayList<QuestionnaireData> questionnaireData) {
        Helper helper = new Helper();
        if ((listObjects.get(i).getDisplayType() == null
                && listObjects.get(i).getQuestionTypeLink() == null && listObjects.get(i).getMiType() == null)) {
            html += "<tr>";
            for (int g = 0; g < listObjects.get(i).getQuestionLinks().size() - 1; g++) {

                Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
//							String groupDataID= groupQue.getDataID()+"_"+listObjects.get(i).getDataID();
                String groupDataID = groupQue.getDataID() != null ? groupQue.getDataID() + "_" : "";
                groupDataID = groupDataID + listObjects.get(i).getDataID();

                if (titles != null)
                    groupDataID = groupDataID + "-" + titles.getQgtID();

//				if((groupQue.getDisplayType().equals("1") || groupQue.getDisplayType().equals("5"))
//						&& (!groupQue.getQuestionTypeLink().equals("8") && !groupQue.getQuestionTypeLink().equals("9"))){
//					// dropDown

                html += "<td align='center'>" + getPreviewQuestionAndDescription(groupQue) + "</td>";
//				}else{
//					html+="<td align='center' colspan="+groupQue.getListAnswers().size()+"><b>"+groupQue.getQuestion()+"</b></td>";
//				}
            }
            html += "</tr>";
            html += "<tr>";
            for (int g = 0; g < listObjects.get(i).getQuestionLinks().size() - 1; g++) {
                Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
//							String groupDataID = listObjects.get(i).getDataID()+"-0-"+groupQue.getDataID();
//                            String groupDataID = listObjects.get(i).getDataID()+"_"+groupQue.getDataID();
                String groupDataID = groupQue.getDataID() != null ? groupQue.getDataID() + "_" : "";
                groupDataID = groupDataID + listObjects.get(i).getDataID();

                if (titles != null)
                    groupDataID = groupDataID + "-" + titles.getQgtID();

                if (groupQue != null && groupQue.getDisplayType() != null
                        && groupQue.getQuestionTypeLink() != null &&
                        (groupQue.getDisplayType().equals("2")
                                || groupQue.getDisplayType().equals("3")
                                || groupQue.getDisplayType().equals("4")
                                || (groupQue.getDisplayType().equals("0"))
                                &&
                                (groupQue.getQuestionTypeLink().equals("8")
                                        || groupQue.getQuestionTypeLink().equals("9")))) {
                    //Checkbox
                    //html=getHTMLCheckBoxview(groupQue,groupDataID,html);
                    html += "<td>";
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td>";
                } else if (groupQue != null && groupQue.getDisplayType() != null
                        && groupQue.getQuestionTypeLink() != null
                        && groupQue.getDisplayType().equals("0")
                        && (groupQue.getQuestionTypeLink().equals("7")
                        || groupQue.getQuestionTypeLink().equals("9")
                        || groupQue.getQuestionTypeLink().equals("3"))) {
                    // Radio Button
                    //html=getHTMLRadioBoxview(groupQue,groupDataID,html);
                    html += "<td>";
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td>";
                } else if (groupQue != null && groupQue.getDisplayType() != null
                        && groupQue.getQuestionTypeLink() != null
                        && (groupQue.getDisplayType().equals("1")
                        || groupQue.getDisplayType().equals("5")) &&
                        (!groupQue.getQuestionTypeLink().equals("8")
                                && !groupQue.getQuestionTypeLink().equals("9"))) {
                    html += "<td>";
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td>";
                } else {
                    html += "<td>";
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td>";
                }
            }

            html += "</tr>";

        } else if (listObjects.get(i).getDisplayType() != null &&
                listObjects.get(i).getDisplayType().equals("") && listObjects.get(i).getQuestionTypeLink().equals("") && listObjects.get(i).getMiType().equals("")) {
            html += "<table border=2 style='border-collapse: collapse'><tr>";
            html += "<td>Question</td><td><b>" + listObjects.get(i).getGroupName() + "</b></td></tr>";
            for (int g = 0; g < listObjects.get(i).getQuestionLinks().size() - 1; g++) {
                Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
                html += "<tr><td></td><td> Number (" + groupQue.getMiNumberMin() + "-" + groupQue.getMiNumberMax() + ")</td></tr>";
                for (int qt = 0; qt < listObjects.get(i).getQuestionTitles().size(); qt++) {
                    html += "<tr>";
                    html += "<td>" + listObjects.get(i).getQuestionTitles().get(qt).getTitleText() + "</td>";
                    html += "<td><input type='text' disabled></td>";
                    html += "</td>";
                }
            }

        }
        return html;
    }

    private static String getHTMLForListAnswers(Objects groupQue, String groupDataID, String html, Helper helper, ArrayList<QuestionnaireData> questionnaireData) {
        if (groupQue.getListAnswers().size() > 0) {
            for (int d = 0; d < groupQue.getListAnswers().size(); d++) {

                if (isAnswerSelected(groupQue.getListAnswers().get(d), groupDataID, questionnaireData) == true) {
                    html += "<li>" + getHtmlImageView(null,
                            groupQue.getListAnswers().get(d).getIconName(),
                            helper.readFile(groupQue.getListAnswers().get(d).getIconName(),
                                    false)) + "<b style='color:white; background-color:black; padding-left:5px; padding-right:5px'>" + groupQue.getListAnswers().get(d).getAnswer() + "</b></li>";
                } else
                    html += "<li>" + getHtmlImageView(null,
                            groupQue.getListAnswers().get(d).getIconName(),
                            helper.readFile(groupQue.getListAnswers().get(d).getIconName(),
                                    false)) + groupQue.getListAnswers().get(d).getAnswer() + "</li>";

            }
        } else {
            String str = getMiPreviewAnswer(groupDataID, questionnaireData);
            if (str != null && str.length() > 0) {
                html += "<p style='color:#e56a1d;'>"
                        + str
                        + "</h4>";
                //html += "<p><b style='color:white; background-color:#94BA09; padding-left:5px; padding-right:5px'>" + str + "</b></p>";
            }
        }
        return html;
    }

    private static String callSimpleVerticalGroupFunction(ArrayList<Objects> listObjects,
                                                          Titles titles, int i,
                                                          String outerHtml, Helper helper
            , ArrayList<QuestionnaireData> questionnaireData) {
        String html = "";
        boolean flag = false;

        for (int g = 0; g < listObjects.get(i).getQuestionLinks().size() - 1; g++) {
            Objects groupQuestion = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
            if (groupQuestion == null || groupQuestion.getObjectType() == null) continue;
//						String groupDataID = listObjects.get(i).getDataID()+"-0-"+groupQuestion.getDataID();
            String groupDataID = groupQuestion.getDataID() != null ? groupQuestion.getDataID() + "_" : "";
            groupDataID = groupDataID + listObjects.get(i).getDataID();

            if (titles != null)
                groupDataID = groupDataID + "-" + titles.getQgtID();
            //String groupDataID = groupQuestion.getDataID()+"_"+listObjects.get(i).getDataID();

            if (groupQuestion.getObjectType().equals("4")) {
                if (groupQuestion.getDisplayType().equals("0") && (groupQuestion.getQuestionTypeLink().equals("7") || groupQuestion.getQuestionTypeLink().equals("9") ||
                        groupQuestion.getQuestionTypeLink().equals("3"))) {
                    //Radio Button vertical GroupView

                    html += "<tr>";
                    html += "<td align='center'>" + getPreviewQuestionAndDescription(groupQuestion) + "</td><td>";
                    Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td></tr>";
                } else if ((groupQuestion.getDisplayType().equals("1") || groupQuestion.getDisplayType().equals("5"))
                        && (!groupQuestion.getQuestionTypeLink().equals("8") && !groupQuestion.getQuestionTypeLink().equals("9"))) {
                    // Drop Down Vertical Group View

                    html += "<tr>";
                    html += "<td align='center'>" + getPreviewQuestionAndDescription(groupQuestion) + "</td><td>";
                    Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td></tr>";

                } else if (groupQuestion.getDisplayType().equals("2") || groupQuestion.getDisplayType().equals("3")
                        || groupQuestion.getDisplayType().equals("4") || (groupQuestion.getQuestionTypeLink().equals("0") && (groupQuestion.getDisplayType().equals("8")
                        || groupQuestion.getDisplayType().equals("9")))) {
                    // Check Box vertical Group View

                    html += "<tr>";//groupQuestion.getQuestion()
                    html += "<td align='center'>" + getPreviewQuestionAndDescription(groupQuestion) + "</td><td>";
                    Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td></tr>";

                } else {
                    // Title group view
                    html += "<tr>";
                    html += "<td align='center'>" + getPreviewQuestionAndDescription(groupQuestion) + "</td><td>";
                    Objects groupQue = getGroupQuestion(listObjects, listObjects.get(i).getQuestionLinks().get(g));
                    html = getHTMLForListAnswers(groupQue, groupDataID, html, helper, questionnaireData);
                    html += "</td></tr>";
                }
            }
        }
        while (html.indexOf("colspan=empty") > 0) {
            html = html.replace("colspan=empty", " ");
        }
        return outerHtml + html;
    }

    private static String getPreviewQuestionAndDescription(Objects groupQuestion) {
        String str = groupQuestion.getQuestion();
        if (groupQuestion != null
                && groupQuestion.getQuestionDescription() != null
                && groupQuestion.getQuestionDescription().length() > 0) {
            str += "</br>";// + groupQuestion.getQuestionDescription();
            str += "<p style='color:#121212;'>" + groupQuestion.getQuestionDescription() + "</p>";
        }
        return str;
    }

//    private String getHTMLDropDownBoxview(Objects groupQue, String groupDataID, String html,boolean iscolspan) {
//
//		if (iscolspan==true) html+="<td colspan=empty><select>";
//		else html+="<td><select>";
//		//html+="<option>Please Select</option>";
//		Answers selectedAnswer=null;
//		for(int d = 0; d < groupQue.getListAnswers().size(); d++){
//			if(isAnswerSelected(groupQue.getListAnswers().get(d), groupDataID)){
//				selectedAnswer=groupQue.getListAnswers().get(d);
//			}
//		}
//		for(int d = 0; d < groupQue.getListAnswers().size(); d++){
//			if (d==0 && selectedAnswer!=null)
//			{
//				html+="<option selected>"+selectedAnswer.getAnswer()+"</option>";
//
//			}
//			if (selectedAnswer!=null && selectedAnswer.getAnswer()!=null &&
//					selectedAnswer.getAnswer().equals(groupQue.getListAnswers().get(d).getAnswer()))
//			{}
//			else {html+="<option>"+groupQue.getListAnswers().get(d).getAnswer()+"</option>";}
//
//
//		}
//		html+="</select></td>";
//		return html;
//	}

//	private String getHTMLRadioBoxview(Objects groupQue, String groupDataID, String html) {
//		if (groupQue.getListAnswers().size()>previewLengthMax)
//			previewLengthMax=groupQue.getListAnswers().size();
//		for(int d = 0; d < groupQue.getListAnswers().size(); d++){
//			if(isAnswerSelected(groupQue.getListAnswers().get(d), groupDataID)){
//				html+="<td align='center'><input type='radio' name='"+groupQue.getListAnswers().get(d).getAnswerID()+"' checked></td>";
//			}else{
//				html+="<td align='center'><input type='radio' name='"+groupQue.getListAnswers().get(d).getAnswerID()+"'></td>";
//			}
//
//		}
//		return html;
//	}
//
//	private String getHTMLCheckBoxview(Objects groupQue, String groupDataID, String html) {
//		if (groupQue.getListAnswers().size()>previewLengthMax)
//			previewLengthMax=groupQue.getListAnswers().size();
//		for(int d = 0; d < groupQue.getListAnswers().size(); d++){
//
//			if(isAnswerSelected(groupQue.getListAnswers().get(d) , groupDataID) == true){
//				html+="<td align='center'><input type='checkbox' id='"+groupQue.getListAnswers().get(d).getAnswerID()+groupDataID+"' name='"+groupQue.getDataID()+"' checked></td>";
//			}
//			else
//			{
//				html+="<td align='center'><input type='checkbox' id='"+groupQue.getListAnswers().get(d).getAnswerID()+groupDataID+"' name='"+groupQue.getDataID()+"'></td>";
//			}
//
//		}
//		return html;
//	}

    private static String getAttachedFiles(ArrayList<filePathDataID> imgArr, String OrderID, String DataID) {
        String fileStr = "";
        try {
            if (imgArr.size() > 0) {
//			fileStr = "<h6>List of attached Files</h6>";
                for (int i = 0; i < imgArr.size(); i++) {
                    if (imgArr.get(i) != null && imgArr.get(i).getUPLOAD_FILe_DATAID() != null
                            && imgArr.get(i).getUPLOAD_FILe_DATAID().equals(DataID) &&
                            imgArr.get(i).getUPLOAD_FILe_ORDERID() != null && imgArr.get(i).getUPLOAD_FILe_ORDERID().equals(OrderID)) {
                        String[] fileNameArr = imgArr.get(i).getFilePath().split("/");
                        fileStr += "<li style='color:#787878;' >" + fileNameArr[fileNameArr.length - 1] + "</li>";
                    }
                }
            }
        } catch (Exception ex) {
        }
//		fileStr+="<br/>";
        return fileStr;
    }

    private static Objects getGroupQuestion(ArrayList<Objects> queArr, String datalink) {
        Objects groupObj = new Objects();
        for (int i = 0; i < queArr.size(); i++) {
            if (queArr.get(i).getDataID().equals(datalink)) {
                groupObj = queArr.get(i);
                break;
            }
        }
        return groupObj;
    }

    private String makeQuestionLbl(Objects que, int i) {
        String queLbl = "";
//		if(que.getMandatory().equals("1")){
//			if(que.getObjectCode() != null && !que.getObjectCode().equals("")){
//				queLbl+="<p><b>"+que.getObjectCode()+". *"+que.getQuestion()+"</b></p>";
//			}else{
//				queLbl+="<p><b>"+(i+1)+". *"+que.getQuestion()+"</b></p>";
//			}
//		}else{
//			if(que.getObjectCode() != null && !que.getObjectCode().equals("")){
//				queLbl+="<p><b>"+que.getObjectCode()+". "+que.getQuestion()+"</b></p>";
//			}else{
//				queLbl+="<p><b>"+(i+1)+". "+que.getQuestion()+"</b></p>";
//			}
//		}

        queLbl += "<p>" + que.getQuestionDescription() + "</p>";
        return queLbl;
    }

    private String groupAnswerSelected(String dataID) {
        for (int i = 0; i < questionnaireData.size(); i++) {
            QuestionnaireData qd = questionnaireData.get(i);
            if (questionnaireData.get(i).getDataID() != null && questionnaireData.get(i).getDataID().contains(dataID)) {
                if (questionnaireData.get(i).getMi() != null && questionnaireData.get(i).getMi().length() > 0)
                    return questionnaireData.get(i).getMi();
                if (questionnaireData.get(i).getAnswerText() != null && questionnaireData.get(i).getAnswerText().length() > 0)
                    return questionnaireData.get(i).getAnswerText();
                if (questionnaireData.get(i).getAnsText() != null && questionnaireData.get(i).getAnsText().length() > 0)
                    return questionnaireData.get(i).getAnsText();
            }
        }
        return null;

    }

    private static String miAnswerSelected(Objects objects, ArrayList<QuestionnaireData> questionnaireData) {
        for (int i = 0; i < questionnaireData.size(); i++) {
            QuestionnaireData qd = questionnaireData.get(i);
            if (questionnaireData.get(i).getDataID() != null && questionnaireData.get(i).getDataID().equals(objects.getDataID())) {
                if (questionnaireData.get(i).getMi() != null && questionnaireData.get(i).getMi().length() > 0)
                    return questionnaireData.get(i).getMi();
                if (questionnaireData.get(i).getAnswerText() != null && questionnaireData.get(i).getAnswerText().length() > 0)
                    return questionnaireData.get(i).getAnswerText();
                if (questionnaireData.get(i).getAnsText() != null && questionnaireData.get(i).getAnsText().length() > 0)
                    return questionnaireData.get(i).getAnsText();
            }
        }
        return null;

    }

    private static boolean isAnswerSelected(Answers answers, String groupDataID
            , ArrayList<QuestionnaireData> questionnaireData) {
        for (int i = 0; i < questionnaireData.size(); i++) {
            QuestionnaireData qd = questionnaireData.get(i);
            if (questionnaireData.get(i).getDataID() != null && questionnaireData.get(i).getDataID().contains(groupDataID)) {
                for (int j = 0; questionnaireData.get(i).getAnswersList() != null && j < questionnaireData.get(i).getAnswersList().size(); j++) {
                    if (answers != null && answers.getAnswerID() != null
                            && questionnaireData.get(i).getAnswersList().get(j) != null && answers.getAnswerID().equals(questionnaireData.get(i).getAnswersList().get(j).getAnswerID())) {
                        return true;
                    }

                }
            }
        }
//		for(int i = 0; i < questionnaireData.size(); i++){
//			if(questionnaireData.get(i).getDataID().contains(groupDataID)){
//				for(int j = 0; j < questionnaireData.get(i).getAnswersList().size(); j++){
//					if(answers.getAnswerID().contains(questionnaireData.get(i).getAnswersList().get(j).getAnswerID())){
//						return true;
//					}
//				}
//			}
//		}
        return false;
    }

    private static boolean isAnswerSelected(Answers answers, Objects objects, ArrayList<QuestionnaireData> questionnaireData) {
        for (int i = 0; i < questionnaireData.size(); i++) {
            QuestionnaireData qd = questionnaireData.get(i);
            if (questionnaireData.get(i).getDataID() != null && questionnaireData.get(i).getDataID().equals(objects.getDataID())) {
                for (int j = 0; questionnaireData.get(i).getAnswersList() != null && j < questionnaireData.get(i).getAnswersList().size(); j++) {
                    if (answers != null && answers.getAnswerID() != null
                            && questionnaireData.get(i).getAnswersList().get(j) != null && answers.getAnswerID().equals(questionnaireData.get(i).getAnswersList().get(j).getAnswerID())) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    Calendar myCalendar = Calendar.getInstance();

    public Objects questionObject;
    public Objects outerQuestionObject;
    POS_Toggles toggles;
    private ArrayList<Objects> listObjects;
    private ArrayList<Objects> specialListObjects;
    private ArrayList<Branches> listBranches;
    private ArrayList<Workers> listWorkers;
    private ArrayList<Ranking> listRanks;
    private ArrayList<Answers> listAnswers;
    private ArrayList<Objects> listJumpto;
    private POS_Shelf pos_shelf_item;
    ArrayList<Quota> lastSavedQuotas = null;
    private String[] listString;
    private ArrayList<QuestionnaireData> questionnaireData;
    private LocationManager lm;
    private ArrayList<SurveyQnA> quotaQuestions;
    Display display;
    CustomRadioButtonGroup radioGroup;
    EditText textbox;
    EditText replyMsgBox;
    EditText freeTextbox;
    Button finishTime;
    // Spinner spinner;
    ListView listSpinner;
    LinearLayout checkboxgrp;
    int objectCount, ansCount;
    boolean IsAttachement, IsMandatory, IsMiMandatory;
    RelativeLayout questionnaireLayout;
    ScrollView posLayout;
    RelativeLayout layout_shelf_study;
    ScrollView subLayout;
    TextView previousBtn, nextBtn;
    int miLabelViewId, miEditViewId, tmmpid = -1;
    int nextQIndex = 0, viewOnPage = 0, viewId, tempId;
    // ArrayList<Integer> questionPageArray;
    int[] questionPageArray;
    int pageCount = 0, size;
    Set set;
    boolean isFinishandsend = false;
    Order order;
    String orderID, companyLink, setIdForPreview;
    boolean showSubmitMenu = false;
    boolean isPreview = false, isKeyboardOn = false;
    boolean isNextObj = true;
    private final int QUESTIONNAIRE_ACTIVITY_CODE = 1;
    int currentIndex = 0;
    boolean isjump = false, enableValidationQuestion = false,
            show_attachedfilescreen = false;
    String DataID = "";
    String DataIDBackJump = "";
    int questionNumber;
    TextView tv;
    int PICKFILE_RESULT_CODE = 0;
    ArrayList<String> uploadFileListDataId = new ArrayList<String>();
    ArrayList<Uri> uploadFileList = new ArrayList<Uri>();
    ArrayList<filePathDataID> uploadList = new ArrayList<filePathDataID>();
    SharedPreferences myPrefs;// = getSharedPreferences("pref", MODE_PRIVATE);
    int modeSelect;// = myPrefs.getInt(Constants.SETTINGS_MODE_INDEX, 0);
    int CAMERA_PIC_REQUEST = 201;
    int CAMERA_VID_REQUEST = 202;
    int CAMERA_AUDIO_REQUEST = 203;
    ImageView imgattach;

    final int CAMERA_POS = 111;
    final int GALLERY_POS = 112;
    Helper helper;

    private List<NameValuePair> PrepareQuestionnaireNameValuePair(
            boolean doIncrement) {

        String freetext = "", finishTimeText = sdf.format(new Date().getTime());
        ;
        if (freeTextbox != null && !freeTextbox.getText().toString().equals(""))
            freetext = freeTextbox.getText().toString();
        if (finishTime != null && !finishTime.getText().toString().equals(""))
            finishTimeText = finishTime.getText().toString();
        else {
            // Calendar date = Calendar.getInstance();
            finishTimeText = sdf.format(new Date());// (date.getTime());
        }

        List<NameValuePair> extraDataList = new ArrayList<NameValuePair>();
        if (!orderID.contains("-")) {
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_QUES_ORDER_ID, orderID));
        }
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_FIELD_QUES_CRITFREETEXT, freetext));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_FIELD_QUES_CRITSTARTLAT, Helper.critStartLat));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_FIELD_QUES_CRITSTARTLONG, Helper.critStartLong));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_FIELD_QUES_CRITENDLAT, Helper.critEndLat));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_VALUE_QUES_CRITENDLONG, Helper.critEndLong));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_VALUE_QUES_REPORTED_START_TIME, startTime));
        extraDataList
                .add(Helper.getNameValuePair(
                        Constants.POST_VALUE_QUES_REPORTED_FINISH_TIME,
                        finishTimeText));
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_VALUE_QUES_APP_VERSION,
                Constants.POST_VALUE_QUES_APP_ACTUAL_VERSION));

        for (int i = 0; i < questionnaireData.size(); i++) {
            QuestionnaireData qd = questionnaireData.get(i);
            if (qd == null)
                continue;
            String newDataId = convertDataIdForNameValuePair(qd.getDataID());
            if (qd.getObjectType().equals("9")
                    || qd.getObjectType().equals("10")) {
                if (qd.getObjectType().equals("10"))
                    extraDataList = getBranchSelection(extraDataList, qd,
                            newDataId);
                else
                    extraDataList = getWorkerSelection(extraDataList, qd,
                            newDataId);
            } else if (qd.getQuestionTypeLink() != null) {
                if (qd.getQuestionTypeLink().equals("7")
                        || qd.getQuestionTypeLink().equals("3"))
                    extraDataList = getSingleChoiceText(extraDataList, qd,
                            newDataId);
                else if (qd.getQuestionTypeLink().equals("8")
                        || qd.getQuestionTypeLink().equals("9"))
                    extraDataList = getMultiChoiceText(extraDataList, qd,
                            newDataId);
                else if (qd.getQuestionTypeLink().equals("4"))
                    extraDataList = getTextBoxAnswer(extraDataList, qd,
                            newDataId);
            }

        }
        extraDataList.add(Helper.getNameValuePair(
                Constants.POST_FIELD_UNEMPTY_QUES_COUNT,
                String.valueOf(nonEmptyCount)));
        if (pos_shelf_item != null) {
            extraDataList = pos_shelf_item
                    .PrepareProductValuePair(extraDataList);
        }
        if (surveyId != null && !surveyId.equals(""))
            extraDataList = Helper.convertQuotasToNameValuePairs(extraDataList,
                    thisSurveyQuotas, surveyId, doIncrement, isCompleted);

        return extraDataList;
    }

    private String convertDataIdForNameValuePair(String dataID2) {
        // TODO Auto-generated method stub
        if (dataID2.contains("_")) {

            String dataId = getDataIdFromDataId(dataID2);
            String groupId = getGroupIdFromDataId(dataID2.replace(dataId + "_",
                    ""));
            if (dataID2.contains("-")) {
                String titleId = getTitleFromDataId(dataID2.replace(dataId
                        + "_" + groupId + "-", ""));
                return groupId + "-" + titleId + "-" + dataId;//haroon
            }
            return groupId + "-" + "0" + "-" + dataId;//haroon
        }

        return dataID2;
    }

    private String getGroupIdFromDataId(String data_id) {

        if (data_id.contains("-")) {
            data_id = data_id.substring(0, data_id.indexOf("-"));
        }
        return data_id;
    }

    private String getDataIdFromDataId(String data_id) {

        if (data_id.contains("_")) {
            data_id = data_id.substring(0, data_id.indexOf("_"));
        }
        return data_id;
    }

    private String getTitleFromDataId(String data_id) {

        if (data_id.contains(";")) {
            data_id = data_id.substring(0, data_id.indexOf(";"));
        }
        return data_id;
    }

    private List<NameValuePair> getSingleChoiceText(
            List<NameValuePair> extraDataList, QuestionnaireData qd,
            String newDataId) {
        if (qd.getAnswersList().size() > 0) {
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId, qd
                    .getAnswersList().get(0).getAnswerID()));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-answerText1", qd.getAnswersList().get(0).getAnswer()));
            extraDataList.add(Helper.getNameValuePair(
                    "obj" + newDataId + "-mi", qd.getAnswerText()));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-questionText", qd.getQuestionText()));
            nonEmptyCount++;
        } else if (qd.getAnswerText() != null && !qd.getAnswerText().equals("")) {
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId, ""));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-answerText1", ""));
            extraDataList.add(Helper.getNameValuePair(
                    "obj" + newDataId + "-mi", qd.getAnswerText()));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-questionText", qd.getQuestionText()));
            nonEmptyCount++;
        } else if (qd.getFreetext() != null && !qd.getFreetext().equals("")) {
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId, ""));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-answerText1", ""));
            extraDataList.add(Helper.getNameValuePair(
                    "obj" + newDataId + "-mi", qd.getFreetext()));
            extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                    + "-questionText", qd.getQuestionText()));
            nonEmptyCount++;
        }
        /*
         * else { extraDataList.add(Helper.getNameValuePair( "obj" +
         * qd.getDataID(), "")); extraDataList.add(Helper.getNameValuePair(
         * "obj" + qd.getDataID() + "-answerText1", ""));
         * extraDataList.add(Helper.getNameValuePair( "obj" + qd.getDataID() +
         * "-mi", "")); extraDataList.add(Helper.getNameValuePair( "obj" +
         * qd.getDataID() + "-questionText", qd.getQuestionText())); }
         */
        return extraDataList;
    }

    private List<NameValuePair> getMultiChoiceText(
            List<NameValuePair> extraDataList, QuestionnaireData qd,
            String newDataId) {
        if ((qd.getAnswerText() == null || qd.getAnswerText().equals(""))
                && (qd.getFreetext() == null || qd.getFreetext().equals(""))
                && ((qd.getAnswersList() == null) || qd.getAnswersList().size() == 0)) {
            // empty question
            return extraDataList;
        }
        extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                + "-questionText", qd.getQuestionText()));
        if (qd.getAnswersList().size() > 0) {
            for (int i = 0; i < qd.getAnswersList().size(); i++) {
                Answers answer = qd.getAnswersList().get(i);
                extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                        + "[]", answer.getAnswerID()));
                extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                        + "-answerText" + (i + 1), answer.getAnswer()));
            }
        }
        // if (qd.getFreetext() != null
        // && !qd.getFreetext().equals("")
        // && ((qd.getAnswersList() == null) || qd.getAnswersList().size() ==
        // 0)) {
        // extraDataList.add(Helper.getNameValuePair("obj" + newDataId
        // + "-answerText1", qd.getFreetext()));
        // } else
        if (qd.getFreetext() != null && !qd.getFreetext().equals("")) {
            // extraDataList.add(Helper.getNameValuePair("obj" + newDataId,
            // ""));
            // extraDataList.add(Helper.getNameValuePair("obj" + newDataId
            // + "-answerText1", ""));
            extraDataList.add(Helper.getNameValuePair(
                    "obj" + newDataId + "-mi", qd.getFreetext()));
        } else
            extraDataList.add(Helper.getNameValuePair(
                    "obj" + newDataId + "-mi", qd.getAnswerText()));
        nonEmptyCount++;
        return extraDataList;
    }

    private List<NameValuePair> getTextBoxAnswer(
            List<NameValuePair> extraDataList, QuestionnaireData qd,
            String newDataId) {

        // qd.setAnsText(ansText)
        if (qd.getAnswerText() == null || qd.getAnswerText().trim().equals(""))
            return extraDataList;
        nonEmptyCount++;
        extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                + "-answerText1", ""));
        if (qd.getAnswerText() != null)
            qd.setAnswerText(qd.getAnswerText().trim());
        extraDataList.add(Helper.getNameValuePair("obj" + newDataId + "-mi",
                qd.getAnswerText()));
        extraDataList.add(Helper.getNameValuePair("obj" + newDataId
                + "-questionText", qd.getQuestionText().trim()));
        return extraDataList;
    }

    private List<NameValuePair> getBranchSelection(
            List<NameValuePair> extraDataList, QuestionnaireData qd,
            String newDataId) {
        if (qd.getBranchID().contains("-1")) {
        } else {
            extraDataList.add(Helper.getNameValuePair("BranchID",
                    qd.getBranchID()));
            nonEmptyCount++;
        }
        return extraDataList;
    }

    private List<NameValuePair> getWorkerSelection(
            List<NameValuePair> extraDataList, QuestionnaireData qd,
            String newDataId) {
        if (qd == null || qd.getWorkerID() == null
                || qd.getWorkerID().contains("-1")) {
        } else {
            extraDataList.add(Helper.getNameValuePair("WorkerID",
                    qd.getWorkerID()));

            nonEmptyCount++;
        }
        return extraDataList;
    }

    public QuestionnaireActivity() {
        helper = new Helper();
    }

    private void setInvertDisplay() {
        if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
            ImageView ilayout = (ImageView) findViewById(R.id.bottombar);
            ilayout.setBackgroundDrawable(getResources().getDrawable(
                    R.drawable.navigation_bar_dark));

            RelativeLayout layout = (RelativeLayout) findViewById(R.id.topbar);
            layout.setBackgroundDrawable(getResources().getDrawable(
                    R.drawable.navigation_bar_dark));

            layout = (RelativeLayout) findViewById(R.id.backgroundTheme);
            layout.setBackgroundDrawable(getResources().getDrawable(
                    R.drawable.background_dark));

            // TextView tv = (TextView) findViewById(R.id.questionnaire_title);
            // tv.setTextColor(getResources().getColor(android.R.color.white));
        }
    }

    public void setFontSize(View v) {

        try {
            if (v.getClass().equals(EditText.class)) {
                EditText btnView = (EditText) v;

                btnView.setTextSize(UIHelper.getFontSize(
                        QuestionnaireActivity.this, btnView.getTextSize()));
                if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                    btnView.setTextColor(getResources().getColor(
                            android.R.color.black));
                }
            }

        } catch (Exception ex) {

        }

        try {
            if (v.getClass().equals(Button.class)) {
                Button btnView = (Button) v;

                btnView.setTextSize(UIHelper.getFontSize(
                        QuestionnaireActivity.this, btnView.getTextSize()));
            }
        } catch (Exception ex) {

        }

        try {
            if (v.getClass().equals(CheckBox.class)) {
                CheckBox btnView = (CheckBox) v;

                btnView.setTextSize(UIHelper.getFontSize(
                        QuestionnaireActivity.this, btnView.getTextSize()));
                if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                    btnView.setTextColor(getResources().getColor(
                            android.R.color.white));
                }
            }
        } catch (Exception ex) {

        }

        try {
            if (v.getClass().equals(RadioButton.class)) {
                RadioButton btnView = (RadioButton) v;

                btnView.setTextSize(UIHelper.getFontSize(
                        QuestionnaireActivity.this, btnView.getTextSize()));
                if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                    btnView.setTextColor(getResources().getColor(
                            android.R.color.white));
                }
            }
        } catch (Exception ex) {

        }
        try {
            if (v.getClass().equals(TextView.class)) {
                TextView textView = (TextView) v;

                textView.setTextSize(UIHelper.getFontSize(
                        QuestionnaireActivity.this, textView.getTextSize()));
                if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                    textView.setTextColor(getResources().getColor(
                            android.R.color.white));
                }

                float f = Helper.getFloat(questionObject.getSize());
                if (f != 0)
                    textView.setTextSize(f);
            }
        } catch (Exception ex) {

        }

    }

    String startTime = "";
    private ImageView btnRecord;

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        Helper.setConfigChange(true);
        Constants.setLocale(QuestionnaireActivity.this);
        updateProgressOnScreen(currentProgress);

        if (uqHelper != null) {
            // if (!isSavingFirstTime) {
            // // if (nonEmptyCount <= 0) {
            // // PrepareQuestionnaireNameValuePair(false);
            // // }
            // isSavingFirstTime = true;
            // DBHelper.insertQuestionnaire(
            // Constants.DB_TABLE_SUBMITSURVEY,
            // new String[] {
            // Constants.DB_TABLE_SUBMITSURVEY_OID,
            // Constants.DB_TABLE_SUBMITSURVEY_FT,
            // Constants.DB_TABLE_SUBMITSURVEY_SLT,
            // Constants.DB_TABLE_SUBMITSURVEY_SLNG,
            // Constants.DB_TABLE_SUBMITSURVEY_ELT,
            // Constants.DB_TABLE_SUBMITSURVEY_ELNG,
            // Constants.DB_TABLE_SUBMITSURVEY_REPORTED_START_TIME,
            // Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
            // Constants.DB_TABLE_SUBMITSURVEY_UNEMPTY_QUES_COUNT,
            // Constants.DB_TABLE_SUBMITSURVEY_SID }, orderID,
            // "", Helper.critStartLat, Helper.critStartLong,
            // Helper.critEndLat, Helper.critEndLong, "", startTime,
            // String.valueOf(nonEmptyCount), surveyId,
            // thisSurveyQuotas);
            // }
            //
            // saveQGroupAnswers();

        } else
            return;
        // if (oldpageCount >= 0) {
        // pageCount = oldpageCount;
        // viewOnPage = oldviewOnPage;
        // nextQIndex = oldQIndex;
        // } else {
        // nextQIndex = -1;
        // pageCount = 0;
        // }
        // if (questionObject.getObjectType().equals("9")
        // || questionObject.getObjectType().equals("10")) {
        //
        // saveAnswers(0, 0);
        // } else if (questionObject.getObjectType().equals("15")) {
        // saveAnswers(0, 15);
        // } else {
        // if (questionObject.getQuestionTypeLink() == null
        // || questionObject.getDisplayType() == null) {
        // } else
        // saveAnswers(
        // Integer.parseInt(questionObject.getQuestionTypeLink()),
        // Integer.parseInt(questionObject.getDisplayType()));
        // }
        if (previousBtn.getVisibility() != View.VISIBLE) {
            nextButtonClicked();
            previousButtonClicked();
        } else {
            previousButtonClicked();
            nextButtonClicked();
        }

        // PrepareLayout(nextQIndex, true, true);

    }

    audioMediaRecorder recorder = null;
    private ImageView btnPause;
    private TextView txtTimer;
    private View layoutRecorder;
    private boolean isRestoring;
    private String restore_data_id;

    public void displayUndisplayLooperMessage(int visibility) {
        nextImg.setVisibility(visibility);
        nextBtn.setVisibility(visibility);
    }

    private int isCamVidGalery;
    private GoogleApiClient mApiClient;
    private TextView txtMemory;
    private ArrayList<InProgressFileData> server_attached_files;

    public void onRestoreData() {
        isRestoring = true;
        AlertDialog.Builder alert = new AlertDialog.Builder(
                QuestionnaireActivity.this);
        alert.setCancelable(false);
        alert.setTitle("");
        TextView textView = new TextView(QuestionnaireActivity.this);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper.makeHtmlString(getResources().getString(
                R.string.android_closed_app_forcefully)));
        alert.setView(textView);
        alert.setPositiveButton("yes", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        });
        // alert.show();
        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        restore_data_id = myPrefs.getString("data_id", "");
        path_Camera = myPrefs.getString("path_Camera", "");
        if (myPrefs.contains("isCamVidGalery"))
            isCamVidGalery = myPrefs.getInt("isCamVidGalery", 0);
        SharedPreferences.Editor outState = myPrefs.edit();
        outState.putInt("isCamVidGalery", 0);
        outState.commit();
        on_restore_instance();
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
    }

    public void onSaveState(int i) {

        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        SharedPreferences.Editor outState = myPrefs.edit();
        if (outState != null && questionObject != null) {
            outState.putBoolean("ispaused", true);
            outState.putString("data_id", questionObject.getDataID());
            outState.putString("path_Camera", path_Camera);
            if (i > 0)
                outState.putInt("isCamVidGalery", i);
            Bundle b = getIntent().getExtras();
            if (b != null) {
                outState.putString("order_id",
                        b.getString(Constants.POST_FIELD_QUES_ORDER_ID));
                String setid = b.getString(Constants.FIELD_ORDER_SET_ID);
                outState.putString("setid", setid);

            }
            outState.commit();

            if (questionObject == null)
                return;
            if (questionObject.getObjectType().equals("9")
                    || questionObject.getObjectType().equals("10")) {

                saveAnswers(0, 0);
            } else if (questionObject.getObjectType().equals("15")) {
                saveAnswers(0, 15);
            } else if (questionObject.getObjectType().equals("12")) {
                saveAnswers(0, 12);
            } else {
                if (questionObject.getQuestionTypeLink() == null
                        || questionObject.getDisplayType() == null)
                    return;
                saveAnswers(
                        Integer.parseInt(questionObject.getQuestionTypeLink()),
                        Integer.parseInt(questionObject.getDisplayType()));
            }
            DBAdapter.closeDataBase();

        }

    }

    @Override
    protected void onSaveInstanceState(Bundle outtState) {
        // TODO Auto-generated method stub
        super.onSaveInstanceState(outtState);
        // onSaveState(0);
    }

    public String getPlsSelectValue() {
        return getString(R.string.plsselect);
//		if (modeSelect == 3) {
//			return "בבקשה תבחר";
//		} else {
//			return "Please Select";
//		}
    }

    public void on_restore_instance() {
        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);

        try {
            DBAdapter db = new DBAdapter(
                    QuestionnaireActivity.this.getApplicationContext());
            myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
            Helper.setSystemURL(myPrefs.getString(
                    Constants.SETTINGS_SYSTEM_URL_KEY, ""));
            Helper.setAlternateSystemURL(myPrefs.getString(
                    Constants.SETTINGS_ALTERNATE_SYSTEM_URL_KEY, null));
            String username = myPrefs.getString(
                    Constants.POST_FIELD_LOGIN_USERNAME, "");
            String pwd = myPrefs.getString(Constants.POST_FIELD_LOGIN_PASSWORD,
                    "");

            Helper.setParsed(false);

            db.createDataBase(Helper.getSystemURLfromDB(),
                    myPrefs.getString(Constants.POST_FIELD_LOGIN_USERNAME, ""),
                    null);
        } catch (IOException e) {
            e.printStackTrace();
        }

        setContentView(R.layout.questionnaire);

        circularProgress = (com.mikhaellopez.circularprogressbar.CircularProgressBar) findViewById(R.id.circularprogress);
        btnRecord = (ImageView) findViewById(R.id.recordBtn);
        btnPause = (ImageView) findViewById(R.id.pauseBtn);
        txtTimer = (TextView) findViewById(R.id.txtTimer);
        btnRecord.setVisibility(RelativeLayout.GONE);
        btnPause.setVisibility(RelativeLayout.GONE);
        txtTimer.setVisibility(RelativeLayout.GONE);

        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        modeSelect = myPrefs.getInt(Constants.SETTINGS_LANGUAGE_INDEX, 0);

        InitialiseViews();
        displayUndisplayLooperMessage(RelativeLayout.GONE);

        layoutRecorder = findViewById(R.id.recorder_layout);
        // btnRecord.setOnClickListener(startRecOnClickListener);
        setInvertDisplay();
        // modeSelect = 1;
        questionNumber = 1;
        startTime = sdf.format(new Date().getTime());
        Helper.setConfigChange(false);
        Bundle b = getIntent().getExtras();
        if (b == null)
            return;
        orderID = b.getString(Constants.POST_FIELD_QUES_ORDER_ID);
        String setid = b.getString(Constants.FIELD_ORDER_SET_ID);

        // Toast.makeText(QuestionnaireActivity.this, "setid=" + setid,
        // Toast.LENGTH_SHORT).show();
        DBAdapter.LogCommunication("Opened job ," + orderID, "JobsLog.txt");

        if (set == null) {
            // call your async task

            new DbOpertation().execute("");
            // doinbackgroundDbFunctions();
            // postAsyncDbFunctions();
            return;
            // asyncDbFunctions();
        } else {
            if (questionnaireData.size() > 0)
                PrepareLayout(nextQIndex, true, false);
            else
                PrepareLayout(nextQIndex, false, false);
        }
    }

    public String getOrderLastDataId(String orderID) {
        String time = DBHelper.getOrderLastDataId(Constants.DB_TABLE_ORDERS,
                new String[]{Constants.DB_TABLE_ORDERS_LASTDATAID,},
                Constants.DB_TABLE_ORDERS_ORDERID + "=" + "\"" + orderID
                        + "\"");
        if (Helper.islastSavedEnabled())
            return time;
        return null;// time;// "yyyy-MM-dd  kk:mm:ss"
    }

    public void on_create() {

        Bundle b = getIntent().getExtras();
        if (b == null)
            return;
        if (Helper.getDBPathLink() == null && !isRestoring) {

            onRestoreData();
            SharedPreferences.Editor outState = myPrefs.edit();
            outState.putBoolean("ispaused", false);
            outState.commit();

            return;
        } else if (isRestoring) {
            return;
        }

        setContentView(R.layout.questionnaire);
        circularProgress = (com.mikhaellopez.circularprogressbar.CircularProgressBar) findViewById(R.id.circularprogress);
        txtMemory = (TextView) findViewById(R.id.memoryText);
        btnRecord = (ImageView) findViewById(R.id.recordBtn);
        btnPause = (ImageView) findViewById(R.id.pauseBtn);
        txtTimer = (TextView) findViewById(R.id.txtTimer);
        btnRecord.setVisibility(RelativeLayout.GONE);
        btnPause.setVisibility(RelativeLayout.GONE);
        txtTimer.setVisibility(RelativeLayout.GONE);

        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        modeSelect = myPrefs.getInt(Constants.SETTINGS_LANGUAGE_INDEX, 0);

        InitialiseViews();
        displayUndisplayLooperMessage(RelativeLayout.GONE);

        layoutRecorder = findViewById(R.id.recorder_layout);
        // btnRecord.setOnClickListener(startRecOnClickListener);
        setInvertDisplay();
        // modeSelect = 1;
        questionNumber = 1;
        startTime = sdf.format(new Date().getTime());
        Helper.setConfigChange(false);

        orderID = b.getString(Constants.POST_FIELD_QUES_ORDER_ID);

        // Toast.makeText(QuestionnaireActivity.this, "orderid=" + orderID,
        // Toast.LENGTH_SHORT).show();
        DBAdapter.LogCommunication("Opened job ," + orderID, "JobsLog.txt");

        if (set == null) {
            // call your async task
            new DbOpertation().execute("");
            // doinbackgroundDbFunctions();
            // postAsyncDbFunctions();
            return;
            // asyncDbFunctions();
        }
        if (questionnaireData != null && questionnaireData.size() > 0)
            PrepareLayout(nextQIndex, true, false);
        else
            PrepareLayout(nextQIndex, false, false);

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        comunicator.questionJob = QuestionnaireActivity.this;
        initGoogleApiClient();
        boolean isokay = IsObjectdisplaybyCondition("(1=1 || 1=2) & (1=1 &(1=1 ||(1=1 & 1=2)|| 1=2)& 1=1)");
        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        //myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        int language = myPrefs.getInt(Constants.SETTINGS_LANGUAGE_INDEX, 0);
        Locale locale = new Locale(
                Constants.SETTINGS_LOCALE_VAL_ARR[myPrefs.getInt(
                        Constants.SETTINGS_LANGUAGE_INDEX, 0)]);
        Locale.setDefault(locale);

        Constants.setLocale(QuestionnaireActivity.this);
        on_create();
        logHeap();
        uqHelper = UIQuestionGroupHelper.getinstance();

        View menulayout = findViewById(R.id.menulayout);
        lv_text = (TextView) findViewById(R.id.attach_layout_text);

        menulayout.setVisibility(RelativeLayout.VISIBLE);
        View menubtn = findViewById(R.id.menubtn);

        menubtn.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                customMenu(openMenu(null));
            }
        });

        imgattach = (ImageView) findViewById(R.id.imgattach);
        loadViews();
        modeSelect = myPrefs.getInt(Constants.SETTINGS_LANGUAGE_INDEX, 0);

        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        SplashScreen.sendCrashReport(myPrefs, QuestionnaireActivity.this);
//		if (modeSelect!=3)
//        new BubbleShowCaseSequence()
//                .addShowCase(showMenuShowCase())
//                .addShowCase(showProgressBarCase()).show();
    }

    private BubbleShowCaseBuilder showMenuShowCase() {
        return new BubbleShowCaseBuilder(this) //Activity instance
                .title("Menu") //Any title for the bubble view
                .description("New location for menu button.") //More detailed description
                .arrowPosition(BubbleShowCase.ArrowPosition.RIGHT) //You can force the position of the arrow to change the location of the bubble.
                .backgroundColor(Color.parseColor("#94ba09")) //Bubble background color
                .textColor(Color.WHITE) //Bubble Text color
                .titleTextSize(20) //Title text size in SP (default value 16sp)
                .descriptionTextSize(15) //Subtitle text size in SP (default value 14sp)
                .showOnce("BUBBLE_SHOW_CASE12132") //Id to show only once the BubbleShowCase

                .targetView(findViewById(R.id.menubtn));
    }

    private BubbleShowCaseBuilder showProgressBarCase() {
        return new BubbleShowCaseBuilder(this) //Activity instance
                .title("ProgressBar") //Any title for the bubble view
                .description("You can monitor the progress of each job using this new tool.") //More detailed description
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM) //You can force the position of the arrow to change the location of the bubble.
                .backgroundColor(Color.parseColor("#94ba09")) //Bubble background color
                .textColor(Color.WHITE) //Bubble Text color
                .titleTextSize(20) //Title text size in SP (default value 16sp)
                .descriptionTextSize(15) //Subtitle text size in SP (default value 14sp)
                .showOnce("BUBBLE_SHE_MENU1213") //Id to show only once the BubbleShowCase
                .targetView(circularProgress); //View to point out
    }

    private static final String QUESTION_ON_SCREEN = "/QUESTION_ON_SCREEN";
    private static final String QUESTION_VALIDATION = "/QUESTION_VALIDATION";

    private void sendMessage(final String path, final Object text) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (QuestionnaireActivity.QUESTION_LAST.equals(path)) {
                    NodeApi.GetConnectedNodesResult nodes = Wearable.NodeApi
                            .getConnectedNodes(mApiClient).await();
                    for (Node node : nodes.getNodes()) {
                        if (text == null) {
                            try {
                                MessageApi.SendMessageResult result = Wearable.MessageApi
                                        .sendMessage(mApiClient, node.getId(),
                                                path, null).await();

                                if (result.getStatus().isSuccess()) {
                                    int i = 0;
                                    i++;
                                } else {
                                    int i = 0;
                                    i++;
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
                if (QuestionnaireActivity.QUESTION_FINISHED.equals(path)) {
                    NodeApi.GetConnectedNodesResult nodes = Wearable.NodeApi
                            .getConnectedNodes(mApiClient).await();
                    for (Node node : nodes.getNodes()) {
                        if (text == null) {
                            try {
                                MessageApi.SendMessageResult result = Wearable.MessageApi
                                        .sendMessage(mApiClient, node.getId(),
                                                path, null).await();

                                if (result.getStatus().isSuccess()) {
                                    int i = 0;
                                    i++;
                                } else {
                                    int i = 0;
                                    i++;
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
                if (QuestionnaireActivity.QUESTION_ON_SCREEN.equals(path)
                        || QuestionnaireActivity.QUESTION_VALIDATION
                        .equals(path)) {
                    NodeApi.GetConnectedNodesResult nodes = Wearable.NodeApi
                            .getConnectedNodes(mApiClient).await();
                    for (Node node : nodes.getNodes()) {
                        if (text != null) {
                            try {
                                byte[] SetsBytes = SerializationUtils
                                        .serialize((WatchObject) text);
                                MessageApi.SendMessageResult result = Wearable.MessageApi
                                        .sendMessage(mApiClient, node.getId(),
                                                path, SetsBytes).await();

                                if (result.getStatus().isSuccess()) {
                                    int i = 0;
                                    i++;
                                } else {
                                    int i = 0;
                                    i++;
                                }
                            } catch (Exception ex) {
                            }
                        }
                    }
                }
            }
        }).start();
    }

    private void initGoogleApiClient() {
        mApiClient = new GoogleApiClient.Builder(this).addApi(Wearable.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this).build();

        mApiClient.connect();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        // TODO Auto-generated method stub
        super.onNewIntent(intent);
        on_create();
    }

    private void doinbackgroundDbFunctions() {
        // /Progress dialog
        setOrderID();
        questionnaireData = new ArrayList<QuestionnaireData>();
        getSavedQuestionnaire();
        try {

        } catch (Exception ex) {
            try {
                // code runs in a thread
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(
                                QuestionnaireActivity.this,
                                QuestionnaireActivity.this
                                        .getString(R.string.questionnaire_error_retrieving),
                                Toast.LENGTH_LONG).show();
                    }
                });
            } catch (final Exception exx) {
                Log.i("---", "Exception in thread");
            }

        }
        // /Progress dialog
    }

    private void postAsyncDbFunctions() {
        PrepareScreen();
        //LoginActivity.dataid =null;
        if (LoginActivity.dataid != null && LoginActivity.dataid.length() > 0
                && order != null && !order.getOrderID().contains("CC")) {
            lastDataId = LoginActivity.dataid;
            prepareLayoutByRestoring(LoginActivity.dataid);
        } else {

            if (isRestoring && order != null && !order.getOrderID().contains("CC")) {
                prepareLayoutByRestoring();
            } else if (lastDataId != null && order != null && !order.getOrderID().contains("CC"))
                prepareLayoutByRestoring(lastDataId);
            else if (questionnaireData.size() > 0)
                PrepareLayout(nextQIndex, true, false);
            else
                PrepareLayout(nextQIndex, false, false);
        }
        setInvertDisplay();
        displayUndisplayLooperMessage(RelativeLayout.VISIBLE);
        if (this.backPointer == null) {

            previousImg.setVisibility(View.INVISIBLE);
            previousBtn.setVisibility(RelativeLayout.INVISIBLE);
            updateProgressOnScreen(0);
        }
    }

    private void prepareLayoutByRestoring() {

        if (questionnaireData.size() > 0)
            PrepareLayout(nextQIndex, true, false);
        else
            PrepareLayout(nextQIndex, false, false);

        while (isRestoring && restore_data_id != null
                && restore_data_id.length() > 0) {
            PrepareLayout(nextQIndex + 1, true, false);
            if (questionObject.getDataID() != null
                    && questionObject.getDataID().equals(restore_data_id)) {

                restoreCameraVideoGallery();
                restore_data_id = null;
                isRestoring = false;

            } else
                nextbtnClickListener();

        }

    }

    private void prepareLayoutByRestoring(final String restore_data_id) {

        AlertDialog.Builder alert = new AlertDialog.Builder(
                QuestionnaireActivity.this);
        alert.setCancelable(false);
        alert.setTitle("");
        TextView textView = new TextView(QuestionnaireActivity.this);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper.makeHtmlString(getResources().getString(
                R.string.android_restoring_needed)));
        alert.setView(textView);
        alert.setPositiveButton(getResources().getString(
                R.string.questionnaire_exit_delete_alert_yes), new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                preparelayoutbyRestoringSubFunction(restore_data_id);
            }
        });
        alert.setNegativeButton(getResources().getString(
                R.string.questionnaire_exit_delete_alert_no), new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                lastDataId = null;
                isRestoring = false;
                if (questionnaireData.size() > 0)
                    PrepareLayout(nextQIndex, true, false);
                else
                    PrepareLayout(nextQIndex, false, false);
            }
        });
        alert.show();

    }

    private void preparelayoutbyRestoringSubFunction(String restore_data_id) {
        PrepareLayout(nextQIndex, true, false);
        while (restore_data_id != null
                && restore_data_id.length() > 0) {

            if (lastDataId == null) {
                lastDataId = null;
                restore_data_id = null;
                isRestoring = false;
                break;
            }
            if ((this.backPointer != null
                    && this.backPointer.equals(restore_data_id)) ||
                    (questionObject != null && questionObject.getDataID() != null
                            && questionObject.getDataID().equals(restore_data_id))) {

                lastDataId = null;
                restore_data_id = null;
                isRestoring = false;

            } else
                nextbtnClickListener();
            if (lastDataId == null) {
                lastDataId = null;
                restore_data_id = null;
                isRestoring = false;
                break;
            }
        }
    }

    private void PrepareScreen() {

        subLayout = (ScrollView) findViewById(R.id.scrollviewlayout);

        //ActivitySwipeDetector detector=new ActivitySwipeDetector(QuestionnaireActivity.this);
//		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//
//			subLayout.setOnScrollChangeListener(new View.OnScrollChangeListener() {
//				@Override
//				public void onScrollChange(View view, int i, int i1, int i2, int i3) {
//
//				}
//			});
//
//		}
//		else
//		{
//			subLayout.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() {
//				@Override
//				public void onScrollChanged() {
//					int scrollY = subLayout.getScrollY(); // For ScrollView
//					int scrollX = subLayout.getScrollX(); // For HorizontalScrollView
//					// DO SOMETHING WITH THE SCROLL COORDINATES
//					//Toast.makeText(QuestionnaireActivity.this,"Y="+scrollY,Toast.LENGTH_SHORT).show();
//
//					View child=(View) subLayout.getChildAt(0);
//					int diff=(child.getBottom()-(subLayout.getHeight()+subLayout.getScrollY()));
//					if (diff>=0 && diff<=100) {
//						//if (previousY==scrollY)
//						Toast.makeText(QuestionnaireActivity.this, "GOING down" + diff, Toast.LENGTH_SHORT).show();
//					}
//					if (scrollY>=0 && scrollY<=100) {
//						//
//						// if (previousY==scrollY)
//						Toast.makeText(QuestionnaireActivity.this, "GOING up" + scrollY, Toast.LENGTH_SHORT).show();
//					}
//					previousY=scrollY;
//
//				}
//			});
//		}
        questionnaireLayout = (RelativeLayout) findViewById(R.id.sublayout);
        //questionnaireLayout.setOnTouchListener(new ActivitySwipeDetector(QuestionnaireActivity.this));
//		IOverScrollDecor decor = OverScrollDecoratorHelper.setUpOverScroll(subLayout);
//		decor.setOverScrollUpdateListener(new IOverScrollUpdateListener() {
//			@Override
//			public void onOverScrollUpdate(IOverScrollDecor decor, int state, float offset) {
//				final View view = decor.getView();
//				Toast.makeText(QuestionnaireActivity.this,"offset="+offset,Toast.LENGTH_SHORT).show();
//				if (offset > 0) {
//					// 'view' is currently being over-scrolled from the top.
//				} else if (offset < 0) {
//					// 'view' is currently being over-scrolled from the bottom.
//				} else {
//					// No over-scroll is in-effect.
//					// This is synonymous with having (state == STATE_IDLE).
//				}
//			}
//		});
        if (subLayout != null) {
            subLayout.scrollTo(0, 0);
            subLayout.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);
            subLayout.setFocusable(true);
            subLayout.setFocusableInTouchMode(true);
        }
        getStartLocations();

        backScreenListData = new ArrayList<backScreenList>();
        try {

            display = this.getWindowManager().getDefaultDisplay();
            questionPageArray = new int[listObjects.size() * 5];
            listString = getJimptoItems();

            posLayout = (ScrollView) findViewById(R.id.posLayout);
            posLayout.scrollTo(0, 0);
            layout_shelf_study = (RelativeLayout) findViewById(R.id.layout_shelf_study);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Set getSetsRecords(String setid) {
        Set set = null;
        try {
            // set = (Set) DBHelper.convertFromBytes(setid);
            set = (Set) DBHelper.convertFromBytesWithOrder(setid, orderID);
        } catch (Exception e) {
            e.printStackTrace();
            set = null;
        }
        boolean exists = false;
        try {
            exists = DBHelper.orderSetExists(setid, orderID);
        } catch (IOException e) {
            e.printStackTrace();
        }
        int intOrderid = -1;
        try {
            intOrderid = (int) Integer.parseInt(orderID);
        } catch (Exception ex) {

        }
        if (set != null) {
            if (set.blockList != null && set.blockList.size() > 0 && intOrderid > -1 && set.getSetID().equals("2041")) {
//				for (int i=1;i<set.blockList.size();i++)
//				{
//					if (i+1>=set.blockList.size()) break;
//					Block startIndex=set.blockList.get(i);
//					Block endIndex=set.blockList.get(i+1);
//					set.randomizeTheseObjects(startIndex.getStartIndex(),endIndex.getStartIndex());
//				}
                String dataids = "";

                set.randomizeTheseObjects(124 + "", 138 + "", intOrderid);
            }
            try {
                server_attached_files = (ArrayList<InProgressFileData>) DBHelper
                        .convertFromBytes("inprogress_data");
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            if (set != null)
                set.currentSurveys = DBHelper.getSurveyyRecords();
            if (set != null)
                set.loopData = DBHelper.selecttblLoopData(Constants.tblLoops,
                        Constants.getWhereSetId(setid), set.loopData);

        }
        if (set == null) {
            return null;
        }
        if ((surveyId == null || surveyId.equals(""))
                && set.currentSurveys != null && set.currentSurveys.size() > 0) {
            surveyId = set.currentSurveys.get(0).getSurveyID();
        }
        QuestionnaireActivity.cachedSet = set;

        return set;

    }

    public boolean IsInternetConnectted() {
        ConnectivityManager conMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo i = conMgr.getActiveNetworkInfo();
        conMgr = null;
        if (i == null)
            return false;
        if (!i.isConnected())
            return false;
        if (!i.isAvailable())
            return false;
        return true;
    }

    public List<String> getListValues(String[] newVals) {
        List<String> StringVals = new ArrayList<String>();
        for (int i = 0; i < newVals.length; i++) {
            StringVals.add(newVals[i]);
        }

        return StringVals;
    }

    ListView lv;
    TextView lv_text;
    View attach_btn_view;
    ArrayAdapter<String> adapter;
    private Intent restoreIntentData;
    private boolean isRestoreCamera;
    private boolean isRestoreCropping;
    private ImageView previousImg;
    private ImageView nextImg;

    private void ShowAttachedFiles() {
        if ((attach_btn_view == null ||
                attach_btn_view.getVisibility() == RelativeLayout.GONE)
                && !On_Next_Button_Click("SumitSurvey"))
            return;

        // this is attached files ERROR
        layoutRecorder.setVisibility(RelativeLayout.GONE);
        tempId = 0;
        show_attachedfilescreen = true;
        enableValidationQuestion = false;
        // ReleaseMemory();
        findViewById(R.id.attach_whole_layout).setVisibility(
                RelativeLayout.VISIBLE);
        lv = (ListView) findViewById(R.id.attach_layout);
        lv_text = (TextView) findViewById(R.id.attach_layout_text);
        attach_btn_view = findViewById(R.id.attach_btn_layout);
        ImageButton btnEye = (ImageButton) findViewById(R.id.imgserver);
        btnEye.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {

                customAlertforServerSideFile(
                        QuestionnaireActivity.this,
                        getResources().getString(R.string.serverfilesTitle),
                        getServerSideFiles(server_attached_files, true,
                                uploadList));
            }
        });
        if (server_attached_files == null || server_attached_files.size() == 0)
            btnEye.setVisibility(RelativeLayout.GONE);
        attach_btn_view.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                photomenu = true;
                isLastAttachment = true;
                customMenu(openMenu(null));
            }
        });

        // if (adapter != null && attach_btn_view != null
        // && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
        // uploadList = ((selectedFilesAdapter) adapter).getFiles();
        // }
        // lv = new ListView(this.getApplicationContext());
        if (server_attached_files == null)
            server_attached_files = new ArrayList<InProgressFileData>();

        String[] items = new String[uploadList.size()];
        String[] itemDataIDs = new String[uploadList.size()];
        for (int i = 0; i < uploadList.size(); i++) {
            items[i] = uploadList.get(i).getFilePath();
            itemDataIDs[i] = uploadList.get(i).getDataID();
        }
        // for (int j = uploadList.size(); j < (uploadList.size() +
        // server_attached_files
        // .size()); j++) {
        // items[j] = server_attached_files.get(j - uploadList.size())
        // .getFileName();
        // itemDataIDs[j] = server_attached_files.get(j - uploadList.size())
        // .getFileDataID();
        // }
        adapter = new selectedFilesAdapter(QuestionnaireActivity.this,
                getListValues(items), uploadFileList, uploadList, set);

        /*
         * ArrayAdapter<String>(this, R.layout.file_name_row, R.id.nameText,
         * items);
         */
        lv.setAdapter(adapter);
        // lv.setsc
        // lv.setAdapter(new
        // ArrayAdapter<String>(this,android.R.layout.simple_list_item_single_choice,items));
        // lv.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        viewId = getViewId(viewId);
        /*
         * lv.setId(viewId - 1); TextView tv = new
         * TextView(this.getApplicationContext());
         * tv.setText(getResources().getString
         * (R.string.upload_following_attached_files));
         * tv.setTextColor(Color.BLACK); viewId = getViewId(viewId);
         * tv.setId(viewId - 1); questionnaireLayout.addView(tv,
         * getLayoutParam(tempId)); questionnaireLayout.addView(lv,
         * getListViewParam(viewId - 1));
         */
        lv.setVisibility(View.VISIBLE);

        lv_text.setVisibility(View.VISIBLE);
        nextBtn.setVisibility(View.VISIBLE);
        nextImg.setVisibility(View.VISIBLE);
        attach_btn_view.setVisibility(RelativeLayout.VISIBLE);
        String txt = getResources().getString(R.string.questionnaire_menu_btn);
        // if (modeSelect == 3) {
        // nextBtn.setCompoundDrawablesWithIntrinsicBounds(
        // R.drawable.done_new, 0, 0, 0);
        //
        // } else
        // nextBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
        // R.drawable.done_new, 0);
        updateProgressOnScreen(1);
        nextBtn.setText(txt);
        previousImg.setVisibility(View.INVISIBLE);
        previousBtn.setVisibility(View.INVISIBLE);
    }

    private boolean hideAttachedFiles() {
        if (findViewById(R.id.attach_whole_layout).getVisibility() == RelativeLayout.GONE) {
            return true;
        } else
            return false;

        // if ((attach_btn_view == null || attach_btn_view.getVisibility() ==
        // RelativeLayout.GONE)
        // && !On_Next_Button_Click("SumitSurvey"))
        // return;
        //
        // // this is attached files ERROR
        // // layoutRecorder.setVisibility(RelativeLayout.VISIBLE);
        // tempId = 0;
        // show_attachedfilescreen = false;
        // enableValidationQuestion = true;
        // // ReleaseMemory();
        // findViewById(R.id.attach_whole_layout).setVisibility(
        // RelativeLayout.GONE);
        // lv = (ListView) findViewById(R.id.attach_layout);
        // lv_text = (TextView) findViewById(R.id.attach_layout_text);
        // attach_btn_view = findViewById(R.id.attach_btn_layout);
        // attach_btn_view.setOnClickListener(new OnClickListener() {
        //
        // @Override
        // public void onClick(View v) {
        // photomenu = true;
        // isLastAttachment = true;
        // customMenu(openMenu());
        // }
        // });
        //
        // lv.setVisibility(View.GONE);
        //
        // lv_text.setVisibility(View.GONE);
        // nextBtn.setVisibility(View.VISIBLE);
        // nextImg.setVisibility(View.VISIBLE);
        // attach_btn_view.setVisibility(RelativeLayout.GONE);
        // String txt =
        // getResources().getString(R.string.questionnaire_menu_btn);
        // nextBtn.setText(txt);
        // previousImg.setVisibility(View.VISIBLE);
        // previousBtn.setVisibility(View.VISIBLE);
    }

    private RelativeLayout.LayoutParams getListViewParam(int id) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(700,
                500);

        lp.addRule(RelativeLayout.BELOW, id);
        lp.setMargins(5, 5, 0, 0);
        return lp;
    }

    private void onCameraActivityResult(int requestCode, int resultCode,
                                        Intent data) {
        try {
            // Describe the columns you'd like to have returned. Selecting
            // from
            // the Thumbnails location gives you both the Thumbnail Image
            // ID, as
            // well as the original image ID
            String[] projection = {
                    BaseColumns._ID, // The columns we want
                    MediaStore.Images.Thumbnails.IMAGE_ID,
                    MediaStore.Images.Thumbnails.KIND,
                    MediaStore.Images.Thumbnails.DATA};
            String selection = MediaStore.Images.Thumbnails.KIND + "=" + // Select
                    // only
                    // mini's
                    MediaStore.Images.Thumbnails.MINI_KIND;

            String sort = BaseColumns._ID + " DESC";

            // At the moment, this is a bit of a hack, as I'm returning ALL
            // images, and just taking the latest one. There is a better way
            // to
            // narrow this down I think with a WHERE clause which is
            // currently
            // the selection variable
            Cursor myCursor = this.managedQuery(
                    MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI,
                    projection, selection, null, sort);

            long imageId = 0l;
            long thumbnailImageId = 0l;
            String thumbnailPath = "";

            try {
                myCursor.moveToFirst();
                imageId = myCursor
                        .getLong(myCursor
                                .getColumnIndexOrThrow(MediaStore.Images.Thumbnails.IMAGE_ID));
                thumbnailImageId = myCursor.getLong(myCursor
                        .getColumnIndexOrThrow(BaseColumns._ID));
                thumbnailPath = myCursor
                        .getString(myCursor
                                .getColumnIndexOrThrow(MediaStore.Images.Thumbnails.DATA));
            } finally {
                myCursor.close();
            }

            // Create new Cursor to obtain the file Path for the large image

            String[] largeFileProjection = {BaseColumns._ID, MediaColumns.DATA};

            String largeFileSort = BaseColumns._ID + " DESC";
            myCursor = this.managedQuery(
                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                    largeFileProjection, null, null, largeFileSort);
            String largeImagePath = "";

            try {
                myCursor.moveToFirst();

                // This will actually give yo uthe file path location of the
                // image.
                largeImagePath = myCursor.getString(myCursor
                        .getColumnIndexOrThrow(MediaColumns.DATA));
            } finally {
                myCursor.close();
            }
            // These are the two URI's you'll be interested in. They give
            // you a
            // handle to the actual images

            Uri uriLargeImage = Uri.withAppendedPath(
                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                    String.valueOf(imageId));
            Uri uriThumbnailImage = Uri.withAppendedPath(
                    MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI,
                    String.valueOf(thumbnailImageId));

            String dataid = questionObject.getDataID();
            if (dataid.contains("^")) {
                dataid += "#@" + questionObject.getLoopInfo();
            }
            uploadList.add(getPathFromURI(uriLargeImage, dataid,
                    order.getClientName(), order.getBranchName(),
                    order.getSetName(), sdf.format(new Date()),
                    order.getOrderID(), false));
            uploadFileList.add(uriLargeImage);
            uploadFileListDataId.add(questionObject.getDataID());
            Toast.makeText(this.getApplicationContext(),
                    getString(R.string.questionnaire_file_attached_text),
                    Toast.LENGTH_LONG).show();
            if (isLastAttachment == true
                    && attach_btn_view != null
                    && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                ShowAttachedFiles();
            }

            // I've left out the remaining code, as all I do is assign the
            // URI's
            // to my own objects anyways...
        } catch (Exception ex) {
            Toast.makeText(this.getApplicationContext(),
                    getString(R.string.pos_not_attach), Toast.LENGTH_LONG)
                    .show();
        }
    }

    private void performCrop(Uri picUri, boolean islast) {
        try {
            String extra = "";
            if (questionObject != null && questionObject.getDataID() != null)
                extra = questionObject.getDataID() + "_";
            String path = CheckerApp.localFilesDir.getPath()//Environment.getExternalStorageDirectory().getPath()
                    + "/DCIM/Camera/";
            Calendar cal = Calendar.getInstance();
            String current_paths = "checker_" + extra +
                    +(System.currentTimeMillis() / 1000) + "_"
                    + (System.currentTimeMillis() / (1000 * 60)) + ".jpg";
            File file = new File(path, current_paths);
            path_Camera = file.getPath();

            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
            uri_Camera = Uri.fromFile(file);

            Intent cropIntent = new Intent("com.android.camera.action.CROP");
            // indicate image type and Uri
            cropIntent.setDataAndType(picUri, "image/*");
            cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri_Camera);
            // set crop properties
            cropIntent.putExtra("crop", "true");
            // indicate aspect of desired crop
            cropIntent.putExtra("aspectX", 1);
            cropIntent.putExtra("aspectY", 1);
            // indicate output X and Y
            // 03315982254
            cropIntent.putExtra("outputX", 256);
            cropIntent.putExtra("outputY", 256);
            // retrieve data on return
            cropIntent.putExtra("return-data", true);
            // start the activity - we handle returning in onActivityResult
            if (islast)
                startActivityForResult(cropIntent, PIC_CROP_LAST);
            else
                startActivityForResult(cropIntent, PIC_CROP);
        }
        // respond to users whose devices do not support the crop action
        catch (ActivityNotFoundException anfe) {
            // display an error message
            try {

                if (path_Camera != null) {
                    filePathDataID fId = new filePathDataID();

                    String dataid = questionObject.getDataID();
                    if (dataid.contains("^")) {
                        dataid += "#@" + questionObject.getLoopInfo();
                    }
                    fId.setDataID(dataid, islast);
                    fId.setFilePath(path_Camera);
                    fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                    fId.setUPLOAD_FILe_BRANCH_NAME(order.getBranchName());
                    fId.setUPLOAD_FILe_SET_NAME(order.getSetName());
                    fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));
                    fId.setUPLOAD_FILe_Sample_size(helper.getSampleSize());

                    fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                    fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                    uploadList.add(fId);
                    uploadFileList.add(uri_Camera);
                    uploadFileListDataId.add(questionObject.getDataID());
                    String[] items = new String[uploadFileList.size()];
                    Toast.makeText(
                            this.getApplicationContext(),
                            getString(R.string.questionnaire_file_attached_text),
                            Toast.LENGTH_LONG).show();
                    if (isLastAttachment == true
                            && attach_btn_view != null
                            && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                        ShowAttachedFiles();
                    }
                } else {

                }
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                // onCameraActivityResult(requestCode, resultCode, data);
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // TODO Auto-generated method stub
        if (attach_btn_view != null
                && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE
                && adapter != null) {
            uploadList = ((selectedFilesAdapter) adapter).getFiles();
        }
        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        SharedPreferences.Editor outState = myPrefs.edit();
        outState.putBoolean("ispaused", false);
        outState.commit();
        Constants.setLocale(QuestionnaireActivity.this);
        switch (requestCode) {
            case PICK_PHOTO_CODE:
                if (resultCode == RESULT_OK) {
                    Uri photoUri = data.getData();

                    String realPath = getUriRealPath(QuestionnaireActivity.this, data.getData());
                    uploadList.add(getPathFromPath(realPath, questionObject.getDataID(),
                            order.getClientName(), order.getBranchName(),
                            order.getSetName(), sdf.format(new Date()),
                            order.getOrderID(), false));
                    Toast.makeText(
                            QuestionnaireActivity.this,
                            "" + getString(R.string.questionnaire_file_attached_text) + " " + realPath,
                            Toast.LENGTH_LONG).show();
                }
                break;
            case OWN_CAMERA:
                if (resultCode == RESULT_OK) {
                    String dataid = null;
                    if (questionObject != null
                            && questionObject.getDataID() != null
                            && isLastAttachment == false)
                        dataid = questionObject.getDataID();
                    else
                        isLastAttachment = true;

                    if (myPrefs.getBoolean(Constants.SETTINGS_ENABLE_CROPPING,
                            false) && PreviewDemo.IsCrop == true) {
                        Intent cropIntent = new Intent(
                                "com.android.camera.action.CROP");
                        File file = new File(data.getExtras().getString("jpg"));
                        uri_Camera = Uri.fromFile(file);
                        path_Camera = data.getExtras().getString("jpg");
                        // indicate image type and Uri
                        cropIntent.setDataAndType(Uri.fromFile(file), "image/*");
                        cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri_Camera);
                        // set crop properties
                        cropIntent.putExtra("crop", "true");
                        // indicate aspect of desired crop
                        cropIntent.putExtra("aspectX", 1);
                        cropIntent.putExtra("aspectY", 1);
                        // indicate output X and Y
                        cropIntent.putExtra("outputX", 256);
                        cropIntent.putExtra("outputY", 256);
                        // retrieve data on return
                        cropIntent.putExtra("return-data", true);
                        // start the activity - we handle returning in
                        // onActivityResult
                        if (isLastAttachment)
                            startActivityForResult(cropIntent, PIC_CROP_LAST);
                        else
                            startActivityForResult(cropIntent, PIC_CROP);
                    } else {

                        filePathDataID fId = new filePathDataID();
                        fId.setDataID(dataid, isLastAttachment);
                        fId.setFilePath(data.getExtras().getString("jpg"));
                        fId.setUPLOAD_FILe_ORDERID(order.getOrderID());
                        fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                        fId.setUPLOAD_FILe_BRANCH_NAME(order.getBranchFullname());
                        fId.setUPLOAD_FILe_Sample_size(helper.getSampleSize());

                        fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                        fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                        fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));
                        uploadList.add(fId);
                        File file = new File(data.getExtras().getString("jpg"));
                        uri_Camera = Uri.fromFile(file);
                        uploadFileList.add(uri_Camera);
                        uploadFileListDataId.add(questionObject.getDataID());
                        // uploadList.add(getPathFromPath(
                        // data.getExtras().getString("jpg"), dataid,
                        // order.getClientName(), order.getBranchName(),
                        // order.getSetName(), sdf.format(new Date()),
                        // order.getOrderID(), false));
                        Toast.makeText(
                                this.getApplicationContext(),
                                getString(R.string.questionnaire_file_attached_text),
                                Toast.LENGTH_LONG).show();
                        if (isLastAttachment == true
                                && attach_btn_view != null
                                && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                            ShowAttachedFiles();
                        }
                        path_Camera = data.getExtras().getString("jpg");

                        if (myPrefs.getBoolean(
                                Constants.SETTINGS_SHOW_ANOTHER_PHOTO, false)) {
                            customGreenAlert(getResources().getString(
                                    R.string.file_saved_properly_at)
                                    + path_Camera);
                        }
                    }
                }
                break;
            case FILE_SELECT_CODE_LAST:

                if (resultCode == RESULT_OK) {
                    if (!isRestoring)
                        galleryCase(data, true);
                    else {
                        isRestoreGallery = true;
                        restoreIntentData = data;
                    }
                }
                break;

            case FILE_SELECT_CODE:
                if (resultCode == RESULT_OK) {
                    if (!isRestoring)
                        galleryCase(data, false);
                    else {
                        isRestoreGallery = true;
                        restoreIntentData = data;
                    }
                }
                break;

            case FILE_SELECT_CODE_CUSTOM:
                if (resultCode == RESULT_OK) {

                    if (data.hasExtra(Constants.SELECT_FILE_PATH)) {
                        String result = data.getExtras().getString(
                                Constants.SELECT_FILE_PATH);
                        if (result != null && !result.equals("")) {
                            File file = new File(result);
                            String dataid = null;
                            if (questionObject != null
                                    && questionObject.getDataID() != null
                                    && isLastAttachment == false)
                                dataid = questionObject.getDataID();
                            else
                                isLastAttachment = true;
                            uploadList.add(getPathFromPath(file, dataid,
                                    order.getClientName(), order.getBranchName(),
                                    order.getSetName(), sdf.format(new Date()),
                                    order.getOrderID(), false));
                            Toast.makeText(
                                    this.getApplicationContext(),
                                    getString(R.string.questionnaire_file_attached_text),
                                    Toast.LENGTH_LONG).show();
                            if (isLastAttachment == true
                                    && attach_btn_view != null
                                    && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                                ShowAttachedFiles();
                            }
                        }
                    } else if (data.hasExtra(Constants.SELECT_FILE_PATH_ARRAY)) {
                        String[] result = data.getExtras().getStringArray(
                                Constants.SELECT_FILE_PATH_ARRAY);
                        if (result != null && result.length > 0) {
                            for (int i = 0; i < result.length; i++) {
                                File file = new File(result[i]);
                                String dataid = null;
                                if (questionObject != null
                                        && questionObject.getDataID() != null
                                        && isLastAttachment == false)
                                    dataid = questionObject.getDataID();
                                else
                                    isLastAttachment = true;
                                uploadList.add(getPathFromPath(file, dataid,
                                        order.getClientName(),
                                        order.getBranchName(), order.getSetName(),
                                        sdf.format(new Date()), order.getOrderID(),
                                        false));
                            }
                            Toast.makeText(
                                    this.getApplicationContext(),
                                    getString(R.string.questionnaire_file_attached_text),
                                    Toast.LENGTH_LONG).show();
                            if (isLastAttachment == true
                                    && attach_btn_view != null
                                    && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                                ShowAttachedFiles();
                            }
                        }
                    }

                }
                break;
            case 456:
                if (resultCode == RESULT_OK) {
                    String result = data.getExtras().getString("result_text");
                    if (result != "" && pos_shelf_item != null
                            && pos_shelf_item.listProducts != null) {
                        // Toast.makeText(QuestionnaireActivity.this, result,
                        // Toast.LENGTH_LONG).show();
                        String isFound = "";
                        for (int i = 0; i < pos_shelf_item.listProducts.size(); i++) {
                            if (pos_shelf_item.listProducts.get(i).getProductCode() != null
                                    && pos_shelf_item.listProducts.get(i)
                                    .getProductCode().toLowerCase()
                                    .equals(result.toLowerCase())) {
                                isFound = pos_shelf_item.listProducts.get(i)
                                        .getProductName();
                                selectedProduct = i + 1;
                                productListViewListener = -1;
                                productListView.setVisibility(View.GONE);
                                ((ArrayAdapter) (productListView.getAdapter()))
                                        .getFilter().filter("");
                            }

                        }
                        if (isFound != "") {
                            productEditText.setText(Helper.makeHtmlString(isFound));

                            showSelectedDataPOS();
                        } else
                            Toast.makeText(QuestionnaireActivity.this,
                                    getString(R.string.pos_error_product),
                                    Toast.LENGTH_LONG).show();
                    }
                }
                break;
            case VIDEO_LAST:
                if (resultCode == Activity.RESULT_OK) {
                    if (!isRestoring)
                        videoCase(data, true);
                    else {
                        isRestoreVideo = true;
                        restoreIntentData = data;
                    }
                }

                break;

            case 0:
            case 203:
            case 202:

                // if (path_Camera == null && myPrefs.contains("ispaused")
                // && myPrefs.getBoolean("ispaused", false)) {
                // SharedPreferences.Editor outState = myPrefs.edit();
                // outState.putBoolean("ispaused", false);
                // outState.commit();
                // onRestoreData();
                // } else
                if (resultCode == Activity.RESULT_OK) {
                    if (!isRestoring)
                        videoCase(data, false);
                    else {
                        isRestoreVideo = true;
                        restoreIntentData = data;
                    }
                }

                break;
            case PIC_CROP:

                if (resultCode == Activity.RESULT_OK || data.getData() != null) {
                    if (!isRestoring)
                        croppingCase(data, false);
                    else {
                        isRestoreCropping = true;
                        restoreIntentData = data;
                    }
                }
                break;
            case PIC_CROP_LAST:

                if (resultCode == Activity.RESULT_OK || data.getData() != null) {
                    if (!isRestoring)
                        croppingCase(data, true);
                    else {
                        isRestoreCropping = true;
                        restoreIntentData = data;
                    }
                }
                break;

            case CAMERA_PIC_REQUEST_LAST:
                if (resultCode == Activity.RESULT_OK) {

                    myPrefs = getSharedPreferences("pref", MODE_PRIVATE);

                    if (!isRestoring)
                        cameraCase(data, true);
                    else {
                        isRestoreCamera = true;
                        restoreIntentData = data;
                    }
                }
                break;

            case 201:
                if (resultCode == Activity.RESULT_OK) {

                    myPrefs = getSharedPreferences("pref", MODE_PRIVATE);

                    if (!isRestoring)
                        cameraCase(data, false);
                    else {
                        isRestoreCamera = true;
                        restoreIntentData = data;
                    }
                }
                break;

            case 111:
                if (resultCode == Activity.RESULT_OK) {
                    try {

                        if (uri_Camera != null
                                && pos_shelf_item.picture_item != null) {

                            try {

                            } catch (Exception ex) {

                            }
                            String dataid = null;
                            if (questionObject != null
                                    && questionObject.getDataID() != null
                                    && isLastAttachment == false)
                                dataid = questionObject.getDataID();
                            else
                                isLastAttachment = true;
                            if (dataid.contains("^")) {
                                dataid += "#@" + questionObject.getLoopInfo();
                            }
                            filePathDataID fId = new filePathDataID();
                            fId.setDataID(dataid, false);
                            fId.setFilePath(path_Camera);
                            fId.setUPLOAD_FILe_ORDERID(order.getOrderID());
                            fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                            fId.setUPLOAD_FILe_BRANCH_NAME(order
                                    .getBranchFullname());
                            fId.setUPLOAD_FILe_Sample_size(helper.getSampleSize());

                            fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));

                            fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                            fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                            uploadList.add(fId);
                            uploadFileList.add(uri_Camera);
                            uploadFileListDataId.add(questionObject.getDataID());
                            // String[] items = new String[uploadFileList.size()];

                            Toast.makeText(
                                    this.getApplicationContext(),
                                    getString(R.string.questionnaire_file_attached_text),
                                    Toast.LENGTH_LONG).show();
                            if (isLastAttachment == true
                                    && attach_btn_view != null
                                    && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                                ShowAttachedFiles();
                            }
                        } else {

                        }
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                        // onCameraActivityResult(requestCode, resultCode, data);
                    }
                }
                break;
        }
        updateServerSideFiles();
    }

    public void updateServerSideFiles() {
        serverSideFiles = getServerSideFiles(server_attached_files, false,
                uploadList);

        if (serverSideFiles != null && serverSideFiles.size() > 0) {
            if (serverSideFiles != null && serverSideFiles.size() > 0) {
                if (eyeView != null)
                    eyeView.setVisibility(RelativeLayout.VISIBLE);
            } else if (eyeView != null)
                eyeView.setVisibility(RelativeLayout.INVISIBLE);
        }

        lastserverSideFiles = getServerSideFiles(server_attached_files,
                true,
                uploadList);

        if (lastserverSideFiles != null && lastserverSideFiles.size() > 0) {
            if (lastserverSideFiles != null && lastserverSideFiles.size() > 0) {
                if (lasteyeview != null)
                    lasteyeview.setVisibility(RelativeLayout.VISIBLE);
            } else if (lasteyeview != null)
                lasteyeview.setVisibility(RelativeLayout.INVISIBLE);
        }
    }

    private void galleryCase(Intent data, boolean isLast) {
        boolean isSavedOkayli = false;
        if (data != null && data.getData() != null) {
            Uri selectedImage = data.getData();
            String realPath = null;
            try {
                realPath = getUriRealPath(QuestionnaireActivity.this, selectedImage);
                if (!checkFileExists(realPath)) {
                    realPath = getRealPathFromURINew(selectedImage);
                }

                if (!checkFileExists(realPath)) {
                    realPath = getRealPathFromURIimgs(selectedImage);
                }
            } catch (Exception ex) {
            }
            File thisFile = null;
            if (realPath == null) {


                String d = getThisFileDate(selectedImage.getPath());

                InputStream imageStream = null;
                try {
                    imageStream = getContentResolver().openInputStream(
                            selectedImage);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                Bitmap yourSelectedImage = BitmapFactory
                        .decodeStream(imageStream);

                thisFile = Helper.saveBitmapToCheckerFolder(yourSelectedImage,
                        null);
            }
            String dataid = null;
            if (questionObject != null && questionObject.getDataID() != null
                    && isLastAttachment == false)
                dataid = questionObject.getDataID();
            else
                isLastAttachment = true;

            if (realPath != null) {
                // check if file is accesible
                // File file = new File(realPath);
                // if (file.exists())
                // {
                // Toast.makeText(this.getApplicationContext(),
                // "File doesnot exist!",
                // Toast.LENGTH_LONG).show();
                // isSavedOkayli = true;
                // }
                // else
                {
                    try {
                        if (!checkFileExists(realPath)) {
                            Toast.makeText(
                                    this.getApplicationContext(),
                                    getString(R.string.pos_not_attach),
                                    Toast.LENGTH_LONG).show();
                            return;
                        }
                    } catch (Exception ex) {
                        Toast.makeText(
                                this.getApplicationContext(),
                                getString(R.string.pos_not_attach),
                                Toast.LENGTH_LONG).show();
                        return;
                    }
                    uploadList.add(getPathFromPath(realPath, dataid,
                            order.getClientName(), order.getBranchName(),
                            order.getSetName(), sdf.format(new Date()),
                            order.getOrderID(), isLast));
                    Toast.makeText(
                            this.getApplicationContext(),
                            getString(R.string.questionnaire_file_attached_text),
                            Toast.LENGTH_LONG).show();
                    if (isLastAttachment == true
                            && attach_btn_view != null
                            && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                        ShowAttachedFiles();
                    }
                    isSavedOkayli = true;
                }
            } else if (thisFile != null) {
                uploadList.add(getPathFromPath(thisFile, dataid,
                        order.getClientName(), order.getBranchName(),
                        order.getSetName(), sdf.format(new Date()),
                        order.getOrderID(), isLast));
                Toast.makeText(this.getApplicationContext(),
                        getString(R.string.questionnaire_file_attached_text),
                        Toast.LENGTH_LONG).show();
                if (isLastAttachment == true
                        && attach_btn_view != null
                        && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                    ShowAttachedFiles();
                }
                isSavedOkayli = true;
            }
        }
        if (!isSavedOkayli) {
            showFileChooserCustom();
            Toast.makeText(this.getApplicationContext(),
                    getString(R.string.error_opening_android_gallery),
                    Toast.LENGTH_LONG).show();

        }

    }

    private String getThisFileDate(String path) {
        ExifInterface intf = null;
        try {
            intf = new ExifInterface(path);
        } catch (IOException e) {
            e.printStackTrace();
        }

        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inPreferredConfig = Bitmap.Config.ARGB_8888;

        String dateTime = null;
        if (intf != null) {
            try {
                dateTime = intf.getAttribute(ExifInterface.TAG_DATETIME);
                if (dateTime == null)
                    dateTime = new Date((new File(path)).lastModified())
                            .toString();
            } catch (Exception ex) {
                // dateTime = "crashed at 533";
            }
            try {
                if (dateTime == null)
                    dateTime = android.text.format.DateFormat.format(
                            "yyyy-MM-dd HH:mm:ss",
                            Calendar.getInstance().getTime()).toString();
            } catch (Exception ex) {
                // dateTime += "crashed at 541";
            }

        }
        return dateTime;
    }

    private void croppingCase(Intent data, boolean islast) {

        try {

            if (uri_Camera != null) {
                if (path_Camera != null) {
                    File file = new File(path_Camera);
                    // file = setExifVar(file);
                }
                // performCrop(uri_Camera);

                String dataid = null;
                if (questionObject != null
                        && questionObject.getDataID() != null
                        && isLastAttachment == false)
                    dataid = questionObject.getDataID();
                else
                    isLastAttachment = true;
                if (dataid != null && dataid.contains("^")) {
                    dataid += "#@" + questionObject.getLoopInfo();
                }
                filePathDataID fId = new filePathDataID();
                fId.setDataID(dataid, islast);
                fId.setFilePath(path_Camera);
                fId.setUPLOAD_FILe_ORDERID(order.getOrderID());
                fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                fId.setUPLOAD_FILe_BRANCH_NAME(order.getBranchFullname());
                fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));
                fId.setUPLOAD_FILe_Sample_size(helper.getSampleSize());

                fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                uploadList.add(fId);
                uploadFileList.add(uri_Camera);
                uploadFileListDataId.add(questionObject.getDataID());
                String[] items = new String[uploadFileList.size()];

                Toast.makeText(this.getApplicationContext(),
                        getString(R.string.questionnaire_file_attached_text),
                        Toast.LENGTH_LONG).show();
                if (isLastAttachment == true
                        && attach_btn_view != null
                        && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                    ShowAttachedFiles();
                }
            } else {

            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            // onCameraActivityResult(requestCode, resultCode, data);
        }

    }

    // private File setExifVar(File exifVar) throws IOException {
    // String mString = "Generic Text..";
    // ExifInterface exif = new ExifInterface(exifVar.getAbsolutePath());
    // exif.setAttribute("UserComment", mString);
    //
    // if (Helper.critStartLat.equals("")) {
    // Helper.critStartLat = "0.0";
    // Helper.critStartLat = "0.0";
    // }
    // exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE,
    // String.valueOf(Helper.critStartLat));
    //
    // exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,
    // String.valueOf(Helper.critStartLong));
    //
    // exif.saveAttributes();
    //
    // return exifVar;
    // }

    private void cameraCase(Intent data, boolean islast) {
        try {
            uri_Camera = null;
            if (checkFileExists(path_Camera)) {
                if (myPrefs.getBoolean(
                        Constants.SETTINGS_SHOW_ANOTHER_PHOTO, false)) {
                    customGreenAlert(getResources().getString(
                            R.string.file_saved_properly_at)
                            + path_Camera);

                }

                File file = new File(path_Camera);
                uri_Camera = Uri.fromFile(file);
            } else {
                if (data != null && data.getData() != null) {
                    path_Camera = getRealPathFromURI(data.getData());
                    File file = new File(path_Camera);
                    uri_Camera = Uri.fromFile(file);
                    if (myPrefs.getBoolean(
                            Constants.SETTINGS_SHOW_ANOTHER_PHOTO, false)) {
                        customGreenAlert(getResources().getString(
                                R.string.file_saved_properly_at)
                                + path_Camera);

                    }

                } else {
                    customToast(
                            getResources().getString(
                                    R.string.unable_to_save_file_at)
                                    + path_Camera, false, Toast.LENGTH_SHORT);
                    return;
                }
            }

            if (uri_Camera != null) {
                myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                if (myPrefs.getBoolean(Constants.SETTINGS_ENABLE_CROPPING,
                        false)) {
                    performCrop(uri_Camera, islast);
                } else {

                    String dataid = null;
                    if (questionObject != null
                            && questionObject.getDataID() != null
                            && isLastAttachment == false)
                        dataid = questionObject.getDataID();
                    else
                        isLastAttachment = true;

                    filePathDataID fId = new filePathDataID();
                    if (dataid != null && dataid.contains("^")) {
                        dataid += "#@" + questionObject.getLoopInfo();
                    }
                    fId.setDataID(dataid, islast);
                    fId.setFilePath(path_Camera);
                    fId.setUPLOAD_FILe_ORDERID(order.getOrderID());
                    fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                    fId.setUPLOAD_FILe_BRANCH_NAME(order.getBranchFullname());
                    fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));
                    fId.setUPLOAD_FILe_Sample_size(Helper.getSampleSize());

                    fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                    fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                    uploadList.add(fId);
                    uploadFileList.add(uri_Camera);
                    uploadFileListDataId.add(questionObject.getDataID());
                    String[] items = new String[uploadFileList.size()];
                    if (isLastAttachment == true
                            && attach_btn_view != null
                            && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                        ShowAttachedFiles();
                    }
                }
            } else {

            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            // onCameraActivityResult(requestCode, resultCode, data);
            if (uploadFileList.size() > 0) {
                Toast.makeText(
                        QuestionnaireActivity.this,
                        getResources().getString(R.string.crashing_app_ourself)
                                + path_Camera, Toast.LENGTH_SHORT).show();
                Object obj = null;
                obj.toString();
            }
        }
    }

    public void ShowMoreCameraAlert(Context context, String title,
                                    final String message, String button_lbl, final String dataid) {
        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        alert.setCancelable(false);
        alert.setTitle(title);
        TextView textView = new TextView(context);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper.makeHtmlString(message));
        alert.setView(textView);
        alert.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();
                start_camera(dataid);
                photomenu = false;

            }
        });
        alert.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

            }
        });
        alert.show();
    }

    private boolean checkFileExists(String path_Camera2) {
        try {
            File f = new File(path_Camera2);
            if (f.exists())
                return true;
        } catch (Exception ex) {

        }
        return false;
    }

    public filePathDataID getPathFromURI(Uri contentUri, String dataId,
                                         String clientname, String branchfullname, String setname,
                                         String date, String orderId, boolean islast) {
        // (uriLargeImage,
        // questionObject.getDataID(), order.getClientName(),
        // order.getBranchName(), order.getSetName(),
        // sdf.format(new Date())));
        String[] proj = {MediaColumns.DATA};
        Cursor cursor = managedQuery(contentUri, proj, null, null, null);
        int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);
        cursor.moveToFirst();
        filePathDataID fId = new filePathDataID();
        fId.setDataID(dataId, islast);
        fId.setFilePath(cursor.getString(column_index));
        fId.setUPLOAD_FILe_CLIENT_NAME(clientname);
        fId.setUPLOAD_FILe_BRANCH_NAME(branchfullname);
        fId.setUPLOAD_FILe_SET_NAME(setname);
        fId.setUPLOAD_FILe_DATE(date);
        fId.setUPLOAD_FILe_ORDERID(orderId);

        fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
        fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
        return fId;
    }

    public filePathDataID getPathFromPath(File fpath, String dataId,
                                          String clientname, String branchfullname, String setname,
                                          String date, String orderId, boolean isLast) {
        // (uriLargeImage,
        // questionObject.getDataID(), order.getClientName(),
        // order.getBranchName(), order.getSetName(),
        // sdf.format(new Date())));
        filePathDataID fId = new filePathDataID();
        fId.setDataID(dataId, isLast);
        fId.setFilePath(fpath.getAbsolutePath());
        fId.setUPLOAD_FILe_CLIENT_NAME(clientname);
        fId.setUPLOAD_FILe_BRANCH_NAME(branchfullname);
        fId.setUPLOAD_FILe_SET_NAME(setname);
        fId.setUPLOAD_FILe_DATE(date);
        fId.setUPLOAD_FILe_ORDERID(orderId);

        fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
        fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
        return fId;
    }

    public filePathDataID getPathFromPath(String fpath, String dataId,
                                          String clientname, String branchfullname, String setname,
                                          String date, String orderId, boolean islast) {
        // (uriLargeImage,
        // questionObject.getDataID(), order.getClientName(),
        // order.getBranchName(), order.getSetName(),
        // sdf.format(new Date())));
        filePathDataID fId = new filePathDataID();
        fId.setDataID(dataId, islast);
        fId.setFilePath(fpath);
        fId.setUPLOAD_FILe_CLIENT_NAME(clientname);
        fId.setUPLOAD_FILe_BRANCH_NAME(branchfullname);
        fId.setUPLOAD_FILe_SET_NAME(setname);
        fId.setUPLOAD_FILe_DATE(date);
        fId.setUPLOAD_FILe_ORDERID(orderId);
        fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
        fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
        return fId;
    }

    public filePathDataID getFilePathDataId(String dataId, String clientname,
                                            String branchfullname, String setname, String date, String orderId,
                                            boolean islast) {
        // (uriLargeImage,
        // questionObject.getDataID(), order.getClientName(),
        // order.getBranchName(), order.getSetName(),
        // sdf.format(new Date())));
        filePathDataID fId = new filePathDataID();
        fId.setDataID(dataId, islast);
        fId.setUPLOAD_FILe_CLIENT_NAME(clientname);
        fId.setUPLOAD_FILe_BRANCH_NAME(branchfullname);
        fId.setUPLOAD_FILe_SET_NAME(setname);
        fId.setUPLOAD_FILe_DATE(date);
        fId.setUPLOAD_FILe_ORDERID(orderId);

        fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
        fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
        return fId;
    }

    private void getEndLocations() {
        if (Settings.Secure.getString(
                QuestionnaireActivity.this.getContentResolver(),
                Settings.Secure.ALLOW_MOCK_LOCATION).equals("1")) {
            Helper.critEndLat = "";
            Helper.critEndLong = "";
            return;
        }
        Location location = null;
        lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        try {
            if (lm != null
                    && lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {

                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000,
                        1, this);
                location = lm
                        .getLastKnownLocation(LocationManager.GPS_PROVIDER);
            }
            if (location != null) {
                Helper.critEndLat = String.valueOf(location.getLatitude());
                Helper.critEndLong = String.valueOf(location.getLongitude());
            } else {
                if (lm != null
                        && lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                    location = lm
                            .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,
                            0, 0, this);

                    if (location != null) {
                        Helper.critEndLat = String.valueOf(location
                                .getLatitude());
                        Helper.critEndLong = String.valueOf(location
                                .getLongitude());
                    } else {
                        Helper.critEndLat = "";
                        Helper.critEndLong = "";
                    }
                }
            }
        } catch (Exception ex) {
            Helper.critEndLat = "";
            Helper.critEndLong = "";
        }

    }

    private void getStartLocations() {
        Location location = null;
        if (Settings.Secure.getString(
                QuestionnaireActivity.this.getContentResolver(),
                Settings.Secure.ALLOW_MOCK_LOCATION).equals("1")) {
            Helper.critStartLat = "";
            Helper.critStartLong = "";
            return;
        }
        lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        try {
            if (lm != null
                    && lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {

                if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    // TODO: Consider calling
                    //    ActivityCompat#requestPermissions
                    // here to request the missing permissions, and then overriding
                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                    //                                          int[] grantResults)
                    // to handle the case where the user grants the permission. See the documentation
                    // for ActivityCompat#requestPermissions for more details.
                    return;
                }
                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000,
                        1, this);
                location = lm
                        .getLastKnownLocation(LocationManager.GPS_PROVIDER);
            }
            if (location != null) {
                Helper.critStartLat = String.valueOf(location.getLatitude());
                Helper.critStartLong = String.valueOf(location.getLongitude());
                sortBranchesByLatLng();
            } else {
                if (lm != null
                        && lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                    location = lm
                            .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,
                            0, 0, this);

                    if (location != null) {
                        Helper.critStartLat = String.valueOf(location
                                .getLatitude());
                        Helper.critStartLong = String.valueOf(location
                                .getLongitude());
                        sortBranchesByLatLng();
                    } else {
                        Helper.critStartLat = "";
                        Helper.critStartLong = "";
                    }

                }
            }
        } catch (Exception ex) {
            Helper.critStartLat = "";
            Helper.critStartLong = "";
        }
    }

    public float distFrom(float lat1, float lng1, float lat2, float lng2) {
        double earthRadius = 3958.75;
        double dLat = Math.toRadians(lat2 - lat1);
        double dLng = Math.toRadians(lng2 - lng1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos(Math.toRadians(lat1))
                * Math.cos(Math.toRadians(lat2)) * Math.sin(dLng / 2)
                * Math.sin(dLng / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double dist = earthRadius * c;

        int meterConversion = 1609;

        return (float) (dist * meterConversion);
    }

    private void sortBranchesByLatLng() {

        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        // Helper.critStartLat = String.valueOf(location
        // .getLatitude());
        // Helper.critStartLong = String.valueOf(location
        // .getLongitude());
        if (set != null && listBranches != null) {
            // Sort here

            for (int i = 0; i < listBranches.size(); i++) {
                float startlat = 0.0f;
                float startlon = 0.0f;
                float endlat = 0.0f;
                float endlon = 0.0f;

                try {
                    startlat = Float.parseFloat(Helper.critStartLat);
                } catch (Exception ex) {
                }
                try {
                    startlon = Float.parseFloat(Helper.critStartLong);
                } catch (Exception ex) {
                }
                try {
                    endlat = Float.parseFloat(listBranches.get(i)
                            .getBranchLat());
                } catch (Exception ex) {
                }
                try {
                    endlon = Float.parseFloat(listBranches.get(i)
                            .getBranchLong());
                } catch (Exception ex) {
                }

                float distance = distFrom(startlat, startlon, endlat, endlon);
                listBranches.get(i).setDistance(distance);
            }
            if (myPrefs.getBoolean(Constants.SETTINGS_ENABLE_SORTING, true)) {

            } else
                return;

            listBranches = sortByDistance(listBranches);
        }
    }

    private ArrayList<Branches> sortByDistance(ArrayList<Branches> listBranches2) {
        for (int i = 0; i < listBranches2.size(); i++) {
            for (int j = i + 1; j < listBranches2.size(); j++) {
                if (listBranches2.get(i).getDistance() > listBranches2.get(j)
                        .getDistance()) {
                    Branches temp = new Branches();
                    temp.setBranchID(listBranches2.get(i).getBranchID());
                    temp.setBranchName(listBranches2.get(i).getBranchName());
                    temp.setBranchLat(listBranches2.get(i).getBranchLat());
                    temp.setBranchLong(listBranches2.get(i).getBranchLong());
                    temp.setDistance(listBranches2.get(i).getDistance());
                    listBranches2.set(i, listBranches2.get(j));
                    listBranches2.set(j, temp);
                }
            }
        }
        return listBranches2;
    }

    void setOrder() {
        if (Orders.getOrders().size() <= 0 || isRestoring) {

            Surveys.setSets(DBHelper.getSurveyyRecords());
            ArrayList<Order> jobordersss = DBHelper
                    .getOrders(
                            null,
                            Constants.DB_TABLE_JOBLIST,
                            new String[]{
                                    Constants.DB_TABLE_JOBLIST_ORDERID,
                                    Constants.DB_TABLE_JOBLIST_DATE,
                                    Constants.DB_TABLE_JOBLIST_SN,
                                    Constants.DB_TABLE_JOBLIST_DESC,
                                    Constants.DB_TABLE_JOBLIST_SETNAME,
                                    Constants.DB_TABLE_JOBLIST_SETLINK,
                                    Constants.DB_TABLE_JOBLIST_CN,
                                    Constants.DB_TABLE_JOBLIST_BFN,
                                    Constants.DB_TABLE_JOBLIST_BN,
                                    Constants.DB_TABLE_JOBLIST_CITYNAME,
                                    Constants.DB_TABLE_JOBLIST_ADDRESS,
                                    Constants.DB_TABLE_JOBLIST_BP,
                                    Constants.DB_TABLE_JOBLIST_OH,
                                    Constants.DB_TABLE_JOBLIST_TS,
                                    Constants.DB_TABLE_JOBLIST_TE,
                                    Constants.DB_TABLE_JOBLIST_SETID,
                                    Constants.DB_TABLE_JOBLIST_BL,
                                    Constants.DB_TABLE_JOBLIST_BLNG,
                                    Constants.DB_TABLE_JOBLIST_FN,
                                    Constants.DB_TABLE_JOBLIST_JC,
                                    Constants.DB_TABLE_JOBLIST_JI,
                                    Constants.DB_TABLE_JOBLIST_BLINK,
                                    Constants.DB_TABLE_JOBLIST_MID,
                                    Constants.DB_TABLE_CHECKER_CODE,
                                    Constants.DB_TABLE_CHECKER_LINK,
                                    Constants.DB_TABLE_BRANCH_CODE,
                                    Constants.DB_TABLE_SETCODE,
                                    Constants.DB_TABLE_PURCHASE_DESCRIPTION,
                                    Constants.DB_TABLE_PURCHASE,
                                    Constants.DB_TABLE_JOBLIST_BRIEFING,
                                    Constants.DB_TABLE_JOBLIST_sPurchaseLimit,
                                    Constants.DB_TABLE_JOBLIST_sNonRefundableServicePayment,
                                    Constants.DB_TABLE_JOBLIST_sTransportationPayment,
                                    Constants.DB_TABLE_JOBLIST_sCriticismPayment,
                                    Constants.DB_TABLE_JOBLIST_sBonusPayment,
                                    Constants.DB_TABLE_JOBLIST_AllowShopperToReject,
                                    Constants.DB_TABLE_JOBLIST_sdeletedjob,
                                    Constants.DB_TABLE_JOBLIST_sProjectID,},
                            Constants.DB_TABLE_JOBLIST_JI);

            ArrayList<BranchProperties> branchProps = DBHelper.getBranchPropds(
                    Constants.DB_TABLE_BRANCH_PROPS, new String[]{
                            Constants.DB_TABLE_BRANCH_PROPS_ValueID,
                            Constants.DB_TABLE_BRANCH_PROPS_PropID,
                            Constants.DB_TABLE_BRANCH_PROPS_PropertyName,
                            Constants.DB_TABLE_BRANCH_PROPS_Content,
                            Constants.DB_TABLE_BRANCH_PROPS_BranchID,},
                    Constants.DB_TABLE_BRANCH_PROPS_PropID);

            Orders.setListOrders(jobordersss);
            Orders.setBranchProps(branchProps);

        }
        if (LoginActivity.thisOrder != null && LoginActivity.thisSet != null
                && LoginActivity.thisSavedAnswer != null) {
            order = LoginActivity.thisOrder;
        } else {
            for (int ordercount = 0; ordercount < Orders.getOrders().size(); ordercount++) {
                order = Orders.getOrders().get(ordercount);
                if (order.getOrderID().equals(orderID))
                    break;
            }
        }
        isCompleted = false;
        if (order == null) {
            set = null;
            return;
        }
        if (order != null) {
            customFields = DBHelper.getCustomFields(order.getOrderID());
        }
        if (order.getStatusName().equals("Completed")) {
            isCompleted = true;
        }
        if (ArchiveActivity.selectedOrderId != null && order != null && order.getOrderID() != null && ArchiveActivity.selectedOrderId.equals(order.getOrderID())) {
            order.setAsArchive(true);
            ArchiveActivity.selectedOrderId = null;
        }
        if (order.getStatusName() != null && order.getStatusName().toLowerCase().contains("archive")) {
            order.setAsArchive(true);
        }
        if (getIntent() != null
                && getIntent().getExtras() != null
                && getIntent().hasExtra(Constants.POST_FIELD_IS_ARCHIVE)) {
            order.setAsArchive(true);
        }


        order.setStatusName("Scheduled");

    }

    private void InitialiseViews() {
        previousBtn = (TextView) findViewById(R.id.prevbtn);
        // setFontSize(previousBtn);
        nextBtn = (TextView) findViewById(R.id.nextbtn);
        // setFontSize(nextBtn);
        previousImg = (ImageView) findViewById(R.id.previmg);
        // setFontSize(previousBtn);
        nextImg = (ImageView) findViewById(R.id.nextimg);

        previousBtn.setOnClickListener(goToNextPrevPage);
        nextBtn.setOnClickListener(goToNextPrevPage);
        nextImg.setOnClickListener(goToNextPrevPage);
        previousImg.setOnClickListener(goToNextPrevPage);
        previousImg.setVisibility(View.INVISIBLE);
        previousBtn.setVisibility(View.INVISIBLE);

        String txt = getResources().getString(R.string.questionnaire_next_btn);

        String txt1 = getResources().getString(R.string.questionnaire_prev_btn);
        if (modeSelect == 3) {
            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(
            // R.drawable.arrow_left, 0, 0, 0);
            nextBtn.setText(txt);

            // previousBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
            // R.drawable.arrow_right, 0);
            previousBtn.setText(txt1);

        } else {

            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
            // R.drawable.arrow_right, 0);
            nextBtn.setText(txt);

            // previousBtn.setCompoundDrawablesWithIntrinsicBounds(
            // R.drawable.arrow_left, 0, 0, 0);
            previousBtn.setText(txt1);
        }
    }

    Boolean isServerAnswersActAsSubmit = false;
    private ArrayList<CurrentLoopData> allLoops;

    private void setOrderID() {
        Bundle b = getIntent().getExtras();
        if (b == null)
            return;
        orderID = b.getString(Constants.POST_FIELD_QUES_ORDER_ID);
        if (orderID.contains("-"))
            surveyId = orderID.replace("-", "");
        try {
            if (surveyId != null) {

                Helper.seed = Integer.parseInt(surveyId.substring(surveyId
                        .indexOf("_") + 1));
            } else {
                Helper.seed = Integer.parseInt(orderID);
            }
        } catch (Exception ex) {
            Helper.seed = -1;
        }
        String setid = b.getString(Constants.FIELD_ORDER_SET_ID);
        setIdForPreview = setid;

        set = getSetsRecords(setid);
        setOrder();
        if (order != null) selectedBranchID = order.getBranchLink();
        if (set != null && set.getObjectCountAtTimeOfDownloading() == 0
                && set.getObjectCountAtTimeOfSaving() == 0) {

        } else if (order != null && order.getOrderID().contains("CC")) {
        } else if (set == null
                || order == null
                || set.getListObjects() == null
                || set.getListObjects().size() == 0
                || (set.getListObjects().size() < set
                .getObjectCountAtTimeOfDownloading() && set
                .getListObjects().size() < set
                .getObjectCountAtTimeOfSaving())
            // || set.getListObjects().size() < set
            // .getObjectCountAtTimeOfSaving()
        ) {
            set = null;
            return;
        }
        if (set != null && set.getListObjects() != null) {
            Objects lastObject = getLastSavedObjects(set.getListObjects());
            if (lastObject == null || (lastObject.getObjectDisplayCondition() != null
                    && lastObject.getObjectDisplayCondition().length() > 0)) {
                lastDataId = null;
            } else {
                lastDataId = lastObject.getDataID();
            }
//Toast.makeText(QuestionnaireActivity.this,"LASTdata is="+lastDataId,Toast.LENGTH_LONG).show();
            set.currentSurveys = new ArrayList<Survey>();
            set.currentSurveys.add(Surveys.getCurrentSurve(surveyId));

            if (set.getAnswersActAsSubmit() != null
                    && set.getAnswersActAsSubmit().contains("1")) {
                isServerAnswersActAsSubmit = true;
            }
            listObjects = set.getStructuredListObjects(true);
            listObjects = setQuestionNumbers(listObjects, QuestionnaireActivity.this);

            specialListObjects = new ArrayList<Objects>();
            for (int i = 0; i < listObjects.size(); i++) {
                if (listObjects.get(i).getDataID().contains("_")) {
                    specialListObjects.add(listObjects.get(i));
                }
            }
            for (int j = 0; j < specialListObjects.size(); j++) {
                listObjects.remove(specialListObjects.get(j));
            }
            listBranches = set.getListBranches();

            listWorkers = set.getListWorkers();
            companyLink = set.getCompanyLink();
            if (pos_shelf_item == null)
                pos_shelf_item = new POS_Shelf(orderID,
                        QuestionnaireActivity.this);
            pos_shelf_item.listProducts = set.getListProducts();
            pos_shelf_item.listProductLocations = set.getListProductLocations();
            pos_shelf_item.listProductProperties = set
                    .getListProductProperties();
        } else if (Sets.getSets().size() > 0) {
            setObjectList(setid);
        } else {

            return;
        }
    }

    private Objects getLastSavedObjects(ArrayList<Objects> listObjects) {
        String did = getOrderLastDataId(orderID);
        for (int i = 0; (listObjects != null && did != null) && i < listObjects.size(); i++) {
            if (listObjects.get(i) != null && listObjects.get(i).getDataID() != null &&
                    listObjects.get(i).getDataID().equals(did))
                return listObjects.get(i);
        }
        return null;
    }

    public static ArrayList<Objects> setQuestionNumbers(
            ArrayList<Objects> listObjects2, QuestionnaireActivity thisContext) {
        boolean isPageBreakOkay = false;

        ArrayList<CurrentLoopData> currentLoopList = new ArrayList<CurrentLoopData>();
        int count = 0;
        for (int i = 0; i < listObjects2.size(); i++) {

            if (listObjects2.get(i) != null
                    && listObjects2.get(i).getObjectType() != null
                    && Helper.comapreString(
                    listObjects2.get(i).getObjectType(), "31")) {
                if (currentLoopList != null && currentLoopList.size() > 0) {
                    // currentLoopList.get(0).setInnerObjects(listObjects2.get(i));
                    currentLoopList.get(0).setLoopEndDataID(
                            listObjects2.get(i).getDataID());
                    listObjects2.get(i).setLoopObject(currentLoopList.get(0));
                    currentLoopList.remove(0);
                }
                listObjects2.remove(i);
                i--;

                continue;
            }

            if (listObjects2.get(i) != null
                    && listObjects2.get(i).getObjectType() != null
                    && Helper.comapreString(
                    listObjects2.get(i).getObjectType(), "30")) {
                CurrentLoopData currentLoopDataObj = new CurrentLoopData();
                currentLoopDataObj.setLoopStartDataID(listObjects2.get(i)
                        .getDataID());
                currentLoopDataObj.setCurrentLoopObject(listObjects2.get(i));
                currentLoopDataObj.setCurrentLoopName(listObjects2.get(i)
                        .getLoopName());
                currentLoopDataObj.setCurrentLoopSource(listObjects2.get(i)
                        .getLoopSource());
                if (thisContext != null)
                    thisContext.addThisObject(currentLoopDataObj);
                listObjects2.get(i).setLoopObject(currentLoopDataObj);
                currentLoopList.add(0, currentLoopDataObj);
                if (currentLoopList.size() == 1)
                    continue;
                else {
                    currentLoopList.get(1).setInnerObjects(listObjects2.get(i));
                    listObjects2.remove(i);
                    i--;
                    continue;
                }
            }

            if (currentLoopList != null && currentLoopList.size() > 0) {
                currentLoopList.get(0).setInnerObjects(listObjects2.get(i));
                listObjects2.remove(i);
                i--;
                continue;
            }

            if (listObjects2.get(i).getQuestionGroups() != null
                    || listObjects2.get(i).getDataID().contains("_"))
                continue;
            if (listObjects2.get(i).getListAutoValues() != null)
                continue;
            if (listObjects2.get(i).getQuestion() != null
                    || listObjects2.get(i).getGroupName() != null) {
                count++;
                listObjects2.get(i).currentIndex = count;
            }
            if (listObjects2.get(i) != null
                    && listObjects2.get(i).getObjectType() != null
                    && Helper.comapreString(
                    listObjects2.get(i).getObjectType(), "1")) {
                listObjects2.get(i).ispagebreakokay = isPageBreakOkay;
                if (i == listObjects2.size() - 1) {
                    Objects emptyTextObj = new Objects();
                    emptyTextObj.setUseInTOC("0");
                    emptyTextObj.setDataID(listObjects2.get(i).getDataID()
                            + "444");
                    emptyTextObj.setObjectType("2");
                    emptyTextObj.setText(" ");
                    emptyTextObj.setTextID("123");
                    emptyTextObj.viewOnPage = -1;
                    listObjects2.add(emptyTextObj);
                }
            }

            if (listObjects2.get(i) != null
                    && listObjects2.get(i).getObjectType() != null
                    && (Helper.comapreString(listObjects2.get(i)
                    .getObjectType(), "2") || Helper.comapreString(
                    listObjects2.get(i).getObjectType(), "3"))) {
                isPageBreakOkay = true;
            } else
                isPageBreakOkay = false;

        }
        if (thisContext != null)
            listObjects2 = thisContext.setNewLoopObjects(listObjects2);
        return listObjects2;
    }

    private void addThisObject(CurrentLoopData currentLoopDataObj) {
        if (allLoops == null)
            allLoops = new ArrayList<CurrentLoopData>();

        for (int i = 0; i < allLoops.size(); i++) {
            if (currentLoopDataObj.getCurrentLoopName() != null
                    && allLoops.get(i).getCurrentLoopName() != null
                    && allLoops.get(i).getCurrentLoopName()
                    .equals(currentLoopDataObj.getCurrentLoopName())) {
                return;
            }
        }
        allLoops.add(currentLoopDataObj);

    }

    private CurrentLoopData getThisLoopObject(String loopName) {
        if (allLoops == null)
            return null;

        for (int i = 0; i < allLoops.size(); i++) {
            if (loopName != null
                    && allLoops.get(i).getCurrentLoopName() != null
                    && allLoops.get(i).getCurrentLoopName().equals(loopName)) {
                return allLoops.get(i);
            }
        }
        return null;
    }

    private ArrayList<Objects> setNewLoopObjects(ArrayList<Objects> listObjects2) {
        // Toast.makeText(QuestionnaireActivity.this, "starting reading loops",
        // Toast.LENGTH_SHORT).show();
        ArrayList<LoopsEntry> ansList = null;
        ArrayList<Objects> loopObjects = new ArrayList<Objects>();
        try {
            for (int i = 0; i < listObjects2.size(); i++) {
                if (listObjects2.get(i) != null
                        && listObjects2.get(i).getObjectType() != null
                        && Helper.comapreString(listObjects2.get(i)
                        .getObjectType(), "30")) {
                    if (set.loopData == null) {
                        QuestionnaireActivity.this
                                .runOnUiThread(new Runnable() {
                                    public void run() {
                                        customToast(
                                                getResources()
                                                        .getString(
                                                                R.string.unable_to_find_loop_data),
                                                true, 100);
                                    }
                                });
                        listObjects2.remove(i);
                        i--;
                        continue;
                    }
                    CurrentLoopData tmpLoopObject = listObjects2.get(i)
                            .getLoopObject();
                    if (tmpLoopObject.getCurrentLoopObject().getDataID()
                            .equals("184342")) {
                        int y = 0;
                        y++;
                    }
                    ansList = getLoopDisplayConditionFull(
                            tmpLoopObject.get901Condition(), tmpLoopObject
                                    .getCurrentLoopObject().getLoopSource(),
                            tmpLoopObject.getWithout901Condition(),
                            listObjects2.get(i).getDataID());

                    loopObjects = new ArrayList<Objects>();

                    for (int j = 0; j < ansList.size(); j++) {

                        for (int k = 0; k < listObjects2.get(i).getLoopObject()
                                .getInnerObjects().size(); k++) {

                            Objects newObj = new Objects();
                            String displaycon = listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectDisplayCondition();

                            String dataid = listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getDataID();
                            if (listObjects2.get(i).getDataID().contains("^")) {
                                dataid = dataid
                                        + listObjects2
                                        .get(i)
                                        .getDataID()
                                        .substring(
                                                listObjects2.get(i)
                                                        .getDataID()
                                                        .indexOf("^"));

                            }

                            String objectCode = listObjects2.get(i)
                                    .getLoopObject()
                                    .get901ConditionsQuestionObjectCode();
                            String columnName = listObjects2.get(i)
                                    .getLoopObject()
                                    .get901ConditionsColumnName();
                            if (objectCode != null && columnName != null) {
                                objectCode = objectCode.trim();
                                columnName = columnName.trim();

                                if (listObjects2.get(i).getLoopObject() != null) {
                                    String columnData = listObjects2
                                            .get(i)
                                            .getLoopObject()
                                            .get901ConditionsColumnData(
                                                    null,
                                                    listObjects2.get(i)
                                                            .getDataID());
                                    if (ansList.get(j).getColumnData() != null) {
                                        if (displaycon == null
                                                || displaycon.length() == 0)
                                            displaycon = "$[16,"
                                                    + objectCode
                                                    + columnData
                                                    + "]$in_array'"
                                                    + ansList.get(j)
                                                    .getColumnData()
                                                    + "'";
                                        else
                                            displaycon = displaycon
                                                    + getResources().getString(
                                                    R.string.amp_16)
                                                    + objectCode
                                                    + columnData
                                                    + "]$in_array'"
                                                    + ansList.get(j)
                                                    .getColumnData()
                                                    + "'";
                                    }
                                }
                            }

                            newObj.setDataID(dataid + "%" + (j + i) + "$"
                                    + ansList.get(j).getRowNumber() + "^"
                                    + ansList.get(j).getColumnName() + "="
                                    + ansList.get(j).getColumnData());

                            // newObj.setDataID(dataid + "^"
                            // + ansList.get(j).getColumnName() + "="
                            // + ansList.get(j).getColumnData());
                            if (newObj.getDataID().contains("8")) {
                                int ijk = 0;
                                ijk++;
                            }

                            String loopinfo = listObjects2.get(i).getLoopInfo();
                            if (loopinfo == null)

                                newObj.setLoopInfo(listObjects2.get(i)
                                        .getLoopObject().getCurrentLoopName()
                                        + "=" + ansList.get(j).getListID());
                            else
                                newObj.setLoopInfo(loopinfo
                                        + "^"
                                        + listObjects2.get(i).getLoopObject()
                                        .getCurrentLoopName() + "="
                                        + ansList.get(j).getListID());

                            newObj.setLoopRow(ansList.get(j).getRowNumber());
                            newObj.setLoopList(ansList.get(j).getListName());

                            newObj.setObjectDisplayCondition(displaycon);

                            newObj.setMi(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).isMi());
                            newObj.setMiNumberMax(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiNumberMax());
                            newObj.setMiNumberMin(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiNumberMin());
                            newObj.setMi(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).isMi());
                            newObj.setListAnswers(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getListAnswers());
                            newObj.setAlign(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getAlign());
                            newObj.setAltQuestion(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAltQuestion());
                            newObj.setAnswerOrdering(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAnswerOrdering());
                            newObj.setAnswersCondition(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAnswersCondition());
                            newObj.setAnswersFormat(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAnswersFormat());
                            newObj.setAnswersSource(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAnswersSource());
                            newObj.setAttachment(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAttachment());
                            newObj.setAttachmentTypeLink(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getAttachmentTypeLink());
                            newObj.setBold(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getBold());
                            newObj.setBranchInputCaption(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getBranchInputCaption());
                            newObj.setBranchInputMandatory(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getBranchInputMandatory());
                            newObj.setColor(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getColor());
                            newObj.setCustomScaleLink(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getCustomScaleLink());
                            newObj.setDestinationDescription(listObjects2
                                    .get(i).getLoopObject().getInnerObjects()
                                    .get(k).getDestinationDescription());
                            newObj.setDestinationObject(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getDestinationObject());
                            newObj.setDisplayOrientation(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getDisplayOrientation());
                            newObj.setDisplayType(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getDisplayType());
                            newObj.setDoNotDisplayInReport(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getDoNotDisplayInReport());
                            newObj.setDynamicTitlesDefaultAmount(listObjects2
                                    .get(i).getLoopObject().getInnerObjects()
                                    .get(k).getDynamicTitlesDefaultAmount());
                            newObj.setExcludeFromGrade(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getExcludeFromGrade());
                            newObj.setFont(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getFont());
                            newObj.setGroupName(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getGroupName());
                            newObj.setIndex(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getIndex());
                            newObj.setIsSeperateQuestion(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getIsSeperateQuestion());
                            newObj.setItalics(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getItalics());
                            newObj.setListAnswers(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getListAnswers());
                            newObj.setListAutoValues(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getListAutoValues());
                            newObj.setListSubchapterLinks(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getListSubchapterLinks());
                            newObj.setLoopCondition(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopCondition());
                            newObj.setLoopFormat(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopFormat());
                            newObj.setLoopName(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopName());
                            newObj.setLoopObject(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopObject());
                            newObj.setLoopSource(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopSource());
                            newObj.setMandatory(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMandatory());
                            newObj.setMaxAnswersForMultiple(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMaxAnswersForMultiple());

                            newObj.setMiDefaultDate(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiDefaultDate());
                            newObj.setMiDescription(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiDescription());
                            newObj.setMiFreeTextCols(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiFreeTextCols());
                            newObj.setMiFreeTextMaxlength(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiFreeTextMaxlength());
                            newObj.setMiFreeTextMinlength(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiFreeTextMinlength());
                            newObj.setMiText(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiText());
                            newObj.setMiType(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getMiType());
                            newObj.setNonSepQuestionOriginalChapterLink(listObjects2
                                    .get(i).getLoopObject().getInnerObjects()
                                    .get(k)
                                    .getNonSepQuestionOriginalChapterLink());
                            newObj.setObjectCode(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectCode());
                            newObj.setObjectContents(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectContents());

                            newObj.setObjectID(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectID());
                            newObj.setObjectLink(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectLink());
                            newObj.setObjectOrder(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectOrder());
                            newObj.setObjectType(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getObjectType());
                            newObj.setOriginalFilename(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getOriginalFilename());
                            newObj.setPicID(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getPicID());
                            newObj.setPicturedata(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getPictureData());
                            newObj.setPictureFilename(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getPictureFilename());
                            newObj.setPipingSourceDataLink(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getPipingSourceDataLink());
                            newObj.setPropertyLinkToInventory(listObjects2
                                    .get(i).getLoopObject().getInnerObjects()
                                    .get(k).getPropertyLinkToInventory());
                            newObj.setQuestion(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestion());
                            newObj.setQuestionDescription(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionDescription());
                            newObj.setQuestionGroups(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionGroups());
                            newObj.setQuestionID(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionID());
                            newObj.setQuestionLinks(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionLinks());
                            newObj.setQuestionsOrientation(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionOrientation());
                            newObj.setQuestionTitles(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionTitles());
                            newObj.setQuestionTypeLink(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getQuestionTypeLink());
                            newObj.setRandomizeLoop(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getRandomizeLoop());
                            newObj.setRandomQuestionsOrder(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getRandomQuestionOrder());
                            newObj.setRandomTitlesOrder(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getRandomTitlesOrder());
                            newObj.setScaleName(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getScaleName());
                            newObj.setShowCritical(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getShowCritical());
                            newObj.setShowIrrelevant(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getShowIrrelevant());
                            newObj.setSize(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getSize());
                            newObj.setText(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getText());
                            newObj.setTextID(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getTextID());
                            newObj.setTextType(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getTextType());
                            newObj.setUnderline(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getUnderline());
                            newObj.setUrlContent(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getUrlContent());
                            newObj.setUrlID(listObjects2.get(i).getLoopObject()
                                    .getInnerObjects().get(k).getUrlID());
                            newObj.setUseInTOC(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getUseInTOC());
                            newObj.setWorkerInputCaption(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getWorkerInputCaption());
                            newObj.setWorkerInputMandatory(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getWorkerInputMandatory());

                            newObj.setLoopObject(listObjects2.get(i)
                                    .getLoopObject().getInnerObjects().get(k)
                                    .getLoopObject());

                            String data = getLoopFormatName(listObjects2.get(i)
                                    .getLoopObject().getCurrentLoopObject()
                                    .getLoopFormat(), newObj);

                            if (data != null) {
                                newObj.setLoopInfo(newObj.getLoopInfo() + "="
                                        + data);

                            }
                            if (newObj.getDataID().contains("133928")) {
                                int o = 0;
                                o++;
                            }
                            loopObjects.add(newObj);
                        }
                    }

                    for (int j = 0; j < loopObjects.size(); j++) {
                        listObjects2.add(i + j + 1, loopObjects.get(j));
                    }

                    // for (int kk = 0; kk <= i; kk++) {
                    // if (listObjects2.get(kk) != null
                    // && listObjects2.get(kk).getObjectType() != null
                    // && Helper.comapreString(listObjects2.get(kk)
                    // .getObjectType(), "30")) {
                    // listObjects2.remove(kk);
                    // kk--;
                    // }
                    // }
                    listObjects2.remove(i);// remove the "30" question
                    continue;
                }

                if (listObjects2.get(i) != null
                        && listObjects2.get(i).getObjectType() != null
                        && Helper.comapreString(listObjects2.get(i)
                        .getObjectType(), "31")) {
                    continue;
                }
            }
        } catch (Exception ex) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(
                            QuestionnaireActivity.this,
                            getResources().getString(
                                    R.string.alert_issue_in_loop),
                            Toast.LENGTH_LONG).show();
                }
            });

        }
        return listObjects2;
    }

    private String getLoopFormatName(String text, Objects questionObject) {
        String result = null;

        while (text.contains("$[")) {
            if (text != null && !text.equals("")) {
                int start = text.indexOf("$[");
                int end = text.indexOf("]$");

                if (start == -1 || end == -1)
                    return null;
                String str = text.substring(start + 2, end);
                String strFull = text.substring(start, end + 2);
                // 12,s2,1
                String[] strarr = str.split(",");
                LoopsEntry loopEntry = set.get901SingleData(
                        questionObject.getDataID(),
                        questionObject.getLoopList(), strarr[2],
                        questionObject.getLoopRow());
                if (loopEntry == null) {
                    int hg = 0;
                    hg++;
                }
                result = loopEntry.getColumnData();
                text = text.replace(strFull, result);
            }
        }
        return text;
    }

    private void setObjectList(String setID) {
        for (int i = 0; i < Sets.getSets().size(); i++) {
            set = Sets.getSets().get(i);

            if (set.getSetID().equals(setID)) {
                listObjects = set.getListObjects();
                // if(listObjects.size()-1 >= 0)
                // listObjects.remove(listObjects.size()-1);
                listBranches = set.getListBranches();
                listWorkers = set.getListWorkers();
                pos_shelf_item.listProducts = set.getListProducts();
                pos_shelf_item.listProductLocations = set
                        .getListProductLocations();
                pos_shelf_item.listProductProperties = set
                        .getListProductProperties();

                companyLink = set.getCompanyLink();
                break;
            }
        }
    }

    private String[] getJimptoItems() {
        listJumpto = new ArrayList<Objects>();
        for (int i = 0; i < listObjects.size(); i++) {
            Objects object = listObjects.get(i);
            if (object.getDataID().contains("13318")) {
                int k = 0;
                k++;
            }
            if (!object.getUseInTOC().equals("0")) {
                object.setIndex(i);
                if (object.getText() != null)
                    listJumpto.add(object);
                else if (object.getQuestion() != null)
                    listJumpto.add(object);
                else if (object.getGroupName() != null)
                    listJumpto.add(object);
            }
        }
        String[] items = new String[listJumpto.size() + 1];
        items[0] = Constants.QUESTIONNAIRE_JUMPTO_NEXT_PAGE;
        for (int index = 0; index < listJumpto.size(); index++) {
            Objects object = listJumpto.get(index);
            if (object.getText() != null)
                items[index + 1] = object.getText();
            else if (object.getQuestion() != null)
                items[index + 1] = object.getQuestion();
            else if (object.getGroupName() != null)
                items[index + 1] = object.getGroupName();

            items[index + 1] = Helper.makeHtmlString(items[index + 1])
                    .toString();
        }
        return items;
    }

    public String getDeviceName() {
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        if (model.startsWith(manufacturer)) {
            return capitalize(model);
        } else {
            return capitalize(manufacturer) + " " + model;
        }
    }

    private String capitalize(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        char first = s.charAt(0);
        if (Character.isUpperCase(first)) {
            return s;
        } else {
            return Character.toUpperCase(first) + s.substring(1);
        }
    }


    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
        menu.clear();
        menu = openMenu(menu);
        return true;
    }


    public Menu openMenu(Menu menu) {
        if (menu == null) {
            PopupMenu p = new PopupMenu(QuestionnaireActivity.this, null);

            menu = p.getMenu();
        }
        menu.clear();

        if (order != null && order.getAsArchive()) {
            menu.add(0, Constants.MENUID_BACK_TO_ARCHIVE, 0,
                    getString(R.string.questionnaire_exitmenu));
        } else if (photomenu) {

            DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    switch (which) {
                        case DialogInterface.BUTTON_POSITIVE:
                            // Yes button clicked
                            break;

                        case DialogInterface.BUTTON_NEGATIVE:
                            // No button clicked
                            break;
                    }
                }
            };
            if (isLastAttachment) {
                menu.add(0, Constants.MENUID_SIGN, 0,
                        getString(R.string.questionnaire_sign));

                menu.add(0, Constants.MENUID_IMAGE_GALLERY_OPTION_LAST, 0,
                        getString(R.string.gallery_menu_text));

                menu.add(0, Constants.MENUID_CAMERA_OPTION_LAST, 0,
                        getString(R.string.camera_menu_text));

                menu.add(0, Constants.MENUID_VIDEO_OPTION_LAST, 0,
                        getString(R.string.video_menu_text));

                if (attach_btn_view != null
                        && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                    // ShowAttachedFiles();
                } else
                    menu.add(0, Constants.MENUID_AUDIO_OPTION_LAST, 0,
                            getString(R.string.voice_menu_text));
            } else {
                menu.add(0, Constants.MENUID_SIGN, 0,
                        getString(R.string.questionnaire_sign));

                menu.add(0, Constants.MENUID_IMAGE_GALLERY_OPTION, 0,
                        getString(R.string.gallery_menu_text));

                menu.add(0, Constants.MENUID_CAMERA_OPTION, 0,
                        getString(R.string.camera_menu_text));

                menu.add(0, Constants.MENUID_VIDEO_OPTION, 0,
                        getString(R.string.video_menu_text));

                menu.add(0, Constants.MENUID_AUDIO_OPTION, 0,
                        getString(R.string.voice_menu_text));
            }
            photomenu = false;
        } else {

            if (Constants.isQAAllowed)
                menu.add(0, Constants.MENUID_BUG, 0,
                        getString(R.string.questionnaire_send_bug));

            if (enableValidationQuestion) {
                menu.add(0, Constants.MENUID_DONE, 0,
                        getString(R.string.questionnaire_done_btn_text));
            } else if (show_attachedfilescreen) {
                menu.add(0, Constants.MENUID_ATTACHED_FILE, 0,
                        getString(R.string.questionnaire_done_btn_text));
            } else {
                if (set != null && (set.getShowSaveAndExitButton().equals("1")
                        || set.getShowSaveAndExitButton().equals("2")))
                    menu.add(0, Constants.MENUID_EXIT_AND_SAVE, 0,
                            getString(R.string.questionnaire_exitandsave_menu));
                if (set != null && (set.getShowPreviewButton().equals("1")
                        || set.getShowPreviewButton().equals("2")))
                    menu.add(0, Constants.MENUID_PREVIEW, 0,
                            getString(R.string.questionnaire_preview_menu));
                if (showSubmitMenu && !orderID.contains("-"))
                    menu.add(
                            0,
                            Constants.MENUID_SUBMIT_SURVEY,
                            0,
                            getString(R.string.questionnaire_finishandsend_menu));
                if (showSubmitMenu && orderID.contains("-"))
                    menu.add(0, Constants.MENUID_SUBMIT, 0,
                            getString(R.string.questionnaire_finish));
                menu.add(0, Constants.MENUID_EXIT_AND_DELETE, 0,
                        getString(R.string.exit_and_delete_btn_text));
                if (Constants.isQAAllowed)
                    menu.add(0, Constants.MENUID_CONDITION, 0,
                            getString(R.string.menu_condition));
            }

        }
//		menu.add(0,Constants.MENUID_PREVIEW, 0,
//				getString(R.string.menu_preview));
        return menu;
    }

    public void attachFileContinue() {
        List<filePathDataID> listOfFiles = ((selectedFilesAdapter) adapter)
                .getFiles();
        uploadList.clear();
        uploadFileList = ((selectedFilesAdapter) adapter).getURIs();
        // uploadFileListDataId.add( questionObject.getDataID());
        // uploadFileList.clear();
        for (int i = 0; i < listOfFiles.size(); i++) {
            uploadList.add(listOfFiles.get(i));
            // uploadFileList.add(Uri.parse(listOfFiles.get(i)));
        }
        if (attach_btn_view != null
                && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE)
            saveUploadFilestoDB("submit");

        if (!orderID.contains("-")) {
            MENUID_SUBMIT_SURVEY();
        } else {
            MENUID_SUBMIT();
        }
    }

    public void makeBriefingDialog(Context context, String content) {

        final Dialog err_dialog = new Dialog(context);
        err_dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        err_dialog.setContentView(R.layout.dialog_briefing);
        TextView txt = err_dialog.findViewById(R.id.textView1);
        txt.setText(getResources().getString(R.string.questionnaire_preview_menu));
        if (content != null && !content.equals("")) {
            content = content.replace("&lt;", "<");
            content = content.replace("&gt;", ">");
            content = content.replace("&quot;", "\"");
            WebView wv = (WebView) err_dialog.findViewById(R.id.briefingView);

            wv.getSettings().setAllowFileAccess(true);
            wv.getSettings().setJavaScriptEnabled(true);
            wv.getSettings().setBuiltInZoomControls(true);
            final String mimeType = "text/html";
            final String encoding = "UTF-8";
            wv.loadDataWithBaseURL("", content, mimeType, encoding, "");
        }
        Button btnClose = (Button) err_dialog.findViewById(R.id.btnClose);
        btnClose.setText(getResources().getString(R.string.close));
        btnClose.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                err_dialog.dismiss();
            }
        });
        err_dialog.show();
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        super.onOptionsItemSelected(item);
        return OptionsItemSelected(item);
    }

    public boolean OptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case Constants.MENUID_BACK_TO_ARCHIVE:
                order.setStatusName("archived");
                finish();
                return true;
            case Constants.MENUID_EXIT_AND_SAVE: {
                checkAndSavePurchaseInfo();
                String did = null;
                if (questionObject != null) did = questionObject.getDataID();
                if (did != null)
                    DBHelper.updateOrderLastid(orderID, did);
                String finishTimeText = "";
                if (finishTime != null) finishTimeText = finishTime.getText().toString();
                getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, QuestionnaireActivity.this);
                if (recorder.recording) {
                    recorder.stopRecording();
                }
            }
            // in progress set
            try {
                if (!DBHelper.isSetExist(set.getSetID(), orderID))
                    DBHelper.duplicateSet(set.getSetID(), orderID);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            On_SaveandexitButton_Click();
            return true;

            case Constants.MENUID_PREVIEW:
                String finishTimeText = "";
                if (finishTime != null) finishTimeText = finishTime.getText().toString();
                String html = getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, this);

                String content = "<HTML><BODY>" + html
                        + "</HTML></BODY>";
                if (content != null && !content.equals("")) {
                    content = content.replace("&lt;", "<");
                    content = content.replace("&gt;", ">");
                    content = content.replace("&quot;", "\"");
                    makeBriefingDialog(QuestionnaireActivity.this, content);

                }
                return true;
            case Constants.MENUID_SUBMIT_SURVEY:
                String did = null;
                if (questionObject != null) did = questionObject.getDataID();
                if (did != null)
                    DBHelper.updateOrderLastid(orderID, did);
                finishTimeText = "";
                if (finishTime != null) finishTimeText = finishTime.getText().toString();
                getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, this);

                try {
                    if (!DBHelper.isSetExist(set.getSetID(), orderID))
                        DBHelper.duplicateSet(set.getSetID(), orderID);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                if (recorder.recording || (IsAttachedFiles() && set != null)) {
                    if (recorder.recording) {
                        recorder.stopRecording();
                    }
                    ShowAttachedFiles();
                    return true;
                }
                ArrayList<NameValuePair> nameXml = makeLoopXML(questionnaireData);
                return MENUID_SUBMIT_SURVEY();
            case Constants.MENUID_SUBMIT:
                did = null;
                if (questionObject != null) did = questionObject.getDataID();
                if (did != null)
                    DBHelper.updateOrderLastid(orderID, did);
                finishTimeText = "";
                if (finishTime != null) finishTimeText = finishTime.getText().toString();
                getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, this);

                if (recorder.recording || (IsAttachedFiles() && set != null)) {
                    if (recorder.recording) {
                        recorder.stopRecording();
                    }
                    ShowAttachedFiles();
                    return true;
                }
                nameXml = makeLoopXML(questionnaireData);
                return MENUID_SUBMIT();
            case Constants.MENUID_DONE:
                did = null;
                if (questionObject != null) did = questionObject.getDataID();
                if (did != null)
                    DBHelper.updateOrderLastid(orderID, did);
                finishTimeText = "";
                if (finishTime != null) finishTimeText = finishTime.getText().toString();
                getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, this);

                if (recorder.recording || (IsAttachedFiles() && set != null)) {
                    if (recorder.recording) {
                        recorder.stopRecording();
                    }
                    ShowAttachedFiles();
                    return true;
                } else {
                    new SubmitSurveyTask().execute();
                }
                return true;
            case Constants.MENUID_SIGN:
                customSignatureDialog(QuestionnaireActivity.this);
                return true;

            case Constants.MENUID_BUG:
                sendThisBug();
                return true;
            case Constants.MENUID_ATTACHED_FILE:
                //
                String ffinishTimeText = "";
                if (finishTime != null) ffinishTimeText = finishTime.getText().toString();
                getHtml(listObjects, questionnaireData, orderID, uploadList, set, ffinishTimeText, this);

                List<filePathDataID> listOfFiles = ((selectedFilesAdapter) adapter)
                        .getFiles();
                uploadList.clear();
                uploadFileList = ((selectedFilesAdapter) adapter).getURIs();
                // uploadFileListDataId.add( questionObject.getDataID());
                // uploadFileList.clear();
                for (int i = 0; i < listOfFiles.size(); i++) {
                    uploadList.add(listOfFiles.get(i));
                    // uploadFileList.add(Uri.parse(listOfFiles.get(i)));
                }

                did = null;
                if (questionObject != null) did = questionObject.getDataID();
                if (did != null)
                    DBHelper.updateOrderLastid(orderID, did);
                if (!orderID.contains("-")) {
                    return MENUID_SUBMIT_SURVEY();
                } else {
                    return MENUID_SUBMIT();
                }
            case Constants.MENUID_CONDITION:
                showConditionDialog();
                return true;
            case Constants.MENUID_EXIT_AND_DELETE:
                showSaveAndDeleteAlert(QuestionnaireActivity.this);
                DBAdapter
                        .LogCommunication("Deleted job ," + orderID, "JobsLog.txt");
                return true;
            case Constants.MENUID_IMAGE_GALLERY_OPTION:
                if (set != null && set.getRestrictGalleryAccess() != null
                        && set.getRestrictGalleryAccess().equals("1")) {
                    Toast.makeText(QuestionnaireActivity.this, "Access to gallery is restricted in this job.", Toast.LENGTH_LONG).show();
                    photomenu = false;
                    return true;
                }
                showFileChooser(false);
                //   onSaveState(3);
                photomenu = false;
                return true;
            case Constants.MENUID_CAMERA_OPTION:
                if (Helper.getOriginalSampleSize() >= 3) {
                    customAskAlert(false);
                } else {
                    // openCamera(CAMERA_PIC_REQUEST, false);
                    // onSaveState(1);
                    // photomenu = false;

                    start_camera(questionObject.getDataID());

                }

                return true;
            case Constants.MENUID_VIDEO_OPTION:

                openVideo(CAMERA_VID_REQUEST, false);
                onSaveState(2);
                photomenu = false;
                return true;
            case Constants.MENUID_AUDIO_OPTION:
                recorder.btnRecordClick(false);
                photomenu = false;
                return true;
            case Constants.MENUID_IMAGE_GALLERY_OPTION_LAST:
                if (set != null && set.getRestrictGalleryAccess() != null
                        && set.getRestrictGalleryAccess().equals("1")) {
                    Toast.makeText(QuestionnaireActivity.this, "Access to gallery is restricted in this job.", Toast.LENGTH_LONG).show();
                    photomenu = false;
                    return true;
                }
                showFileChooser(true);
                onSaveState(3);
                photomenu = false;
                return true;
            case Constants.MENUID_CAMERA_OPTION_LAST:
                if (Helper.getOriginalSampleSize() >= 3) {
                    customAskAlert(true);
                } else {
                    // openCamera(CAMERA_PIC_REQUEST_LAST, true);
                    // onSaveState(1);
                    // photomenu = false;
                    start_camera(null);
                }
                return true;
            case Constants.MENUID_VIDEO_OPTION_LAST:
                openVideo(VIDEO_LAST, true);
                onSaveState(2);
                photomenu = false;
                return true;
            case Constants.MENUID_AUDIO_OPTION_LAST:
                recorder.btnRecordClick(true);
                photomenu = false;
                return true;

            default:

                return true;//super.onOptionsItemSelected(item);
        }
    }

    private SubmitQuestionnaireData checkAndGetPurchaseData() {
        SubmitQuestionnaireData sbmitData = null;
        try {
            Object submitData = DBHelper.convertFromBytesFileTbl("purchase_info_" + orderID + ".txt");
            if (submitData != null) {
                sbmitData = (SubmitQuestionnaireData) submitData;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sbmitData;//change ere
    }

    private void checkAndSavePurchaseInfo() {

//		edit_purchase_details = null;
//		edit_purchase_payment = null;
//		edit_purchase_description = null;
//		edit_service_invoice_number = null;
//		edit_service_payment = null;
//		edit_service_description = null;
//		edit_transportation_payment = null;
//		edit_transportation_description = null;

        SubmitQuestionnaireData submitdata = new SubmitQuestionnaireData();
        boolean needSaving = false;
        if (edit_purchase_description != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_purchase_description(edit_purchase_description.getText().toString());
        }
        if (edit_purchase_payment != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_purchase_payment(edit_purchase_payment.getText().toString());
        }
        if (edit_purchase_details != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_purchase_details(edit_purchase_details.getText().toString());
        }


        if (edit_service_description != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_service_description(edit_service_description.getText().toString());
        }
        if (edit_service_payment != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_service_payment(edit_service_payment.getText().toString());
        }
        if (edit_service_invoice_number != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_service_invoice_number(edit_service_invoice_number.getText().toString());
        }

        if (edit_transportation_description != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_transportation_description(edit_transportation_description.getText().toString());
        }
        if (edit_transportation_payment != null) {
            needSaving = true;
            submitdata.setDB_TABLE_SUBMITSURVEY_transportation_payment(edit_transportation_payment.getText().toString());
        }

        if (replyMsgBox != null) {
            needSaving = true;
            submitdata.setRs(replyMsgBox.getText().toString());
        }
        if (needSaving) {
            try {
                DBHelper.convertToBytesFileTbl(submitdata
                        , "purchase_info_" + orderID + ".txt");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    Context context = QuestionnaireActivity.this;

    private void showConditionDialog() {

        final Dialog err_dialog = new Dialog(context);
        err_dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        err_dialog.setContentView(R.layout.dialog_condition);
        final EditText editCondition = (EditText) err_dialog
                .findViewById(R.id.editCondition);
        if (questionObject != null) {
            editCondition.setText(questionObject.getObjectDisplayCondition());
        }
        Button btnCheck = (Button) err_dialog.findViewById(R.id.btnCheck);
        final TextView txtResult = (TextView) err_dialog
                .findViewById(R.id.txtResult);
        btnCheck.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                boolean isOk = IsObjectdisplaybyCondition(editCondition
                        .getText().toString());
                txtResult.setText("The condition response is: " + isOk);
            }
        });

        Button btnClose = (Button) err_dialog.findViewById(R.id.btnClose);
        btnClose.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                err_dialog.dismiss();
            }
        });
        err_dialog.show();
    }

    private ArrayList<NameValuePair> makeLoopXML(
            ArrayList<QuestionnaireData> questionnaireData2) {

        return null;
    }

    private boolean MENUID_SUBMIT() {
        if (!On_Next_Button_Click("SumitSurvey"))
            return true;
        DBAdapter.LogCommunication("Saved to submit job ," + orderID,
                "JobsLog.txt");
        previousBtn.setClickable(false);

        getEndLocations();
        LongOperation longTask = new LongOperation(true, "submit");
        longTask.execute();
        Intent data = new Intent();
        if (orderID.contains("-")) {
            if (branchEditText != null && branchEditText.getText() != null)
                data.putExtra(Constants.BRANCH_NAME, branchEditText.getText()
                        .toString());
            String did = null;
            if (questionObject != null) did = questionObject.getDataID();
            DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                            Constants.DB_TABLE_ORDERS_ORDERID,
                            Constants.DB_TABLE_ORDERS_STATUS,
                            Constants.DB_TABLE_ORDERS_START_TIME,}, orderID,
                    "Completed", startTime, did);

            if (surveyId != null) {
                if (lastSavedQuotas != null) {
                    Surveys.decreaseQuotas(lastSavedQuotas, false, null);
                    DBHelper.AddSurveys(Surveys.getSets(), false);
                }
                Survey survey = Surveys.getCurrentSurve(surveyId);
                if (survey != null && survey.getThankYouMessage() != null) {
                    Toast.makeText(QuestionnaireActivity.this,
                            survey.getThankYouMessage(), 5000).show();
                }
            }

            data.putExtra("isSurvey", true);
        }
        data.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);


        String did = this.backPointer;
        if (did == null && questionObject != null) did = questionObject.getDataID();
        if (!orderID.contains("-"))
            data.putExtra(Constants.QUESTIONNAIRE_STAUS, 1);
        else {
            if (branchEditText != null && branchEditText.getText() != null)
                data.putExtra(Constants.BRANCH_NAME, branchEditText.getText()
                        .toString());

            DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                            Constants.DB_TABLE_ORDERS_ORDERID,
                            Constants.DB_TABLE_ORDERS_STATUS,
                            Constants.DB_TABLE_ORDERS_START_TIME,}, orderID,
                    "Completed", startTime, did);
            data.putExtra(Constants.QUESTIONNAIRE_STAUS, 142);
        }
        data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME, startTime);

        if (showSubmitMenu == true && previousPageDataId != null)
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
        else
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, did);
        CheckerApp.setQuestionResult(data);
        // finish();
        return true;
    }

    private boolean MENUID_SUBMIT_SURVEY() {
        DBAdapter.LogCommunication("Saved to submit job ," + orderID,
                "JobsLog.txt");
        if (orderID.contains("-")) {
            if (surveyId != null) {
                Survey survey = Surveys.getCurrentSurve(surveyId);
                if (survey != null && survey.getThankYouMessage() != null) {
                    Toast.makeText(QuestionnaireActivity.this,
                            survey.getThankYouMessage(), Toast.LENGTH_LONG)
                            .show();
                }
            }
        }
        // if (!On_Next_Button_Click("SumitSurvey"))
        // return true;
        // previousBtn.setClickable(false);
        //
        // if (set.getEnableValidationQuestion().equals("1")) {
        // ShowValidationQuestion(questionnaireData.get(
        // getRandomNo(0, questionnaireData.size() - 1))
        // .getDataID());
        // } else if (IsAttachedFiles() && set != null) {
        // ShowAttachedFiles();
        // } else {
        // getEndLocations();
        // new SubmitSurveyTask().execute();
        // }
        // return true;
        if (!On_Next_Button_Click("SumitSurvey"))
            return true;
        previousBtn.setClickable(false);

        getEndLocations();
        LongOperation longTask = new LongOperation(true, "submit");
        longTask.execute();
        Intent data = new Intent();
        if (orderID.contains("-")) {

            data.putExtra("isSurvey", true);
        }
        data.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);

        String did = this.backPointer;
        if (!orderID.contains("-")) {
            data.putExtra(Constants.QUESTIONNAIRE_STAUS, 1);

        } else {
            if (branchEditText != null && branchEditText.getText() != null)
                data.putExtra(Constants.BRANCH_NAME, branchEditText.getText()
                        .toString());

            if (did == null && questionObject != null) did = questionObject.getDataID();
            DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                            Constants.DB_TABLE_ORDERS_ORDERID,
                            Constants.DB_TABLE_ORDERS_STATUS,
                            Constants.DB_TABLE_ORDERS_START_TIME,}, orderID,
                    "Completed", startTime, did);
            data.putExtra(Constants.QUESTIONNAIRE_STAUS, 142);
        }
        data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME, startTime);
        if (showSubmitMenu == true && previousPageDataId != null)
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
        else
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, did);
        CheckerApp.setQuestionResult(data);
        // finish();
        return true;
    }

    private void openRecorder(int cAMERA_AUDIO_REQUEST2) {
        Intent intent = new Intent(MediaStore.Audio.Media.RECORD_SOUND_ACTION);
        startActivityForResult(intent, cAMERA_AUDIO_REQUEST2);
    }

    private boolean IsAttachedFiles() {
        if (uploadList.size() > 0)
            return true;
        return false;
    }

    private int getRandomNo(int minimum, int maximum) {
        Random rn = new Random();
        int range = maximum - minimum + 1;
        int no = (rn.nextInt(range) + minimum);
        Log.v("Random Number", "" + no);
        return no;
    }

    private void ShowValidationQuestion(String data) {
        enableValidationQuestion = true;
        for (int objectCount = 0; objectCount < listObjects.size(); objectCount++) {
            questionObject = listObjects.get(objectCount);
            ReleaseMemory();
            if (questionObject.getDataID().equals(data)) {
                try {
                    if (Helper.comapreString(questionObject.getObjectType(),
                            "4")
                            || (!Helper.IsEmptyString(questionObject
                            .getQuestionTypeLink()))) {
                        // isNextObj = true;
                        if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                            questionnaireLayout.addView(getEditorView(viewId),
                                    getLayoutParam(tempId));
                            tempId = viewId;
                        }
                        questionnaireLayout.addView(getQuestionView(viewId),
                                getLayoutParam(tempId));
                        View v = getQuestionDescriptionView();
                        questionnaireLayout.addView(v,
                                getLayoutParam(viewId - 1));
                        if (!questionObject.getQuestionTypeLink().equals("4"))
                            questionnaireLayout.addView(
                                    getAnswersView(false, questionnaireLayout),
                                    getLayoutParam(v.getId()));
                        if (Helper.getInt(questionObject.getShowCritical()) == 1)
                            questionnaireLayout.addView(getShowCriticalView(),
                                    getLayoutParam(viewId - 1));
                        if (!isSplit
                                && Helper.getInt(questionObject.getMiType()) > 0) {
                            TextView tv = getMiView();
                            questionnaireLayout.addView(tv,
                                    getLayoutParam(viewId - 1));
                        }
                        if (!isSplit
                                && Helper.getInt(questionObject.getMiType()) > 0
                                && !(questionObject.getQuestionTypeLink()
                                .equals("4"))) {
                            questionnaireLayout.addView(
                                    getMiView(Helper.getInt(questionObject
                                            .getMiType()), false),
                                    getLayoutParam(viewId - 1));
                            questionObject.setMiText(true);
                            if ((multiSpinner != null || checkboxgrp != null) && questionObject.getListAnswers() != null) {
                                hideBoxIfCheckBox(questionObject.getListAnswers());
                            }
                        } else if (!isSplit
                                && questionObject.getQuestionTypeLink().equals(
                                "4")) {
                            questionnaireLayout.addView(
                                    getEditTextView(
                                            Helper.getInt(questionObject
                                                    .getMiType()), false),
                                    getEditTextLayoutParam(
                                            viewId - 1,
                                            (questionObject.getMiType().equals(
                                                    "2") || questionObject
                                                    .getMiType().equals("5"))));
                        }
                        // questionnaireLayout =
                        // checkForNextBtnVisibility(questionnaireLayout,
                        // false);
                        // break;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                nextImg.setVisibility(View.INVISIBLE);
                nextBtn.setVisibility(View.INVISIBLE);
                previousImg.setVisibility(View.INVISIBLE);
                previousBtn.setVisibility(View.INVISIBLE);
                break;
            }
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        isFinishandsend = false;
        super.onResume();
        // if (Helper.getDBPathLink() == null && !isRestoring) {
        //
        // onRestoreData();
        //
        // SharedPreferences.Editor outState = myPrefs.edit();
        // outState.putBoolean("ispaused", false);
        // outState.commit();
        //
        // return;
        // } else if (isRestoring) {
        // return;
        // }

        SharedPreferences.Editor outState = myPrefs.edit();
        outState.putBoolean("ispaused", false);
        outState.commit();

    }

    boolean photomenu = false;
    Spinner workerDropDown = null;
    ListView workerListView = null;
    int simpleListViewListener = -1;
    int workerListViewListener = -1;
    int productListViewListener = -1;
    int locationListViewListener = -1;

    EditText simpleEditText = null;
    ImageView simpleBranchImage = null;
    ListView simpleListView = null;

    EditText workerEditText = null;
    ImageView workerBranchImage = null;
    ImageView productBranchImage = null;
    ImageView barcodeImg = null;
    ImageView locationBranchImage = null;
    Spinner branchDropDown = null;
    ListView branchListView = null;
    ListView productListView = null;
    ListView locationListView = null;
    EditText txtAddQuantity = null;
    TextView txtCount = null;
    EditText txtAddPrice = null;
    EditText txtCurrent = null;
    EditText txtAddNote = null;
    DateTimePicker txtAddExpiration = null;

    TextView txtExpiry = null;
    TextView txtAverage = null;
    EditText branchEditText = null;
    EditText productEditText = null;
    EditText locationEditText = null;
    boolean spinnerFirstTime = true;
    boolean spinnerProductFirstTime = true;
    boolean spinnerLocationFirstTime = true;

    private boolean isSplit;
    private int vDateTime = Helper.NoTimePicker;

    private RelativeLayout preparePOSProductList(Boolean isPrev,
                                                 RelativeLayout layout_shelf_study) {

        if (productBranchImage == null)
            productBranchImage = (ImageView) layout_shelf_study
                    .findViewById(R.id.img_product_down);
        if (barcodeImg == null)
            barcodeImg = (ImageView) layout_shelf_study
                    .findViewById(R.id.img_barcode);
        if (productEditText == null)
            productEditText = (EditText) layout_shelf_study
                    .findViewById(R.id.edit_product);
        if (productListView == null)
            productListView = (ListView) layout_shelf_study
                    .findViewById(R.id.list_product);

        productListView.setVisibility(View.GONE);

        productEditText = displayListEdit(productEditText, "");

        productEditText.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                // workerEditText.setText("");
                if (productListView.getVisibility() == View.GONE) {
                    productListView.setVisibility(View.VISIBLE);
                    productBranchImage.setImageDrawable(getResources()
                            .getDrawable(R.drawable.up_btn));

                }
            }
        });
        productListView = getProductListView(productListView, viewId,
                questionObject);

        UIHelper.setListViewHeightBasedOnChildren(productListView);

        productEditText.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence cs, int arg1, int arg2,
                                      int arg3) {
                // When user changed the Text
                if (productListViewListener != -1) {
                    ((ArrayAdapter) (productListView.getAdapter())).getFilter()
                            .filter(cs);
                    if (productListView.getVisibility() == View.GONE) {
                        productListView.setVisibility(View.VISIBLE);
                        productBranchImage.setImageDrawable(getResources()
                                .getDrawable(R.drawable.up_btn));

                    }
                } else
                    productListViewListener = 0;

            }

            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1,
                                          int arg2, int arg3) {
                // TODO Auto-generated method stub

            }

            @Override
            public void afterTextChanged(Editable arg0) {
                // TODO Auto-generated method stub

            }
        });

        productBranchImage.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (productListView.getVisibility() == View.GONE) {
                    productListView.setVisibility(View.VISIBLE);
                    productBranchImage.setImageDrawable(getResources()
                            .getDrawable(R.drawable.up_btn));

                } else {
                    productListView.setVisibility(View.GONE);
                    productBranchImage.setImageDrawable(getResources()
                            .getDrawable(R.drawable.down_btn));
                }

            }
        });
        barcodeImg.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                Intent intent = new Intent(QuestionnaireActivity.this,
                        CaptureActivity.class);
                intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
                startActivityForResult(intent, 456);
            }
        });

        return layout_shelf_study;
    }

    private RelativeLayout preparePOSLocationList(Boolean isPrev,
                                                  RelativeLayout layout_shelf_study) {

        if (locationBranchImage == null)
            locationBranchImage = (ImageView) layout_shelf_study
                    .findViewById(R.id.img_location_down);
        if (locationEditText == null)
            locationEditText = (EditText) layout_shelf_study
                    .findViewById(R.id.edit_location);
        if (locationListView == null)
            locationListView = (ListView) layout_shelf_study
                    .findViewById(R.id.list_location);

        locationListView.setVisibility(View.GONE);

        locationEditText = displayListEdit(locationEditText, "");
        locationListView = getLocationListView(locationListView, viewId,
                questionObject);
        // locationListView.setId(viewId);
        // tmmpid = viewId;
        UIHelper.setListViewHeightBasedOnChildren(locationListView);
        locationEditText.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                // workerEditText.setText("");
                if (locationListView.getVisibility() == View.GONE) {
                    locationListView.setVisibility(View.VISIBLE);
                    // locationBranchImage.setImageDrawable(getResources()
                    // .getDrawable(R.drawable.up_btn));

                }
            }
        });

        locationEditText.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence cs, int arg1, int arg2,
                                      int arg3) {
                // When user changed the Text
                if (locationListViewListener != -1) {
                    ((ArrayAdapter) (locationListView.getAdapter()))
                            .getFilter().filter(cs);
                    if (locationListView.getVisibility() == View.GONE) {
                        locationListView.setVisibility(View.VISIBLE);
                        // locationBranchImage
                        // .setBackgroundDrawable(getResources()
                        // .getDrawable(R.drawable.up_btn));

                    }
                } else
                    locationListViewListener = 0;

            }

            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1,
                                          int arg2, int arg3) {
                // TODO Auto-generated method stub

            }

            @Override
            public void afterTextChanged(Editable arg0) {
                // TODO Auto-generated method stub

            }
        });

        locationBranchImage.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (locationListView.getVisibility() == View.GONE) {
                    locationListView.setVisibility(View.VISIBLE);
                    // locationBranchImage.setImageDrawable(getResources()
                    // .getDrawable(R.drawable.up_btn));

                } else {
                    locationListView.setVisibility(View.GONE);
                    // locationBranchImage.setImageDrawable(getResources()
                    // .getDrawable(R.drawable.down_btn));
                }

            }
        });
        // viewId = tmmpId - 1;
        return layout_shelf_study;
    }

    private void getSplitQuestion(Objects questionObject2,
                                  RelativeLayout questionnaireLayout) {
        String str = questionObject2.getQuestion();
        if (str.contains("$[text]$")) {
            HorizontalScrollView hr = new HorizontalScrollView(
                    QuestionnaireActivity.this);
            hr.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT,
                    LayoutParams.WRAP_CONTENT));
            RelativeLayout layout = new RelativeLayout(
                    QuestionnaireActivity.this);
            viewId = getViewId(viewId);
            hr.setId(viewId);
            hr.addView(layout);

            int tempId = viewId;
            questionnaireLayout.addView(hr, getElseLayoutParam());
            isSplit = true;
            String strOne = str.substring(0, str.indexOf("$[text]$"));
            strOne = strOne + "-" + questionObject.getDataID() + "-";
            if (set.getEnableQuestionNumberingInForm().equals("1"))
                strOne = (questionObject.currentIndex + " " + strOne);
            else if (set.getEnableQuestionNumberingInForm().equals("2")) {
                if (questionObject.getObjectCode() == null)
                    questionObject.setObjectCode("");
                strOne = (questionObject.getObjectCode() + " " + strOne);
            }
            String strTwo = str.substring(str.indexOf("$[text]$") + 8);
            TextView tv = new TextView(this.getApplicationContext());
            tv.setText(Helper.makeHtmlString(strOne));

            tv.setTextColor(Color.BLACK);
            viewId = getViewId(viewId);
            tv.setId(viewId);
            setFontSize(tv);
            layout.addView(tv);
            btextbox = null;
            textbox = new EditText(this.getApplicationContext());
            Drawable d = getResources().getDrawable(R.drawable.backdatebox);
            textbox.setBackgroundDrawable(d);

            textbox.setTextColor(getResources().getColor(
                    android.R.color.black));
            if (modeSelect == 3) {
                textbox.setGravity(Gravity.RIGHT);
            } else if (modeSelect == 3 && outerQuestionObject == null) {
                textbox.setGravity(Gravity.RIGHT | Gravity.TOP);
            } else if (outerQuestionObject == null)
                textbox.setGravity(Gravity.TOP);
            textbox.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
            textbox.setMinWidth(Helper.getInt(questionObject
                    .getMiFreeTextMinlength()));
            textbox.setMaxWidth(Helper.getInt(questionObject
                    .getMiFreeTextMaxlength()));
            textbox.setLines(Helper.getInt(questionObject
                    .getMiFreeTextMaxlength()));
            textbox.setOnFocusChangeListener(onKeyBoardOn);
            // if (isPrev)
            {
                QuestionnaireData qd = getSingleAnswer(questionObject
                        .getDataID());
                // if(listAnswers != null && listAnswers.get(0) != null &&
                // listAnswers.get(0).getAnswer() != null)
                // qd.setAnswerText(listAnswers.get(0).getAnswer());
                if (qd != null)
                    textbox.setText(Helper.makeHtmlString(qd.getAnswerText()));
            }
            setFontSize(textbox);

            viewId = getViewId(viewId);
            textbox.setId(viewId);
            layout.addView(textbox, getElseTextViewSplitLayoutParam());

            TextView tv1 = new TextView(this.getApplicationContext());
            tv1.setText(Helper.makeHtmlString(strTwo));
            tv1.setTextColor(Color.BLACK);
            viewId = getViewId(viewId);
            tv1.setId(viewId);
            setFontSize(tv1);
            layout.addView(tv1, getElseSplitLayoutParam());
            // questionObject.getMiNumberMax()
            switch (Helper.getInt(questionObject2.getMiType())) {
                case 1:
                    textbox.setInputType(InputType.TYPE_CLASS_TEXT
                            | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
                    textbox.setSingleLine(false);
                    textbox.setLines(4); // desired number of lines
                    textbox.setHorizontallyScrolling(false);
                    textbox.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);

                    break;
                case 2:
                case 5:
                    textbox.setInputType(InputType.TYPE_CLASS_NUMBER
                            | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                    // textbox.setText("");
                    textbox.setOnLongClickListener(new OnLongClickListener() {

                        @Override
                        public boolean onLongClick(View arg0) {
                            Calculation c = new Calculation((EditText) arg0);
                            c.makeDialog(QuestionnaireActivity.this);
                            return false;
                        }
                    });

                    break;
                case 3:
                    textbox.setFocusable(false);
                    textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                    ShowDatePicker();
                    vDateTime = Helper.DatePicker;
                    break;
                case 4:
                case 6:
                case 7:
                case 8:
                    textbox.setFocusable(false);
                    textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                    showTimePickerSeconds(textbox);
                    vDateTime = Helper.TimePicker;

                    break;
            }
            if (order != null && order.getIsJobInProgressOnServer() != null
                    && order.isDataIdEnabled(set, questionObject.getDataID()))
                textbox.setEnabled(false);
            viewId = tempId;

        }
    }

    public static ArrayList<Objects> randomizeQuestions(
            ArrayList<Objects> listObjects, int seed) {
        ArrayList<Objects> randomizeList = new ArrayList<Objects>();
        Calendar calendar = Calendar.getInstance();
        System.out.println("Seconds in current minute = "
                + calendar.get(Calendar.SECOND));

        if (seed < 0) {
            seed = Helper.seed = calendar.get(Calendar.SECOND);
        }
        Random randomGenerator = new Random(seed);
        int size = listObjects.size();
        while (randomizeList.size() != size) {
            int n = randomGenerator.nextInt(listObjects.size());
            randomizeList.add(listObjects.get(n));
            listObjects.remove(listObjects.get(n));
        }

        return randomizeList;
    }

    public static ArrayList<Objects> randomizeQuestionsForBlocks(
            ArrayList<Objects> listObjects, int seed) {
        ArrayList<Objects> randomizeList = new ArrayList<Objects>();
        Calendar calendar = Calendar.getInstance();
        System.out.println("Seconds in current minute = "
                + calendar.get(Calendar.SECOND));

        if (seed < 0) {
            seed = Helper.seed = calendar.get(Calendar.SECOND);
        }
        Random randomGenerator = new Random(seed);

        ArrayList<Integer> listInt = new ArrayList<Integer>();
        int lastnumber = -1;
        int thisNumber = -1;
        for (int i = 0; i < listObjects.size(); i++) {

            thisNumber = (int) Integer.parseInt(listObjects.get(i).getObjectOrder());
            if (thisNumber != lastnumber)
                listInt.add(thisNumber);
            lastnumber = thisNumber;
        }
        int size = listObjects.size();
        while (randomizeList.size() != size) {
            int n = randomGenerator.nextInt(listInt.size());
            ArrayList<Objects> allObjs = addAllAgainstThisIndex(listInt.get(n), listObjects);
            randomizeList.addAll(allObjs);
            listInt.remove(n);
        }

        return randomizeList;
    }

    private static ArrayList<Objects> addAllAgainstThisIndex(int index, ArrayList<Objects> listObjects) {
        ArrayList<Objects> tempList = new ArrayList<Objects>();
        for (int i = 0; i < listObjects.size(); i++) {
            int thisIndex = (int) Integer.parseInt(listObjects.get(i).getObjectOrder());
            if (thisIndex == index) {
                tempList.add(listObjects.get(i));
            }
        }
        return tempList;
    }

    private static ArrayList<Titles> randomizeTitles(
            ArrayList<Titles> listTitles) {
        ArrayList<Titles> randomizeList = new ArrayList<Titles>();
        if (listTitles == null)
            return randomizeList;
        Calendar calendar = Calendar.getInstance();
        System.out.println("Seconds in current minute = "
                + calendar.get(Calendar.SECOND));
        if (Helper.seed < 0) {
            Helper.seed = calendar.get(Calendar.SECOND);
        }
        Random randomGenerator = new Random(Helper.seed);
        int size = listTitles.size();
        while (randomizeList.size() != size) {
            int n = randomGenerator.nextInt(listTitles.size());
            randomizeList.add(listTitles.get(n));
            listTitles.remove(listTitles.get(n));
        }

        return randomizeList;
    }

    OnClickListener startRecOnClickListener = new OnClickListener() {

        @Override
        public void onClick(View arg0) {
            startRecListener();
        }
    };

    OnClickListener stopRecOnClickListener = new OnClickListener() {

        @Override
        public void onClick(View arg0) {
            recording = false;
        }
    };

    OnClickListener playBackOnClickListener = new OnClickListener() {

        @Override
        public void onClick(View v) {
            playRecord();
        }

    };

    boolean recording = false;
    private boolean isPageBreak = true;
    private boolean isShowRecorder;
    private String loopStartDataID;
    private String currentLoopName;
    private Objects currentLoopObject;
    private String backPointer = null;
    private boolean isRestoreVideo;
    private boolean isRestoreGallery;
    private RelativeLayout lastQLayout;
    private View eyeView;
    private View lasteyeview;

    private void startRecord() {

        String fileName = CheckerApp.localFilesDir.getPath()//Environment.getExternalStorageDirectory().getPath()
                + "/";
        Calendar cal = Calendar.getInstance();
        fileName = fileName + "caudio_" + (System.currentTimeMillis() / 1000)
                + "_" + (System.currentTimeMillis() / (1000 * 60)) + "_"
                + orderID + ".pcm";

        File file = new File(fileName);

        try {
            file.createNewFile();

            OutputStream outputStream = new FileOutputStream(file);
            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(
                    outputStream);
            DataOutputStream dataOutputStream = new DataOutputStream(
                    bufferedOutputStream);

            int minBufferSize = AudioRecord.getMinBufferSize(11025,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO,
                    AudioFormat.ENCODING_PCM_16BIT);

            short[] audioData = new short[minBufferSize];

            AudioRecord audioRecord = new AudioRecord(
                    MediaRecorder.AudioSource.MIC, 11025,
                    AudioFormat.CHANNEL_CONFIGURATION_MONO,
                    AudioFormat.ENCODING_PCM_16BIT, minBufferSize);

            audioRecord.startRecording();

            while (recording) {
                int numberOfShort = audioRecord.read(audioData, 0,
                        minBufferSize);
                for (int i = 0; i < numberOfShort; i++) {
                    dataOutputStream.writeShort(audioData[i]);
                }
            }

            audioRecord.stop();
            dataOutputStream.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    void playRecord() {

        File file = new File(CheckerApp.localFilesDir,//Environment.getExternalStorageDirectory(),
                "test.pcm");

        int shortSizeInBytes = Short.SIZE / Byte.SIZE;

        int bufferSizeInBytes = (int) (file.length() / shortSizeInBytes);
        short[] audioData = new short[bufferSizeInBytes];

        try {
            InputStream inputStream = new FileInputStream(file);
            BufferedInputStream bufferedInputStream = new BufferedInputStream(
                    inputStream);
            DataInputStream dataInputStream = new DataInputStream(
                    bufferedInputStream);

            int i = 0;
            while (dataInputStream.available() > 0) {
                audioData[i] = dataInputStream.readShort();
                i++;
            }

            dataInputStream.close();

            AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
                    11025, AudioFormat.CHANNEL_CONFIGURATION_MONO,
                    AudioFormat.ENCODING_PCM_16BIT, bufferSizeInBytes,
                    AudioTrack.MODE_STREAM);

            audioTrack.play();
            audioTrack.write(audioData, 0, bufferSizeInBytes);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void startRecListener() {
        if (recording == false) {
            Thread recordThread = new Thread(new Runnable() {

                @Override
                public void run() {
                    recording = true;
                    startRecord();
                }

            });
            recordThread.start();
            // btnRecord
            // .setText(getString(R.string.questionnaire_record_stop_btn));

        } else {
            recording = false;
            // btnRecord.setText(getString(R.string.questionnaire_record_btn));
        }

    }

    public int getDateButtonEditTextView(QuestionnaireActivity th,
                                         Button btextbox, int type, boolean isPrev, Objects questionObject) {

        int vDateTime = -1;
        if (th.outerQuestionObject == null)
            btextbox.setGravity(Gravity.TOP);
        viewId = getViewId(viewId);
        btextbox.setId(viewId);

        if (modeSelect == 3) {
            btextbox.setGravity(Gravity.RIGHT);
            btextbox.setLayoutDirection(View.LAYOUT_DIRECTION_RTL);
        }

        String str = android.os.Build.VERSION.SDK;
        int sdk = Integer.valueOf(str);
        if (isPrev && questionObject != null) {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            if (qd != null)
                btextbox.setText(Helper.makeHtmlString(qd.getAnswerText()));
        }
        setFontSize(btextbox);

        switch (type) {
            case 3:
                th.ShowDatePickerOnButton(btextbox);
                vDateTime = Helper.DatePicker;
                break;
            case 4:
            case 6:
            case 7:
            case 8:
                th.showTimePickerSecondsonButton(btextbox);
                vDateTime = Helper.TimePicker;
                break;
        }

        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        btextbox.setBackgroundDrawable(d);
        btextbox.setTextColor(Color.parseColor("#000000"));


        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            btextbox.setEnabled(false);
        return vDateTime;
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
    private void PrepareLayout(int qIndex, boolean isPrev, boolean isRefresh) {


        listWorkers = set.getListWorkers();
        ratingBar = null;
        if (uqHelper != null)
            uqHelper.qGroups = null;
        uqHelper = null;

        isSplit = false;
        multiSpinner = null;
        edit_purchase_details = null;
        edit_purchase_payment = null;
        edit_purchase_description = null;
        edit_service_invoice_number = null;
        edit_service_payment = null;
        edit_service_description = null;
        edit_transportation_payment = null;
        edit_transportation_description = null;
        lastFileUploadAlreadyAdded = false;
        miWholeView = null;
        vDateTime = -1;


        tmmpid = -1;
        if (qIndex <= 2) {
            int i = 0;
            i++;
        }
        if (set != null && set.getShowBackButton() != null
                && set.getShowBackButton().equals("0")) {
            previousImg.setVisibility(View.INVISIBLE);
            previousBtn.setVisibility(RelativeLayout.INVISIBLE);
            updateProgressOnScreen(0);
        }
        spinnerFirstTime = true;
        enableValidationQuestion = show_attachedfilescreen = false;
        viewId = 100;
        tempId = 0;
        isKeyboardOn = false;
        isNextObj = true;

        RelativeLayout questionnaireLayout = new RelativeLayout(
                this.getApplicationContext());
        questionnaireLayout.setLayoutDirection(View.LAYOUT_DIRECTION_LTR);

        if (listObjects == null) {

            Toast.makeText(QuestionnaireActivity.this,
                    R.string.save_questionnaire_records_for_offline,
                    Toast.LENGTH_LONG).show();
            Intent data = new Intent();
            if (orderID.contains("-")) {
                data.putExtra("isSurvey", true);
                if (branchEditText != null && branchEditText.getText() != null)
                    data.putExtra(Constants.BRANCH_NAME, branchEditText
                            .getText().toString());
            }
            data.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);

            data.putExtra(Constants.QUESTIONNAIRE_STAUS, 0);

            String did = this.backPointer;
            if (did == null && questionObject != null) did = questionObject.getDataID();
            if (showSubmitMenu == true && previousPageDataId != null)
                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
            else
                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, did);
            data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME, startTime);
            CheckerApp.setQuestionResult(data);
            finish();
            return;

        }
        size = listObjects.size();
        int skipObjCount = 0;
        isHideAdditionalInfoSingleChoiceAnswers = 0;
        isMandatorySingleChoiceAnswers = 0;
        String firstQuestionOnScreenDataID = null;
        size = listObjects.size();

        for (objectCount = qIndex, viewOnPage = 1; objectCount < size; objectCount++, viewOnPage++) {

            updateProgressOnScreen((float) objectCount / (float) size);
            size = listObjects.size();
            isSplit = false;
            showSubmitMenu = false;

            if (objectCount >= listObjects.size()) {
                objectCount = listObjects.size() - 1;
            }
            if (objectCount < 0) {
                objectCount = 0;
            }
            questionObject = listObjects.get(objectCount);

            String qDataId = questionObject.getDataID();
            if (lastDataId != null && lastDataId.equals(qDataId)) {
                lastDataId = null;
            }
            if (questionObject != null && questionObject.getDataID() != null
                    && (recorder == null)) {
                recorder = new audioMediaRecorder(QuestionnaireActivity.this,
                        uploadFileList, uploadList, uploadFileListDataId,
                        questionObject.getDataID(), getFilePathDataId(
                        questionObject.getDataID(),
                        order.getClientName(), order.getBranchName(),
                        order.getSetName(), sdf.format(new Date()),
                        order.getOrderID(), false), this);
                recorder.recordAudio(btnRecord, btnPause, txtTimer,
                        layoutRecorder);
            }
            recorder.setDataID(questionObject.getDataID());
            isShowRecorder = false;
            recorder.isShowRecorder(isShowRecorder);

            if (Helper.comapreString(questionObject.getObjectType(), "1")) {

                if (!questionObject.ispagebreakokay) {
                    skipObjCount++;
                    if (objectCount == size - 1) {
                        checkForNextBtnVisibility(questionnaireLayout, isPrev,
                                isRefresh);
                    }
                    continue;
                }
                int ij = 0;
                ij++;
            }
            quotaQuestions = getQuotaQuestions(questionObject.getDataID());
            outerQuestionObject = null;

            if (questionObject.getListAutoValues() != null) {
                thisAutoValues = new ArrayList<AutoValues>();

                for (int i = 0; i < questionObject.getListAutoValues().size(); i++) {
                    AutoValues aValue = questionObject.getListAutoValues().get(
                            i);
                    if (IsObjectdisplaybyCondition(aValue.getCondition())) {
                        thisAutoValues.add(aValue);
                    }
                }
                checkAutoValuesByDisplayCondition();
            } else {
                thisAutoValues = null;
                isCheckShown = false;
            }
            isHideAdditionalInfoSingleChoiceAnswers = 0;
            isMandatorySingleChoiceAnswers = 0;

            String cleanDataId = getCleanDataId(questionObject.getDataID());

            if (DataID != null && !DataID.equals("")) {
                if (objectCount == 262) {
                    int ijk = 0;
                    ijk++;
                }
                if (cleanDataId != null && cleanDataId.startsWith(DataID)) {

                    DataID = "";
                    if (isBackJumpThenBack) {
                        // backCount = 0;
                        isBackJumpThenBack = false;
                        if (questionObject.pageCount >= 0) {
                            pageCount = questionObject.pageCount;
                            viewOnPage = questionObject.viewOnPage;
                            nextQIndex = questionObject.nextQIndex;
                        }
                        // viewOnPage = 1;
                    }
                } else {
                    if (set != null
                            && (set.getShowBackButton() == null || set
                            .getShowBackButton().equals("1")))
                        previousImg.setVisibility(View.VISIBLE);
                    previousBtn.setVisibility(View.VISIBLE);
                    if (isBackJump == true) {
                        previousButtonBackJumpClicked();
                        questionObject.backJumpDataID = DataIDBackJump;
                        questionNumber = questionObject.currentIndex;
                        return;
                        // backCount += questionPageArray[pageCount];
                    }
                    // pageCount++;
                    if (objectCount == size - 1) {
                        // backCount = 0;
                        isBackJump = true;
                        while (!DataID.equals(questionObject.getDataID())) {
                            questionNumber--;

                            nextQIndex = nextQIndex - 1;
                            if (nextQIndex >= listObjects.size()
                                    || nextQIndex < 0) {
                                nextQIndex++;
                                break;

                            } else
                                questionObject = listObjects.get(nextQIndex);
                        }

                        nextQIndex = nextQIndex + 1;
                        previousButtonBackJumpClicked();
                        questionObject.backJumpDataID = DataIDBackJump;
                        questionNumber = questionObject.currentIndex;
                        return;
                    }
                    continue;
                }
            }

            if (questionObject.getQuestionGroups() != null
                    || questionObject.getDataID().contains("_")) {
                if (objectCount == size - 1) {
                    checkForNextBtnVisibility(questionnaireLayout, isPrev,
                            isRefresh);
                }
                continue;
            }

            if (Helper.comapreString(questionObject.getObjectType(), "4")
                    || (!Helper.IsEmptyString(questionObject
                    .getQuestionTypeLink()))) {
                if (questionObject.getQuestionTypeLink() != null &&
                        !questionObject.getQuestionTypeLink().equals("4")) {
                    boolean isOkay = false;
                    if (questionObject.getListAnswers() != null
                            && questionObject.getListAnswers().size() > 0) {
                        for (int j = 0; j < questionObject.getListAnswers()
                                .size(); j++) {
                            if (IsObjectdisplaybyCondition(questionObject
                                    .getListAnswers().get(j)
                                    .getAnswerDisplayCondition())) {
                                isOkay = true;
                                break;
                            }
                        }
                    }
                    if (!isOkay &&
                            questionObject.getMiType() != null && (!questionObject.getMiType().equals("11")
                            && !questionObject.getMiType().equals("12")
                            && !questionObject.getMiType().equals("13")
                            && !questionObject.getMiType().equals("14") && !questionObject
                            .getMiType().equals("15"))
                            && !(questionObject != null
                            && questionObject.getAnswersSource() != null
                            && questionObject.getAnswersSource()
                            .length() > 0
                            && questionObject.getAnswersFormat() != null
                            && questionObject.getAnswersFormat()
                            .length() > 0 && questionObject
                            .getMiType() != null)) {
                        removethisobjectfromquestionairedata(
                                questionObject.getDataID(), true);
                        skipObjCount++;
                        if (objectCount == size - 1) {

                            checkForNextBtnVisibility(questionnaireLayout,
                                    isPrev, isRefresh);
                        }
                        continue;
                    }
                }
            }

            if (!IsObjectdisplaybyCondition(questionObject
                    .getObjectDisplayCondition())) {
                removethisobjectfromquestionairedata(
                        questionObject.getDataID(), false);
                skipObjCount++;
                if (objectCount == size - 1) {

                    checkForNextBtnVisibility(questionnaireLayout, isPrev,
                            isRefresh);
                }
                continue;
            }
            if (Helper.comapreString(questionObject.getObjectType(), "7")) {
                DataID = questionObject.getDestinationObject();
                if (DataID.equals("0"))
                    DataID = "";
                continue;
            }

            if (questionObject.getQuestionTitles() != null
                    && questionObject.getQuestionLinks() != null
                    && !questionObject.getDataID().contains("_")) {
                // ShowAlert(QuestionnaireActivity.this, "SHOW LINKS",
                // "links", "ok");
                Boolean isTitleRandom = false;
                if (questionObject.getRandomTitlesOrder() != null
                        && questionObject.getRandomTitlesOrder().equals("1")) {
                    isTitleRandom = true;
                }
                Boolean isQuestionRandom = false;
                if (questionObject.getRandomQuestionOrder() != null
                        && questionObject.getRandomQuestionOrder().equals("1")) {
                    isQuestionRandom = true;
                }
                ArrayList<Objects> currentObject = new ArrayList<Objects>();
                for (int j = 0; j < questionObject.getQuestionLinks().size(); j++) {
                    for (int i = 0; i < listObjects.size(); i++) {
                        if (listObjects
                                .get(i)
                                .getDataID()
                                .equals(questionObject.getQuestionLinks()
                                        .get(j))) {
                            currentObject.add(listObjects.get(i));

                            break;
                        }
                    }
                }

                if (currentObject != null) {
                    if (isQuestionRandom)
                        currentObject = randomizeQuestions(currentObject,
                                Helper.seed);

                    // if (isTitleRandom)
                    // questionObject
                    // .setQuestionTitles(randomizeTitles(questionObject
                    // .getQuestionTitles()));

                    outerQuestionObject = questionObject;
                    ArrayList<Objects> groupList = new ArrayList<Objects>();
                    for (int k = 0; k < currentObject.size(); k++) {
                        for (int j = 0; j < questionObject
                                .getQuestionRandomTitles().size(); j++) {
                            for (int i = 0; i < specialListObjects.size(); i++) {
                                if (specialListObjects
                                        .get(i)
                                        .getDataID()
                                        .contains(
                                                currentObject.get(k)
                                                        .getDataID()
                                                        + "_"
                                                        + questionObject
                                                        .getDataID()
                                                        + "-"
                                                        + questionObject
                                                        .getQuestionRandomTitles()
                                                        .get(j)
                                                        .getqgtID())) {
                                    groupList.add(specialListObjects.get(i));
                                    // objectCount++;
                                    break;
                                }
                            }
                        }
                    }

                    ArrayList<Objects> objList = new ArrayList<Objects>();
                    int tmpId = viewId;
                    ArrayList<Titles> newTitles = new ArrayList<Titles>();
                    for (int j = 0; j < questionObject
                            .getQuestionRandomTitles().size(); j++) {

                        if (IsObjectdisplaybyCondition(questionObject
                                .getQuestionRandomTitles().get(j)
                                .getDisplayCondition())) {

                            newTitles.add(questionObject
                                    .getQuestionRandomTitles().get(j));
                        }
                    }

                    if (newTitles == null || newTitles.size() == 0) {
                        skipObjCount++;
                        if (objectCount == size - 1) {
                            checkForNextBtnVisibility(questionnaireLayout,
                                    isPrev, isRefresh);
                        }
                        continue;
                    }

                    if (questionObject.getQuestionOrientation().equals("0")) {
                        boolean isTitleGroupShown = false;
                        uqHelper = UIQuestionGroupHelper.getinstance();
                        uqHelper.qGroups = new ArrayList<dataQuestionGroup>();
                        boolean isGroupShown = false;
                        tempId = tmpId = viewId;
                        if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                            questionnaireLayout.addView(getEditorView(viewId),
                                    getLayoutParam(tempId));
                            tmpId = tempId = viewId;
                        }
                        for (int i = 0; i < questionObject.getQuestionLinks()
                                .size(); i++) {
                            for (int j = 0; j < groupList.size(); j++) {
                                if (groupList
                                        .get(j)
                                        .getDataID()
                                        .contains(
                                                questionObject
                                                        .getQuestionLinks()
                                                        .get(i))
                                        && questionObject.getQuestionLinks()
                                        .get(i) != null
                                        && !questionObject.getQuestionLinks()
                                        .get(i).equals("")) {
                                    boolean isTitleDisplayAble = false;
                                    for (int k = 0; k < newTitles.size(); k++) {
                                        if (groupList
                                                .get(j)
                                                .getDataID()
                                                .contains(
                                                        newTitles.get(k)
                                                                .getqgtID()
                                                                + ";"))
                                            isTitleDisplayAble = true;
                                        //
                                    }
                                    if (isTitleDisplayAble)
                                        objList.add(groupList.get(j));
                                }
                            }
                            objList = checkForAllConditions(objList);

                            if (objList == null || objList.size() == 0) {
                                skipObjCount++;
                                if (objectCount == size - 1) {
                                    checkForNextBtnVisibility(
                                            questionnaireLayout, isPrev,
                                            isRefresh);
                                }
                                continue;
                            }
                            isGroupShown = true;
                            // questionObject.currentIndex = questionNumber;
                            NewUITitleGroupHelper utHelper = new NewUITitleGroupHelper();
                            utHelper.setAltTties(newTitles);
                            View v = utHelper
                                    .prepareGroupLayout(
                                            display,
                                            helper,
                                            modeSelect,
                                            set,
                                            order,
                                            questionnaireData,
                                            QuestionnaireActivity.this,
                                            objList,
                                            subLayout,
                                            (RelativeLayout) findViewById(R.id.sublayout),
                                            null, isTitleRandom,
                                            isQuestionRandom,
                                            questionObject.currentIndex,
                                            isTitleGroupShown);
                            isTitleGroupShown = true;
                            uqHelper.qGroups.addAll(utHelper.qGroups);

                            viewId++;
                            v.setId(viewId);
                            if (firstQuestionOnScreenDataID == null)
                                firstQuestionOnScreenDataID = questionObject
                                        .getDataID();


                            questionnaireLayout.addView(v, getLayoutParam(tmpId));

                            tmpId = viewId;
                            objList = new ArrayList<Objects>();

                            tmpId = viewId;
                            // viewId++;
                        }
                        if (!isGroupShown) {
                            skipObjCount++;
                            if (objectCount == size - 1) {
                                checkForNextBtnVisibility(questionnaireLayout,
                                        isPrev, isRefresh);
                            }
                            continue;
                        }
                    } else {
                        // questionObject.currentIndex = questionNumber;
                        groupList = checkForAllConditions(groupList);

                        if (groupList == null || groupList.size() == 0) {
                            skipObjCount++;
                            if (objectCount == size - 1) {
                                checkForNextBtnVisibility(questionnaireLayout,
                                        isPrev, isRefresh);
                            }
                            continue;
                        }
                        View v = null;
                        uqHelper = UIQuestionGroupHelper.getinstance();
                        if (newTitles != null)
                            v = uqHelper
                                    .prepareGroupLayout(
                                            display,
                                            helper,
                                            modeSelect,
                                            set,
                                            order,
                                            questionnaireData,
                                            QuestionnaireActivity.this,
                                            groupList,
                                            subLayout,
                                            (RelativeLayout) findViewById(R.id.sublayout),
                                            newTitles,
                                            isTitleRandom,
                                            isQuestionRandom,
                                            questionObject.currentIndex,
                                            (ImageView) findViewById(R.id.img_plus),
                                            (ImageView) findViewById(R.id.img_minus));
                        else
                            v = uqHelper
                                    .prepareGroupLayout(
                                            display,
                                            helper,
                                            modeSelect,
                                            set,
                                            order,
                                            questionnaireData,
                                            QuestionnaireActivity.this,
                                            groupList,
                                            subLayout,
                                            (RelativeLayout) findViewById(R.id.sublayout),
                                            questionObject.getQuestionTitles(),
                                            isTitleRandom,
                                            isQuestionRandom,
                                            questionObject.currentIndex,
                                            (ImageView) findViewById(R.id.img_plus),
                                            (ImageView) findViewById(R.id.img_minus));

                        if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                            questionnaireLayout.addView(getEditorView(viewId),
                                    getLayoutParam(tempId));
                            tmpId = tempId = viewId;
                        }
                        tmpId = viewId;
                        viewId++;
                        v.setId(viewId);
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        tempId = viewId;

                        questionnaireLayout.addView(v, getLayoutParam(tmpId));

                        tmpId = viewId;
                        // viewId++;
                    }

                    // questionnaireLayout = prepareGroupLayout(groupList);
                    questionnaireLayout = checkForNextBtnVisibility(
                            questionnaireLayout, isPrev, isRefresh);
                    // viewId = uqHelper.viewId;
                }

                break;
            }

            if (questionObject.getQuestionLinks() != null
                    && !questionObject.getDataID().contains("_")) {
                // ShowAlert(QuestionnaireActivity.this, "SHOW LINKS",
                // "links", "ok");
                ArrayList<Objects> groupList = new ArrayList<Objects>();
                for (int j = 0; j < questionObject.getQuestionLinks().size(); j++) {
                    for (int i = 0; i < specialListObjects.size(); i++) {
                        if (specialListObjects
                                .get(i)
                                .getDataID()
                                .equals(questionObject.getQuestionLinks()
                                        .get(j)
                                        + "_"
                                        + questionObject.getDataID())) {
                            groupList.add(specialListObjects.get(i));
                            // objectCount++;
                            break;
                        }
                    }
                }

                ArrayList<Objects> objList = checkForAllConditions(groupList);

                if (objList == null || objList.size() == 0) {
                    skipObjCount++;
                    if (objectCount == size - 1) {
                        checkForNextBtnVisibility(questionnaireLayout, isPrev,
                                isRefresh);
                    }
                    continue;
                }
                outerQuestionObject = questionObject;
                // questionnaireLayout = prepareGroupLayout(groupList);

                Boolean isTitleRandom = false;
                if (questionObject.getRandomTitlesOrder() != null
                        && questionObject.getRandomTitlesOrder().equals("1")) {
                    isTitleRandom = true;
                }
                Boolean isQuestionRandom = false;
                if (questionObject.getRandomQuestionOrder() != null
                        && questionObject.getRandomQuestionOrder().equals("1")) {
                    isQuestionRandom = true;
                }
                if (questionObject.getQuestionOrientation() != null
                        && questionObject.getQuestionOrientation().equals("0")) {
                    View v = null;
                    UIVerticalGroupHelper uvHelper = new UIVerticalGroupHelper();
                    v = uvHelper.prepareGroupLayout(display, helper,
                            modeSelect, set, order, questionnaireData,
                            QuestionnaireActivity.this, groupList,
                            subLayout,
                            (RelativeLayout) findViewById(R.id.sublayout),
                            null, isTitleRandom, isQuestionRandom,
                            questionObject.currentIndex,
                            questionObject.getGroupName());
                    uqHelper = UIQuestionGroupHelper.getinstance();
                    uqHelper.qGroups = uvHelper.qGroups;
//					if (!isSameCustomLink(groupList))
//					{
//						UIVerticalGroupHelper uvHelper = new UIVerticalGroupHelper();
//						v = uvHelper.prepareGroupLayout(display, helper,
//								modeSelect, set, order, questionnaireData,
//								QuestionnaireActivity.this, groupList,
//								subLayout,
//								(RelativeLayout) findViewById(R.id.sublayout),
//								null, isTitleRandom, isQuestionRandom,
//								questionObject.currentIndex,
//								questionObject.getGroupName());
//						uqHelper = UIQuestionGroupHelper.getinstance();
//						uqHelper.qGroups = uvHelper.qGroups;
//					} else {
//						UIVerticalOldGroupHelper uvHelper = new UIVerticalOldGroupHelper();
//						v = uvHelper.prepareGroupLayout(display, helper,
//								modeSelect, set, order, questionnaireData,
//								QuestionnaireActivity.this, groupList,
//								subLayout,
//								(RelativeLayout) findViewById(R.id.sublayout),
//								null, isTitleRandom, isQuestionRandom,
//								questionObject.currentIndex,
//								questionObject.getGroupName());
//						uqHelper = UIQuestionGroupHelper.getinstance();
//						uqHelper.qGroups = uvHelper.qGroups;
//					}
                    int tmpId = viewId;
                    viewId++;
                    v.setId(viewId);
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();

                    if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                        questionnaireLayout.addView(getEditorView(viewId),
                                getLayoutParam(tempId));
                        tmpId = tempId = viewId;
                    }
                    questionnaireLayout.addView(v, getLayoutParam(tmpId));

                    tmpId = viewId;
                    // viewId++;
                } else {
                    NewUIQuestionGroupHelper nqhelper = new NewUIQuestionGroupHelper();

                    View v = nqhelper.prepareGroupLayout(display, helper,
                            modeSelect, set, order, questionnaireData,
                            QuestionnaireActivity.this, groupList, subLayout,
                            (RelativeLayout) findViewById(R.id.sublayout),
                            null, isTitleRandom, isQuestionRandom,
                            questionObject.currentIndex,
                            questionObject.getGroupName());
                    uqHelper = UIQuestionGroupHelper.getinstance();
                    uqHelper.qGroups = new ArrayList<dataQuestionGroup>();
                    uqHelper.qGroups.addAll(nqhelper.qGroups);

                    if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                        tempId = viewId;
                        questionnaireLayout.addView(getEditorView(viewId),
                                getLayoutParam(tempId));
                    }
                    int tmpId = viewId;
                    viewId++;
                    v.setId(viewId);
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();

                    questionnaireLayout.addView(v, getLayoutParam(tmpId));

                    tmpId = viewId;

                    // viewId++;
                }
                questionnaireLayout = checkForNextBtnVisibility(
                        questionnaireLayout, isPrev, isRefresh);
                // viewId = uqHelper.viewId;

                break;
            }
            if (uqHelper != null)
                uqHelper.qGroups = null;

            uqHelper = null;

            if (Helper.comapreString(questionObject.getObjectType(), "30")) {
                // if (questionObject.getLoopObject().getCurrentLoopCount() < 0)
                // {
                // DataID = questionObject.getLoopObject().getLoopEndDataID();
                // // questionObject.getLoopObject().setCurrentLoopCount(0);
                // }
                continue;
            }

            if (Helper.comapreString(questionObject.getObjectType(), "12")) {
                if (questionObject.getQuestion() != null
                        && questionObject.getQuestion().length() > 0) {
                    int size = -1;
                    if (questionObject.getSize() != null
                            && !questionObject.getSize().equals("")) {
                        try {
                            size = Integer.parseInt(questionObject.getSize());
                        } catch (Exception ex) {
                        }

                    }
                    questionnaireLayout
                            .addView(
                                    commentTextView(
                                            questionObject.getQuestion(), size),
                                    getLayoutParam(viewId - 1, 20, 0));
                } else {
                    questionnaireLayout
                            .addView(
                                    commentTextView(
                                            getString(R.string.Questionnaire_finish_time_lbl),
                                            -1),
                                    getLayoutParam(viewId - 1, 20, 0));
                }
                if (firstQuestionOnScreenDataID == null)
                    firstQuestionOnScreenDataID = questionObject.getDataID();
                questionnaireLayout.addView(lastEditTextforTime(isPrev, true),
                        getEditTextLayoutParam(viewId - 1, false));
                questionnaireLayout = checkForNextBtnVisibility(
                        questionnaireLayout, isPrev, isRefresh);
                break;
            }
            if (Helper.comapreString(questionObject.getObjectType(), "20")) {
                questionObject.setObjectType("4");
                questionObject.setQuestionTypeLink("1");
            }
            if (Helper.comapreString(questionObject.getObjectType(), "4")
                    || (!Helper.IsEmptyString(questionObject
                    .getQuestionTypeLink()))) {
                if (firstQuestionOnScreenDataID == null)
                    firstQuestionOnScreenDataID = questionObject.getDataID();
                isNextObj = true;
                if (questionObject.getQuestion() != null
                        && questionObject.getQuestion().contains("$[text]$")) {
                    getSplitQuestion(questionObject, questionnaireLayout);

                    // questionnaireLayout = checkForNextBtnVisibility(
                    // questionnaireLayout, isPrev, isRefresh);
                    // break;
                }
                if (firstQuestionOnScreenDataID == null)
                    firstQuestionOnScreenDataID = questionObject.getDataID();
                if (order.isEditorNoteAgainstQuestion(set, questionObject.getDataID()) != null) {
                    questionnaireLayout.addView(getEditorView(viewId),
                            getLayoutParam(tempId));
                    tempId = viewId;
                }
                if (!isSplit)
                    questionnaireLayout.addView(getQuestionView(viewId),
                            getLayoutParam(tempId));
                if (questionObject.getAttachment() != null
                        && !isMiHidden(questionObject.getMiType())
                        && !questionObject.getAttachment().equals("0")
                        && (questionObject.getDataID().contains("^")
                        || questionObject.getAttachment().equals("1") || questionObject
                        .getAttachment().equals("2"))) {
                    questionnaireLayout.addView(getattachmentView(),
                            getAttachmentLayoutParam(viewId - 1));
                    TextView tv = commentTextView(
                            getResources().getString(
                                    R.string.questionnaire_select_files)
                                    + "\n", -1);
                    Helper.changeTxtViewColor(tv);
                    setFontSize(tv);
                    if (order != null && order.getIsJobInProgressOnServer() != null
                            && order.isDataIdEnabled(set, questionObject.getDataID()))
                        tv.setEnabled(false);
                    tv.setOnClickListener(new OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // showFileChooser();
                            photomenu = true;
                            if (QuestionnaireActivity.this
                                    .getResources()
                                    .getString(
                                            R.string.questionnaire_upload_files)
                                    .equals(((TextView) v).getText().toString())) {
                                isLastAttachment = true;
                            } else
                                isLastAttachment = false;
                            customMenu(openMenu(null));

                        }
                    });
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();
                    questionnaireLayout.addView(tv,
                            getAttechmentLayout(viewId - 1));

                    serverSideFiles = getServerSideFiles(server_attached_files,
                            false, uploadList);
                    eyeView = getEyeView();
                    questionnaireLayout.addView(eyeView,
                            getAttachmentLayoutParamEye(viewId - 3, 15, 15));
                    if (serverSideFiles != null && serverSideFiles.size() > 0 && !order.getAsArchive()) {
                        eyeView.setVisibility(RelativeLayout.VISIBLE);
                    } else
                        eyeView.setVisibility(RelativeLayout.INVISIBLE);
                }
                View v = getQuestionDescriptionView();
                if (firstQuestionOnScreenDataID == null)
                    firstQuestionOnScreenDataID = questionObject.getDataID();
                questionnaireLayout.addView(v, getLayoutParam(viewId - 1));
                View answerview = getAnswersView(isPrev, questionnaireLayout);
                if (thisAutoValues != null) {
                    // thisAutoValues=null;
                    // nextQIndex++;

                    // save in db here
                    saveAnswers(
                            Helper.getInt(questionObject.getQuestionTypeLink()),
                            Integer.parseInt(questionObject.getDisplayType()),
                            questionObject);
                    // questionnaireLayout = null;

                    ReleaseMemory();

                    checkQuotas();
                    if (objectCount == size - 1) {
                        checkForNextBtnVisibility(questionnaireLayout, isPrev,
                                isRefresh);
                    }
                    continue;
                }
                if (// !questionObject.getQuestionTypeLink().equals("4")&&
                        answerview != null) {
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();
                    questionnaireLayout.addView(answerview,
                            getLayoutParam(v.getId()));
                }
                if (tmmpid > -1) {

                    viewId = tmmpid;
                    tmmpid = -1;
                }
                if (Helper.getInt(questionObject.getShowCritical()) == 1) {
                    questionnaireLayout.addView(getShowCriticalView(),
                            getLayoutParam(viewId - 1));
                }
                if (!isSplit && Helper.getInt(questionObject.getMiType()) > 0) {
                    TextView tv = getMiView();
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();
                    questionnaireLayout.addView(tv, getLayoutParam(viewId - 1));
                }

                if (!isSplit && Helper.getInt(questionObject.getMiType()) > 0
                        && !(questionObject.getQuestionTypeLink().equals("4"))) {
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();
                    questionnaireLayout.addView(
                            getMiView(
                                    Helper.getInt(questionObject.getMiType()),
                                    isPrev),
                            getEditTextLayoutParam(viewId - 1, (questionObject
                                    .getMiType().equals("2") || questionObject
                                    .getMiType().equals("5"))));

                    if ((multiSpinner != null || checkboxgrp != null) && questionObject.getListAnswers() != null) {
                        hideBoxIfCheckBox(questionObject.getListAnswers());
                    }
                    questionObject.setMiText(true);
                } else if (!isSplit
                        && questionObject.getQuestionTypeLink().equals("4")) {
                    if (firstQuestionOnScreenDataID == null)
                        firstQuestionOnScreenDataID = questionObject
                                .getDataID();

                    int type = Helper.getInt(questionObject.getMiType());
                    if (type == 3 || type == 4 || type == 6 || type == 7
                            || type == 8) {
                        textbox = null;
                        Button btn = btextbox = new Button(
                                this.getApplicationContext());

                        if (selectedAnswerForMiView != null)
                            show_hide_mi(selectedAnswerForMiView);
                        if (uqHelper != null)
                            uqHelper.qGroups = null;

                        uqHelper = null;
                        vDateTime = getDateButtonEditTextView(this, btn, type,
                                isPrev, questionObject);
                        // Button btn = getDateButtonEditTextView(type, isPrev);
                        questionnaireLayout
                                .addView(
                                        btn,
                                        getEditTextLayoutParam(
                                                viewId - 1,
                                                (questionObject.getMiType()
                                                        .equals("2") || questionObject
                                                        .getMiType()
                                                        .equals("5"))));
                    } else
                        questionnaireLayout
                                .addView(
                                        getEditTextView(Helper
                                                .getInt(questionObject
                                                        .getMiType()), isPrev),
                                        getEditTextLayoutParam(
                                                viewId - 1,
                                                (questionObject.getMiType()
                                                        .equals("2") || questionObject
                                                        .getMiType()
                                                        .equals("5"))));
                }
                if (questionObject.getMiType() != null && (questionObject.getMiType().equals("11")
                        || questionObject.getMiType().equals("12")
                        || questionObject.getMiType().equals("13")
                        || questionObject.getMiType().equals("14") || questionObject
                        .getMiType().equals("15"))
                        && (questionObject.getListAnswers() == null || questionObject
                        .getListAnswers().size() <= 0)) {

                    saveAnswers(
                            Helper.getInt(questionObject.getQuestionTypeLink()),
                            Integer.parseInt(questionObject.getDisplayType()),
                            questionObject);
                    // questionnaireLayout = null;
                    ReleaseMemory();
                    checkQuotas();
                    if (objectCount == size - 1) {
                        checkForNextBtnVisibility(questionnaireLayout, isPrev,
                                isRefresh);
                    }
                    continue;
                }

                questionnaireLayout = checkForNextBtnVisibility(
                        questionnaireLayout, isPrev, isRefresh);
                break;
            } else {

                if (Helper.IsValidObject(questionObject.getObjectType())) {
                    int type = Integer.parseInt(questionObject.getObjectType());
                    View view = null;
                    // if (type == 15) {
                    //
                    // View dv = DrawingView
                    // .getInstance(QuestionnaireActivity.this);
                    // questionnaireLayout.addView(dv,
                    // getDrawingViewLayoutParams(viewId - 1));
                    //
                    // questionnaireLayout = checkForNextBtnVisibility(
                    // questionnaireLayout, isPrev, isRefresh);
                    // break;
                    //
                    // }
                    if (type == 15) {
                        subLayout.setVisibility(View.GONE);
                        posLayout.setVisibility(View.VISIBLE);
                        layout_shelf_study = preparePOSProductList(isPrev,
                                layout_shelf_study);
                        layout_shelf_study = preparePOSLocationList(isPrev,
                                layout_shelf_study);
                        layout_shelf_study = prepareSubSections(layout_shelf_study);
                        layout_shelf_study = prepareToggleButtons(layout_shelf_study);

                        showSelectedDataPOS();
                        if (selectedProduct > 0 && selectedLocation > 0) {
                            if (getSDK() >= 14) {
                                txtAddQuantity.requestFocus();
                                txtAddQuantity.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        // TODO Auto-generated method stub
                                        if (selectedProduct > 0
                                                && selectedLocation > 0) {
                                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                            keyboard.showSoftInput(
                                                    txtAddQuantity, 0);
                                        }
                                    }
                                }, 50);
                            }
                        }
                        productListView.setVisibility(View.GONE);
                        locationListView.setVisibility(View.GONE);
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        questionnaireLayout = checkForNextBtnVisibility(
                                questionnaireLayout, isPrev, isRefresh);
                        break;
                    }
                    if (type == 9) {

                        if (questionObject.getWorkerInputMandatory() == null
                                || questionObject.getWorkerInputMandatory()
                                .equals("")
                                || questionObject.getWorkerInputMandatory()
                                .equals("0")) {
                            IsMandatory = false;
                            IsMiMandatory = false;
                        } else {
                            IsMandatory = true;
                            IsMiMandatory = true;
                        }

                        view = displayLabel(questionObject
                                .getWorkerInputCaption());
                        questionnaireLayout.addView((view),
                                getElseLayoutParam());
                        workerBranchImage = displayupdownicon(getResources()
                                .getDrawable(R.drawable.down_btn_new));
                        workerBranchImage
                                .setOnClickListener(new OnClickListener() {

                                    @Override
                                    public void onClick(View v) {
                                        if (workerListView.getVisibility() == View.GONE) {
                                            workerListView
                                                    .setVisibility(View.VISIBLE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.down_btn_new));

                                        } else {
                                            workerListView
                                                    .setVisibility(View.GONE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.down_btn_new));
                                        }

                                    }
                                });
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();

                        workerEditText = displayListEdit("");
                        workerEditText
                                .setPadding(0, 0, QuestionnaireActivity.dp2px(
                                        getResources(), 45), 0);
                        viewId = getViewId(viewId);
                        workerEditText.setId(viewId);
                        workerEditText.setGravity(Gravity.CENTER_VERTICAL);

                        workerEditText
                                .setTextColor(Color.parseColor("#ffffff"));
                        questionnaireLayout.addView((workerEditText),
                                getSearchEditTextLayoutParam());
                        workerBranchImage.setPadding(
                                (int) QuestionnaireActivity.px2dp(
                                        getResources(), 9), 4, 4,
                                (int) QuestionnaireActivity.px2dp(
                                        getResources(), 9));
                        questionnaireLayout.addView((workerBranchImage),
                                getIconParam());

                        viewId = getViewId(viewId);
                        workerListView = getWorkerListView(viewId,
                                questionObject);
                        workerBranchImage.setBackgroundColor(getResources()
                                .getColor(R.color.transparent));
                        workerEditText.setBackground(getResources()
                                .getDrawable(R.drawable.pos_green_bg));

                        workerListView.setId(viewId);
                        tmmpid = viewId;
                        workerListView.setVisibility(View.GONE);
                        workerListView.setCacheColorHint(Color.TRANSPARENT);
                        workerListView
                                .setOnTouchListener(new ListView.OnTouchListener() {

                                    @Override
                                    public boolean onTouch(View arg0,
                                                           MotionEvent arg1) {
                                        int action = arg1.getAction();
                                        switch (action) {
                                            case MotionEvent.ACTION_DOWN:
                                                // Disallow ScrollView to
                                                // intercept touch events.
                                                arg0.getParent()
                                                        .requestDisallowInterceptTouchEvent(
                                                                true);
                                                break;

                                            case MotionEvent.ACTION_UP:
                                                // Allow ScrollView to intercept
                                                // touch events.
                                                arg0.getParent()
                                                        .requestDisallowInterceptTouchEvent(
                                                                false);
                                                break;
                                        }

                                        // Handle ListView touch events.
                                        arg0.onTouchEvent(arg1);
                                        return true;
                                    }
                                });

                        workerEditText
                                .setOnClickListener(new OnClickListener() {

                                    @Override
                                    public void onClick(View v) {
                                        // TODO Auto-generated method stub
                                        // workerEditText.setText("");
                                        if (workerListView.getVisibility() == View.GONE) {
                                            workerListView
                                                    .setVisibility(View.VISIBLE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.up_btn));

                                        }
                                    }
                                });

                        workerEditText
                                .addTextChangedListener(new TextWatcher() {

                                    @Override
                                    public void onTextChanged(CharSequence cs,
                                                              int arg1, int arg2, int arg3) {
                                        // When user changed the Text
                                        if (workerListViewListener != -1) {
                                            ((ArrayAdapter) (workerListView
                                                    .getAdapter())).getFilter()
                                                    .filter(cs);
                                            if (workerListView.getVisibility() == View.GONE) {
                                                workerListView
                                                        .setVisibility(View.VISIBLE);
                                                // workerBranchImage
                                                // .setBackgroundDrawable(getResources()
                                                // .getDrawable(
                                                // R.drawable.up_btn));

                                            }
                                        } else
                                            workerListViewListener = 0;

                                    }

                                    @Override
                                    public void beforeTextChanged(
                                            CharSequence arg0, int arg1,
                                            int arg2, int arg3) {
                                        // TODO Auto-generated method stub

                                    }

                                    @Override
                                    public void afterTextChanged(Editable arg0) {
                                        // TODO Auto-generated method stub

                                    }
                                });
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        questionnaireLayout.addView(workerListView,
                                getListLayoutParam());
                        tempId = view.getId();
                        questionnaireLayout = checkForNextBtnVisibility(
                                questionnaireLayout, isPrev, isRefresh);
                        break;
                    } else if (type == 10) {
                        view = displayLabel(questionObject
                                .getBranchInputCaption());
                        if (questionObject.getBranchInputMandatory() == null
                                || questionObject.getBranchInputMandatory()
                                .equals("")
                                || questionObject.getBranchInputMandatory()
                                .equals("0")) {
                            IsMandatory = false;
                            IsMiMandatory = false;
                        } else {
                            IsMandatory = true;
                            IsMiMandatory = true;
                        }
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        questionnaireLayout.addView((view),
                                getElseLayoutParam());
                        workerBranchImage = displayupdownicon(getResources()
                                .getDrawable(R.drawable.down_btn));
                        workerBranchImage
                                .setOnClickListener(new OnClickListener() {

                                    @Override
                                    public void onClick(View v) {
                                        if (branchListView.getVisibility() == View.GONE) {
                                            branchListView
                                                    .setVisibility(View.VISIBLE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.up_btn));

                                        } else {
                                            branchListView
                                                    .setVisibility(View.GONE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.down_btn));
                                        }

                                    }
                                });

                        workerBranchImage.setBackgroundColor(Color
                                .parseColor("#9dc40f"));
                        branchEditText = displayListEdit("");
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        // branchEditText.setBackgroundColor(Color
                        // .parseColor("#9dc40f"));

                        workerBranchImage.setBackgroundColor(getResources()
                                .getColor(R.color.transparent));
                        branchEditText.setBackground(getResources()
                                .getDrawable(R.drawable.pos_green_bg));

                        viewId = getViewId(viewId);
                        branchEditText.setId(viewId);
                        branchEditText.setGravity(Gravity.CENTER_VERTICAL);
                        branchEditText
                                .setPadding(0, 0, QuestionnaireActivity.dp2px(
                                        getResources(), 45), 0);
                        branchEditText
                                .setTextColor(Color.parseColor("#ffffff"));
                        questionnaireLayout.addView((branchEditText),
                                getSearchEditTextLayoutParam());
                        workerBranchImage.setPadding(
                                (int) QuestionnaireActivity.px2dp(
                                        getResources(), 9), 4, 4,
                                (int) QuestionnaireActivity.px2dp(
                                        getResources(), 9));
                        questionnaireLayout.addView((workerBranchImage),
                                getIconParam());

                        viewId = getViewId(viewId);
                        branchListView = getBranchListView(viewId,
                                questionObject);
                        branchListView.setId(viewId);
                        tmmpid = viewId;
                        branchListView.setVisibility(View.GONE);
                        branchListView.setCacheColorHint(Color.TRANSPARENT);
                        branchListView
                                .setOnTouchListener(new ListView.OnTouchListener() {

                                    @Override
                                    public boolean onTouch(View arg0,
                                                           MotionEvent arg1) {
                                        int action = arg1.getAction();
                                        switch (action) {
                                            case MotionEvent.ACTION_DOWN:
                                                // Disallow ScrollView to
                                                // intercept touch events.
                                                arg0.getParent()
                                                        .requestDisallowInterceptTouchEvent(
                                                                true);
                                                break;

                                            case MotionEvent.ACTION_UP:
                                                // Allow ScrollView to intercept
                                                // touch events.
                                                arg0.getParent()
                                                        .requestDisallowInterceptTouchEvent(
                                                                false);
                                                break;
                                        }

                                        // Handle ListView touch events.
                                        arg0.onTouchEvent(arg1);
                                        return true;
                                    }
                                });
                        branchEditText
                                .setOnClickListener(new OnClickListener() {

                                    @Override
                                    public void onClick(View v) {
                                        // TODO Auto-generated method stub
                                        // branchEditText.setText("");
                                        if (branchListView.getVisibility() == View.GONE) {
                                            branchListView
                                                    .setVisibility(View.VISIBLE);
                                            // workerBranchImage
                                            // .setBackgroundDrawable(getResources()
                                            // .getDrawable(
                                            // R.drawable.up_btn));

                                        }
                                    }
                                });

                        branchEditText
                                .addTextChangedListener(new TextWatcher() {

                                    @Override
                                    public void onTextChanged(CharSequence cs,
                                                              int arg1, int arg2, int arg3) {
                                        // When user changed the Text
                                        if (workerListViewListener != -1) {
                                            ((ArrayAdapter) (branchListView
                                                    .getAdapter())).getFilter()
                                                    .filter(cs);
                                            if (branchListView.getVisibility() == View.GONE) {
                                                branchListView
                                                        .setVisibility(View.VISIBLE);
                                                // workerBranchImage
                                                // .setBackgroundDrawable(getResources()
                                                // .getDrawable(
                                                // R.drawable.up_btn));

                                            }
                                        } else
                                            workerListViewListener = 0;

                                    }

                                    @Override
                                    public void beforeTextChanged(
                                            CharSequence arg0, int arg1,
                                            int arg2, int arg3) {
                                        // TODO Auto-generated method stub

                                    }

                                    @Override
                                    public void afterTextChanged(Editable arg0) {
                                        // TODO Auto-generated method stub

                                    }
                                });

                        questionnaireLayout.addView(branchListView,
                                getListLayoutParam());
                        tempId = view.getId();
                        questionnaireLayout = checkForNextBtnVisibility(
                                questionnaireLayout, isPrev, isRefresh);

                        // viewId = tmmpId - 1;

                        break;
                        // tempId = tv.getId();
                    }
                    View v = getViewByObjectType(type, isPrev);
                    setFontSize(v);
                    if (v != null) {
                        if (firstQuestionOnScreenDataID == null)
                            firstQuestionOnScreenDataID = questionObject
                                    .getDataID();
                        // questionnaireLayout.addView(v,
                        // getElseLayoutParam());
                        if (questionObject != null
                                && questionObject.getText() != null
                                && Helper.getSystemURL() != null
                                && questionObject.getText().contains("<img")) {
                            questionnaireLayout.addView(v, getWebViewParam());
                        } else if (questionObject.getPictureFilename() != null
                                && questionObject.getPictureFilename()
                                .toLowerCase().endsWith(".mp4")) {
                            questionnaireLayout.addView(v);
                        } else
                            questionnaireLayout
                                    .addView(v, getElseLayoutParam());
                        tempId = v.getId();
                        // break;
                    }
                    if (Helper.comapreString(questionObject.getObjectType(),
                            "9")
                            || Helper.comapreString(
                            questionObject.getObjectType(), "10")) {
                        questionnaireLayout = checkForNextBtnVisibility(
                                questionnaireLayout, isPrev, isRefresh);
                        break;
                    }
                    // if (objectCount != listObjects.size() - 1
                    // && listObjects.get(objectCount + 1)
                    // .getListAutoValues() != null) {
                    // int ki = 0;
                    // ki++;
                    // break;
                    // }
                    // viewId = tempId;
                    // viewId = getViewId(viewId);
                }

            }

            questionnaireLayout = checkForNextBtnVisibility(
                    questionnaireLayout, isPrev, isRefresh);
            if (objectCount == size - 1)
                break;
            if (Helper.comapreString(listObjects.get(objectCount + 1)
                    .getObjectType(), "7")) {
                break;
            }

            if (Helper.comapreString(questionObject.getObjectType(), "1")
                    && (questionnaireLayout.getChildCount() > 0 || questionObject
                    .getDataID().length() != 3)) {
                if (firstQuestionOnScreenDataID == null)
                    firstQuestionOnScreenDataID = questionObject.getDataID();
                checkForNextBtnVisibility(questionnaireLayout, isPrev,
                        isRefresh);
                break;
            } else if (Helper
                    .comapreString(questionObject.getObjectType(), "1"))
                continue;

        }

        if (isHideAdditionalInfoSingleChoiceAnswers > 0) {
            View v = questionnaireLayout.findViewById(miLabelViewId);
            setFontSize(v);
            if (v != null && v.getClass().equals(TextView.class))
                v.setVisibility(View.GONE);
            v = questionnaireLayout.findViewById(miEditViewId);
            setFontSize(v);
            if (v != null && v.getClass().equals(EditText.class)) {
                EditText edit = (EditText) v;
                // edit.setText("");
                v.setVisibility(View.GONE);
            }
        }

        if (set.getShowTOC().equals("1") && objectCount < (size - 1)) {
            if (tmmpid > -1) {
                questionnaireLayout.addView(
                        displayLabel(Constants.QUESTIONNAIRE_JUMPTO_LBL),
                        getLayoutParam(tmmpid));
                questionnaireLayout.addView(displayJumptoDropdown(listString),
                        getLayoutParam(viewId - 1));
            } else {
                questionnaireLayout.addView(
                        displayLabel(Constants.QUESTIONNAIRE_JUMPTO_LBL),
                        getLayoutParam(viewId - 1));
                questionnaireLayout.addView(displayJumptoDropdown(listString),
                        getLayoutParam(viewId - 1));
            }

            tmmpid = -1;
        }

        if (questionnaireLayout.getChildCount() > 0) {
            ReleaseMemory();
            this.questionnaireLayout = (RelativeLayout) findViewById(R.id.sublayout);
            this.questionnaireLayout.addView(questionnaireLayout);
            this.lastQLayout = questionnaireLayout;
            View dullView = findViewById(R.id.view_transparent);
            if (dullView != null)
                dullView.setVisibility(RelativeLayout.GONE);
            isNextObj = true;
        } else if (posLayout.getVisibility() == View.VISIBLE) {
            isNextObj = true;
        } else if (Helper.comapreString(questionObject.getObjectType(), "1")) {
            isNextObj = true;
        } else if (!isRefresh) {
            pageCount--;
            viewOnPage = viewOnPage - skipObjCount;
            if (objectCount < (size - 1)) {

                nextImg.setVisibility(View.INVISIBLE);
                nextBtn.setVisibility(View.INVISIBLE);
            }
            showSubmitMenu = true;
            if (questionnaireLayout.getChildCount() == 0
                    && this.lastQLayout != null) {
                ReleaseMemory();
                this.questionnaireLayout.addView(this.lastQLayout);
                // dull color here
                View dullView = findViewById(R.id.view_transparent);
                if (dullView != null)
                    dullView.setVisibility(RelativeLayout.VISIBLE);
            }
        }

        if (questionObject != null && questionObject.getObjectType() != null
                && questionObject.getObjectType().equals("15")) {
            View dullView = findViewById(R.id.view_transparent);
            if (dullView != null)
                dullView.setVisibility(RelativeLayout.GONE);

        }

        if (this.lastbutton.equals("previous")) {

        } else {
            questionObject.setBackPointer(this.backPointer);
        }
        if (questionObject.getBackPointer() == null
                || questionObject.getBackPointer().length() == 0) {

            previousImg.setVisibility(View.INVISIBLE);
            previousBtn.setVisibility(RelativeLayout.INVISIBLE);
            updateProgressOnScreen(0);
        }
        if (isShowPreviousButtonDueToLastItem != null) {
            previousImg.setVisibility(View.VISIBLE);
            previousBtn.setVisibility(RelativeLayout.VISIBLE);
            questionObject.setBackPointer(isShowPreviousButtonDueToLastItem);
            isShowPreviousButtonDueToLastItem = null;
        }
        this.backPointer = firstQuestionOnScreenDataID;
        firstQuestionOnScreenDataID = null;
        sendMessage(QuestionnaireActivity.QUESTION_ON_SCREEN,
                getSavedAnswer(questionObject));

        // startListening();
        // customAlert(QuestionnaireActivity.this, questionObject.getDataID()
        // + "LOOPinfo=" +
        // questionObject.getLoopInfo()+"Display Condition="+questionObject.getObjectDisplayCondition());

    }

    private boolean isMiHidden(String miType) {
        if (miType.equals("11")
                || miType.equals("12")
                || miType.equals("13")
                || miType.equals("14")
                || miType.equals("15")) {
            return true;
        }
        return false;
    }


    private void updateProgressOnScreen(float i) {
        if (previousBtn.getVisibility() == RelativeLayout.INVISIBLE) i = 0;
        currentProgress = i;
//		View rl_filled=findViewById(R.id.progressbarfilled);
//		ViewGroup.LayoutParams lparams= rl_filled.getLayoutParams();
//		Display display = getWindowManager().getDefaultDisplay();
//		Point size = new Point();
//		getDisplay().getSize(size);
//		int width = size.x;
//		int height = size.y;
//		lparams.width=(int)(i*width);
        TextView txtProgress = (TextView) findViewById(R.id.txtpercent);
        txtProgress.setText(((int) (i * 100)) + "%");
//		rl_filled.setLayoutParams(lparams);
        CircularProgressBar circularProgressBar = (CircularProgressBar) circularProgress;
        int animationDuration = 1500; // 2500ms = 2,5s
        circularProgressBar.setProgressWithAnimation(((int) (i * 100)), animationDuration); // Default duration = 1500ms
    }

    private boolean isAnyAnswerVisible() {

        return false;
    }

    private String getCleanDataId(String dataID2) {

        return dataID2;
    }

    private void restoreCameraVideoGallery() {
        if (isRestoreCamera || isCamVidGalery == 1) {
            isRestoreCamera = false;
            isCamVidGalery = 0;
            cameraCase(restoreIntentData, false);
        } else if (isRestoreVideo || isCamVidGalery == 2) {
            isRestoreVideo = false;
            isCamVidGalery = 0;
            videoCase(restoreIntentData, false);
        } else if (isRestoreGallery) {
            isRestoreGallery = false;
            galleryCase(restoreIntentData, false);
        } else if (isRestoreCropping) {
            isRestoreCropping = false;
            croppingCase(restoreIntentData, false);
        }

    }

    private void videoCase(Intent data, boolean b) {
        try {
            if (checkFileExists(path_Camera)) {
                customToast("File saved properly at:" + path_Camera, true,
                        Toast.LENGTH_SHORT);
                File file = new File(path_Camera);
                uri_Camera = Uri.fromFile(file);

            } else {
                if (data != null && data.getData() != null) {
                    path_Camera = getRealPathFromURI(data.getData());
                    File file = new File(path_Camera);
                    uri_Camera = Uri.fromFile(file);
                    customToast("File saved properly at:" + path_Camera, true,
                            Toast.LENGTH_SHORT);

                } else
                    customToast("Unable to save file at:" + path_Camera, false,
                            Toast.LENGTH_SHORT);
            }

            if (uri_Camera != null) {
                myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                {
                    String dataid = null;
                    if (questionObject != null
                            && questionObject.getDataID() != null
                            && isLastAttachment == false)
                        dataid = questionObject.getDataID();
                    else
                        isLastAttachment = true;

                    if (dataid != null && dataid.contains("^")) {
                        dataid += "#@" + questionObject.getLoopInfo();
                    }
                    filePathDataID fId = new filePathDataID();
                    fId.setDataID(dataid, b);

                    fId.setFilePath(path_Camera);
                    fId.setUPLOAD_FILe_ORDERID(order.getOrderID());
                    fId.setUPLOAD_FILe_CLIENT_NAME(order.getClientName());
                    fId.setUPLOAD_FILe_BRANCH_NAME(order.getBranchFullname());
                    fId.setUPLOAD_FILe_DATE(sdf.format(new Date()));

                    fId.setUPLOAD_FILe_PRODUCTID(currentProductId);
                    fId.setUPLOAD_FILe_LOCATIONID(currentLocationId);
                    uploadList.add(fId);
                    uploadFileList.add(uri_Camera);
                    uploadFileListDataId.add(questionObject.getDataID());
                    String[] items = new String[uploadFileList.size()];
                    if (isLastAttachment == true
                            && attach_btn_view != null
                            && attach_btn_view.getVisibility() == RelativeLayout.VISIBLE) {
                        ShowAttachedFiles();
                    }
                }
            } else {

            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            // onCameraActivityResult(requestCode, resultCode, data);
        }

    }

    private ArrayList<Objects> checkForAllConditions(ArrayList<Objects> objList) {
        ArrayList<Objects> newTitles = new ArrayList<Objects>();
        for (int j = 0; j < objList.size(); j++) {
            if (IsObjectdisplaybyCondition(objList.get(j)
                    .getObjectDisplayCondition())) {

                newTitles.add(objList.get(j));
            }
        }

        return newTitles;
    }

    private boolean isSameCustomLink(ArrayList<Objects> groupList) {
        boolean isSame = true;
        String customLink = null;
        for (int i = 0; i < groupList.size(); i++) {
            if (customLink == null)
                customLink = groupList.get(i).getCustomScaleLink();
            else {
                if (!customLink.equals(groupList.get(i).getCustomScaleLink())) {
                    isSame = false;
                    break;
                }
            }
        }
        return isSame;
    }

    private ArrayList<Quota> addQuota0IfNotThere(ArrayList<Quota> qList,
                                                 Quota quota) {
        Boolean b = false;
        for (int i = 0; i < qList.size(); i++) {
            if (quota.getsquoID().equals(qList.get(i).getsquoID())) {
                b = true;
            } // if Ends
        }// Loop Ends
        if (b == false) {
            qList.add(quota);
        }
        return qList;
    }

    private ArrayList<Quota> getQuota(String dataId) {
        ArrayList<Quota> cQuotas = new ArrayList<Quota>();
        QuestionnaireData d = getSingleAnswer(dataId);
        if (d != null && d.getAnswersList() != null && quotaQuestions != null
                && quotaQuestions.size() > 0) {
            for (int i = 0; i < d.getAnswersList().size(); i++) {
                if (d.getAnswersList().get(i) != null
                        && d.getAnswersList().get(i).getAnswerID() != null) {
                    for (int j = 0; j < quotaQuestions.size(); j++) {
                        String id = quotaQuestions.get(j).getAnswerLink();
                        if (id != null
                                && id.equals(d.getAnswersList().get(i)
                                .getAnswerID())) {
                            cQuotas = addQuota0IfNotThere(cQuotas,
                                    quotaQuestions.get(j).parentQuota);
                            // cQuotas.add(quotaQuestions.get(j).parentQuota);
                        }
                    }
                }
            }
        }
        return cQuotas;
    }

    private ArrayList<Quota> getValidateQuota(String dataId,
                                              ArrayList<Quota> currentQuotas) {
        ArrayList<Quota> cQuotas = new ArrayList<Quota>();
        if (currentQuotas != null) {
            for (int j = 0; j < currentQuotas.size(); j++) {
                ArrayList<SurveyQnA> qnas = currentQuotas.get(j).getqnas();
                if (qnas != null) {

                    for (int k = 0; k < qnas.size(); k++) {

                        if (qnas.get(k).getDataLink() != null
                                && qnas.get(k).getDataLink().equals(dataId)) {

                            cQuotas.add(currentQuotas.get(j));
                        }
                    }
                }
            }
        }
        return cQuotas;
    }

    private ArrayList<SurveyQnA> getQuotaQuestions(String dataID2) {
        ArrayList<SurveyQnA> returnList = new ArrayList<SurveyQnA>();
        if (set.currentSurveys != null) {
            for (int i = 0; i < set.currentSurveys.size(); i++) {
                if (set.currentSurveys.get(i) != null
                        && set.currentSurveys.get(i).getListQuotas() != null) {
                    ArrayList<Quota> quotaLists = set.currentSurveys.get(i)
                            .getListQuotas();
                    for (int j = 0; j < quotaLists.size(); j++) {
                        if (quotaLists.get(j) != null
                                && quotaLists.get(j).getqnas() != null) {
                            ArrayList<SurveyQnA> qLists = quotaLists.get(j)
                                    .getqnas();
                            for (int k = 0; k < qLists.size(); k++) {
                                if (qLists.get(k) != null
                                        && qLists.get(k).getDataLink() != null
                                        && qLists.get(k).getDataLink()
                                        .equals(dataID2)) {
                                    qLists.get(k).parentQuota = quotaLists
                                            .get(j);
                                    returnList.add(qLists.get(k));
                                }
                            }
                        }
                    }
                }
            }
        }
        return returnList;
    }

    private RelativeLayout prepareToggleButtons(
            RelativeLayout layout_shelf_study) {

        toggles = new POS_Toggles(false);
        toggles.setOnListShownListener(new onListShown() {

            @Override
            public void onDalogClose() {
                showSelectedDataPOS();
            }
        });
        // toggles.setTextPreview((TextView) findViewById(R.id.txt_product));
        // toggles.setTextExtra((TextView) findViewById(R.id.txt_extra));
        ImageView prviewImg = (ImageView) findViewById(R.id.btn_preview);
        Helper.changeImageViewSrc(prviewImg, getApplicationContext());
        toggles.setimgPreview(prviewImg, pos_shelf_item,
                QuestionnaireActivity.this);

        toggles.tglCount = (ToggleButton) findViewById(R.id.tbl_count);
        toggles.tglPrice = (ToggleButton) findViewById(R.id.tbl_price);
        toggles.tglExpiration = (ToggleButton) findViewById(R.id.tbl_expiration);
        toggles.tglNote = (ToggleButton) findViewById(R.id.tbl_note);
        toggles.tglPicture = (ToggleButton) findViewById(R.id.tbl_picture);

        toggles.layout_Count = (RelativeLayout) findViewById(R.id.layout_Count);
        toggles.layout_Price = (RelativeLayout) findViewById(R.id.layout_Price);
        toggles.layout_Expiration = (RelativeLayout) findViewById(R.id.layout_Expiration);
        toggles.layout_Note = (RelativeLayout) findViewById(R.id.layout_Note);
        toggles.layout_Picture = (RelativeLayout) findViewById(R.id.layout_Picture);
        toggles.layout_none = (RelativeLayout) findViewById(R.id.layout_none);

        toggles.tglCount.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                toggles.currentToggle = EnumToggleButton.COUNT;
                toggles.selectToggleButton(false);
                if (getSDK() >= 14) {
                    txtAddQuantity.requestFocus();
                    txtAddQuantity.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            if (selectedProduct > 0 && selectedLocation > 0) {
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.showSoftInput(txtAddQuantity, 0);
                            }
                        }
                    }, 50);
                }
            }
        });

        toggles.tglPicture.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                toggles.currentToggle = EnumToggleButton.PICTURE;
                toggles.selectToggleButton(false);
                try {

                    txtAddPrice.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);
                } catch (Exception ex) {

                }
                try {
                    txtAddQuantity.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);
                } catch (Exception ex) {

                }
                try {
                    txtAddNote.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);

                } catch (Exception ex) {

                }
            }
        });

        toggles.tglPrice.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                toggles.currentToggle = EnumToggleButton.PRICE;
                toggles.selectToggleButton(false);
                if (getSDK() >= 14) {
                    txtAddPrice.requestFocus();
                    txtAddPrice.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            if (selectedProduct > 0 && selectedLocation > 0) {
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.showSoftInput(txtAddPrice, 0);
                            }
                        }
                    }, 50);
                }
            }
        });

        toggles.tglNote.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                toggles.currentToggle = EnumToggleButton.NOTE;
                toggles.selectToggleButton(false);
                if (getSDK() >= 14) {
                    txtAddNote.requestFocus();
                    txtAddNote.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            if (selectedProduct > 0 && selectedLocation > 0) {
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.showSoftInput(txtAddNote, 0);
                            }
                        }
                    }, 50);
                }
            }
        });

        toggles.tglExpiration.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                toggles.currentToggle = EnumToggleButton.EXPIRATION;
                toggles.selectToggleButton(false);
                try {

                    txtAddPrice.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);
                } catch (Exception ex) {

                }
                try {
                    txtAddQuantity.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);
                } catch (Exception ex) {

                }
                try {
                    txtAddNote.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                            keyboard.hideSoftInputFromWindow(
                                    txtAddPrice.getWindowToken(), 0);
                        }
                    }, 50);

                } catch (Exception ex) {

                }
            }
        });

        toggles.currentToggle = EnumToggleButton.COUNT;
        toggles.selectToggleButton(false);

        return layout_shelf_study;
    }

    private RelativeLayout prepareSubSectionPrice(
            RelativeLayout layout_shelf_study) {
        if (pos_shelf_item.price_item == null) {
            pos_shelf_item.price_item = new Price();
        }
        Button btnAddPrice = (Button) layout_shelf_study
                .findViewById(R.id.btn_add_price);
        txtAddPrice = (EditText) layout_shelf_study
                .findViewById(R.id.edit_price);
        txtAddPrice.setText("");
        txtAddPrice.setOnLongClickListener(new OnLongClickListener() {

            @Override
            public boolean onLongClick(View arg0) {
                Calculation c = new Calculation((EditText) arg0);
                c.makeDialog(QuestionnaireActivity.this);
                return false;
            }
        });
        txtAverage = (TextView) findViewById(R.id.txt_average);
        btnAddPrice.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                try {

                    if (txtAddPrice.getText().toString().equals("")) {
                        ShowErrorMessage(getString(R.string.pos_error_enter));
                        return;
                    }

                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                        return;
                    }

                    pos_shelf_item.price_item.AddPriceITem(
                            Double.parseDouble(txtAddPrice.getText().toString()),
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);

                    if (pos_shelf_item.listProducts != null
                            && selectedProduct > 0) {
                        txtAverage.setText(Helper
                                .makeHtmlString(getString(R.string.pos_average))
                                + " "
                                + +pos_shelf_item.price_item
                                .getAveragePrice(pos_shelf_item.listProducts
                                        .get(selectedProduct - 1)
                                        .getProductID()));
                        txtAddPrice.setText("");
                        txtAddPrice.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddPrice.getWindowToken(), 0);
                            }
                        }, 50);

                    }

                    // InputMethodManager imm =
                    // (InputMethodManager)this.getSystemService(Service.INPUT_METHOD_SERVICE);
                } catch (Exception ex) {

                }
            }
        });
        txtAverage.setText(Helper
                .makeHtmlString(getString(R.string.pos_average) + "  0"));
        if (pos_shelf_item.listProducts != null && selectedProduct > 0) {
            txtAverage
                    .setText(Helper.makeHtmlString(getString(R.string.pos_average)
                            + " "
                            + +pos_shelf_item.price_item
                            .getAveragePrice(pos_shelf_item.listProducts
                                    .get(selectedProduct - 1)
                                    .getProductID())));
        }
        return layout_shelf_study;
    }

    private RelativeLayout prepareSubSectionNote(
            RelativeLayout layout_shelf_study) {
        if (pos_shelf_item.note_item == null) {
            pos_shelf_item.note_item = new Note();
        }
        Button btnAddNote = (Button) layout_shelf_study
                .findViewById(R.id.btn_add_note);
        txtAddNote = (EditText) layout_shelf_study.findViewById(R.id.edit_note);
        txtAddNote.setText("");
        btnAddNote.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                try {
                    if (txtAddNote.getText().toString().equals("")) {
                        ShowErrorMessage(getString(R.string.pos_error_enter));
                        return;
                    }

                    if (selectedProduct >= 1 && selectedLocation >= 1) {
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                        return;
                    }

                    pos_shelf_item.note_item.AddNoteITem(
                            txtAddNote.getText().toString(),
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);
                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);

                        txtAddNote.setText("");
                        txtAddNote.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddNote.getWindowToken(), 0);
                            }
                        }, 50);
                    }

                } catch (Exception ex) {

                }
            }
        });
        return layout_shelf_study;
    }

    private RelativeLayout prepareSubSectionExpiration(
            RelativeLayout layout_shelf_study) {
        if (pos_shelf_item.note_item == null) {
            pos_shelf_item.note_item = new Note();
        }
        Button btnAddExpiration = (Button) layout_shelf_study
                .findViewById(R.id.btn_add_date);
        txtAddExpiration = (DateTimePicker) layout_shelf_study
                .findViewById(R.id.DateTimePicker);
        txtExpiry = (TextView) layout_shelf_study
                .findViewById(R.id.txt_expiration);

        btnAddExpiration.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                try {
                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                    }

                    String month = (txtAddExpiration.getMonthInt()) + "";
                    if (month.length() == 1)
                        month = "0" + month;
                    String day = txtAddExpiration.getDay() + "";
                    if (day.length() == 1)
                        day = "0" + day;
                    pos_shelf_item.expiration_item.AddExpirationITem(
                            txtAddExpiration.getYear() + "-" + month + "-"
                                    + day,
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);

                    ExpirationItem currentItem = pos_shelf_item.expiration_item
                            .getCurrentItem(
                                    pos_shelf_item.listProducts.get(
                                            selectedProduct - 1).getProductID(),
                                    pos_shelf_item.listProductLocations.get(
                                            selectedLocation - 1)
                                            .getProdLocationID());

                    currentItem.setDay(txtAddExpiration.getDay());
                    currentItem.setMonth(txtAddExpiration.getMonthInt() + 1);
                    currentItem.setYear(txtAddExpiration.getYear());

                    txtExpiry.setText(Helper.makeHtmlString(getResources()
                            .getString(R.string.pos_selected_date)
                            + +txtAddExpiration.getYear()
                            + "-"
                            + month
                            + "-"
                            + day));
                } catch (Exception ex) {
                    String str = "";
                    str += "";
                }
            }
        });
        return layout_shelf_study;
    }

    private RelativeLayout prepareSubSectionPicture(
            RelativeLayout layout_shelf_study) {
        if (pos_shelf_item.picture_item == null) {
            pos_shelf_item.picture_item = new Picture();
        }
        ImageView btnCamera = (ImageView) layout_shelf_study
                .findViewById(R.id.img_camera);

        Helper.changeImageViewSrc(btnCamera, getApplicationContext());

        ImageView btnGallery = (ImageView) layout_shelf_study
                .findViewById(R.id.img_gallery);

        Helper.changeImageViewSrc(btnGallery, getApplicationContext());

        btnCamera.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                openCamera(CAMERA_PIC_REQUEST, false);
                currentLocationId = pos_shelf_item.listProductLocations.get(
                        selectedLocation - 1).getProdLocationID();
                currentProductId = pos_shelf_item.listProducts
                        .get(selectedProduct - 1).getProductID();
            }
        });
        btnGallery.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                showFileChooser(false);
                currentLocationId = pos_shelf_item.listProductLocations.get(
                        selectedLocation - 1).getProdLocationID();
                currentProductId = pos_shelf_item.listProducts
                        .get(selectedProduct - 1).getProductID();
            }
        });

        return layout_shelf_study;
    }

    private void ShowErrorMessage(String str) {
        Toast.makeText(QuestionnaireActivity.this, str, Toast.LENGTH_SHORT)
                .show();
    }

    private RelativeLayout prepareSubSectionQuantity(
            RelativeLayout layout_shelf_study) {
        if (pos_shelf_item.quantity_item == null) {
            pos_shelf_item.quantity_item = new Quantity(
                    QuestionnaireActivity.this);
        }

        final EditText valueOne = (EditText) layout_shelf_study
                .findViewById(R.id.edit_length);
        // valueOne.setOnLongClickListener(new OnLongClickListener() {
        //
        // @Override
        // public boolean onLongClick(View arg0) {
        // Calculation c = new Calculation((EditText) arg0);
        // c.makeDialog(QuestionnaireActivity.this);
        // return false;
        // }
        // });

        final EditText valueTwo = (EditText) layout_shelf_study
                .findViewById(R.id.edit_width);
        // valueTwo.setOnLongClickListener(new OnLongClickListener() {
        //
        // @Override
        // public boolean onLongClick(View arg0) {
        // Calculation c = new Calculation((EditText) arg0);
        // c.makeDialog(QuestionnaireActivity.this);
        // return false;
        // }
        // });

        ImageView btnMultiply = (ImageView) layout_shelf_study
                .findViewById(R.id.btn_math_equals);
        ImageView btnAddQuantity = (ImageView) layout_shelf_study
                .findViewById(R.id.btn_add_quantity);
        ImageView btnSubQuantity = (ImageView) layout_shelf_study
                .findViewById(R.id.btn_sub_quantity);

        txtAddQuantity = (EditText) layout_shelf_study
                .findViewById(R.id.edit_count);
        // txtAddQuantity.setOnLongClickListener(new OnLongClickListener() {
        //
        // @Override
        // public boolean onLongClick(View arg0) {
        // Calculation c = new Calculation((EditText) arg0);
        // c.makeDialog(QuestionnaireActivity.this);
        // return false;
        // }
        // });

        txtAddQuantity.setText("");
        txtCount = (TextView) findViewById(R.id.txt_total);
        btnSubQuantity.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                try {
                    if (txtAddQuantity.getText().toString().equals("")) {
                        ShowErrorMessage(getString(R.string.pos_error_enter));
                        return;
                    }

                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                        return;
                    }
                    String data = txtAddQuantity.getText().toString();

                    int output = pos_shelf_item.quantity_item.SubQuantityITem(
                            Integer.parseInt(txtAddQuantity.getText()
                                    .toString()),
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);
                    if (output > -1) {
                        String dataa = getResources().getString(
                                R.string.pos_error_report);
                        dataa += output
                                + getResources().getString(
                                R.string.pos_error_report2);
                        Toast.makeText(QuestionnaireActivity.this, dataa,
                                Toast.LENGTH_SHORT).show();
                    } else if (pos_shelf_item.listProducts != null
                            && selectedProduct > 0) {
                        txtCount.setText(Helper.makeHtmlString(getResources()
                                .getString(R.string.pos_total)
                                + " "
                                + pos_shelf_item.quantity_item
                                .getTotalCount(pos_shelf_item.listProducts
                                        .get(selectedProduct - 1)
                                        .getProductID())));
                        txtAddQuantity.setText("");
                        txtAddQuantity.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddQuantity.getWindowToken(), 0);
                            }
                        }, 50);
                    }
                } catch (Exception ex) {

                }

            }
        });

        btnMultiply.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                try {
                    if (valueTwo.getText().toString().equals("")
                            || valueOne.getText().toString().equals("")) {
                        ShowErrorMessage(getString(R.string.pos_error_enter));
                        return;
                    }

                    if (selectedProduct >= 1 && selectedLocation >= 1) {
                        //
                        // toggles.imgPreview
                        // .setVisibility(RelativeLayout.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                    }

                    int val1 = Integer.parseInt(valueOne.getText().toString());

                    int val2 = Integer.parseInt(valueTwo.getText().toString());

                    valueTwo.setText("");
                    valueOne.setText("");

                    try {
                        valueOne.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddQuantity.getWindowToken(), 0);
                            }
                        }, 50);
                    } catch (Exception ex) {
                    }
                    try {
                        valueTwo.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddQuantity.getWindowToken(), 0);
                            }
                        }, 50);
                    } catch (Exception ex) {
                    }
                    int answer = val1 * val2;

                    txtAddQuantity.setText(Helper.makeHtmlString(answer + ""));
                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                        return;
                    }
                    pos_shelf_item.quantity_item.AddQuantityITem(
                            Integer.parseInt(txtAddQuantity.getText()
                                    .toString()),
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);
                    if (pos_shelf_item.listProducts != null
                            && selectedProduct > 0) {
                        txtCount.setText(Helper.makeHtmlString(getString(R.string.pos_total)
                                + " "
                                + +pos_shelf_item.quantity_item
                                .getTotalCount(pos_shelf_item.listProducts
                                        .get(selectedProduct - 1)
                                        .getProductID())));
                        txtAddQuantity.setText("");
                        txtAddQuantity.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddQuantity.getWindowToken(), 0);
                            }
                        }, 50);
                    }
                } catch (Exception ex) {

                }
            }
        });

        btnAddQuantity.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                try {
                    if (txtAddQuantity.getText().toString().equals("")) {
                        ShowErrorMessage(getString(R.string.pos_error_enter));
                        return;
                    }

                    if (selectedProduct >= 1 && selectedLocation >= 1) {

                        toggles.imgPreview.setVisibility(View.VISIBLE);
                    } else {
                        ShowErrorMessage(getString(R.string.pos_error_enter_product_location));
                        return;
                    }

                    pos_shelf_item.quantity_item.AddQuantityITem(
                            Integer.parseInt(txtAddQuantity.getText()
                                    .toString()),
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID(),
                            null);
                    if (pos_shelf_item.listProducts != null
                            && selectedProduct > 0) {
                        txtCount.setText(Helper.makeHtmlString(getString(R.string.pos_total)
                                + " "
                                + +pos_shelf_item.quantity_item
                                .getTotalCount(pos_shelf_item.listProducts
                                        .get(selectedProduct - 1)
                                        .getProductID())));
                        txtAddQuantity.setText("");
                        txtAddQuantity.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                // TODO Auto-generated method stub
                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                keyboard.hideSoftInputFromWindow(
                                        txtAddQuantity.getWindowToken(), 0);
                            }
                        }, 50);
                    }
                } catch (Exception ex) {

                }
            }
        });
        txtCount.setText(Helper.makeHtmlString(getString(R.string.pos_total)
                + " 0"));
        if (pos_shelf_item.listProducts != null && selectedProduct > 0) {
            txtCount.setText(Helper
                    .makeHtmlString(getString(R.string.pos_total)
                            + " "
                            + +pos_shelf_item.quantity_item
                            .getTotalCount(pos_shelf_item.listProducts
                                    .get(selectedProduct - 1)
                                    .getProductID())));
            txtCount.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    keyboard.hideSoftInputFromWindow(txtCount.getWindowToken(),
                            0);
                }
            }, 50);
        }
        return layout_shelf_study;
    }

    private RelativeLayout prepareSubSections(RelativeLayout layout_shelf_study) {

        layout_shelf_study = prepareSubSectionPrice(layout_shelf_study);
        layout_shelf_study = prepareSubSectionQuantity(layout_shelf_study);
        layout_shelf_study = prepareSubSectionNote(layout_shelf_study);
        layout_shelf_study = prepareSubSectionExpiration(layout_shelf_study);
        layout_shelf_study = prepareSubSectionPicture(layout_shelf_study);
        return layout_shelf_study;
    }

    int selectedBranch = -1;

    private Spinner getBranchDropDown(int viewidd, Objects questionObject) {
        Spinner s = new Spinner(QuestionnaireActivity.this);

        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());

        String[] array_spinner = new String[listBranches.size() + 1];
        array_spinner[0] = "Not Selected";

        for (int i = 0; i < listBranches.size(); i++) {
            array_spinner[i + 1] = Helper.stripHtml(listBranches.get(i)
                    .getBranchName());
            if (qd != null
                    && qd.getBranchID().equals(
                    listBranches.get(i).getBranchID())) {
                if (selectedBranch == -1)
                    selectedBranch = i + 1;
            }
        }

        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);
        adapter.setDropDownViewResource(UIHelper.getSpinnerLayoutSize(
                QuestionnaireActivity.this, modeSelect));
        s.setAdapter(adapter);
        s.setId(viewidd);
        if (selectedBranch == -1)
            selectedBranch = 0;
        s.setSelection(selectedBranch);
        s.setOnItemSelectedListener(new OnItemSelectedListener() {

            @Override
            public void onItemSelected(AdapterView<?> arg0, View arg1,
                                       int arg2, long arg3) {
                // TODO Auto-generated method stub
                // Toast.makeText(QuestionnaireActivity.this, arg2+" "+arg3,
                // Toast.LENGTH_SHORT).show();
                selectedBranch = arg2;
                if (spinnerFirstTime)
                    spinnerFirstTime = false;
                else if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();
                    spinnerFirstTime = true;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> arg0) {
                // TODO Auto-generated method stub

            }
        });
        changeSpinnerFontSize(s);
        return s;
    }

    public void goNextAfterDelay() {
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                // Do something after 100ms
                isNextButton = true;
                nextbtnClickListener();
            }
        }, 500);
    }

    int selectedWorker = -1;

    private ListView getBranchListView(int viewidd, Objects questionObject) {

        final ListView s = new ListView(QuestionnaireActivity.this);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        final String[] array_spinner = new String[listBranches.size() + 1];
        array_spinner[0] = "Not Selected";

        for (int i = 0; i < listBranches.size(); i++) {

            array_spinner[i + 1] = Helper.stripHtml(listBranches.get(i)
                    .getBranchName() + listBranches.get(i).getDistanceKms());
            String workerId = listBranches.get(i).getBranchID();

            if (qd != null && qd.getBranchID() != null
                    && qd.getBranchID().equals(workerId)) {
                if (selectedBranch == -1)
                    selectedBranch = i + 1;
            }
        }
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);

        s.setAdapter(adapter);
        s.setBackgroundColor(Color.parseColor("#F0F0F0"));
        int[] colors = {Color.parseColor("#ffffff"),
                Color.parseColor("#ffffff"), Color.parseColor("#ffffff")};
        s.setDivider(new GradientDrawable(Orientation.RIGHT_LEFT, colors));
        s.setDividerHeight(2);
        if (selectedBranch == -1)
            selectedBranch = 0;
        workerListViewListener = -1;
        if (array_spinner[selectedBranch].toLowerCase().equals("not selected")) {
            branchEditText.setText("");
            branchEditText.setHint(array_spinner[selectedBranch]);
        } else
            branchEditText.setText(Helper
                    .makeHtmlString(array_spinner[selectedBranch]));
        s.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {

                try {
                    InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputManager.hideSoftInputFromWindow(getCurrentFocus()
                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                } catch (Exception ex) {

                }
                if (selectedBranch != arg2)
                    selectedWorker = -1;

                selectedBranch = arg2;
                if (spinnerFirstTime)
                    spinnerFirstTime = false;
                if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();
                    // nextbtnClickListener();
                    spinnerFirstTime = true;
                }
                workerListViewListener = -1;

                branchListView.setVisibility(View.GONE);
                workerBranchImage.setImageDrawable(getResources().getDrawable(
                        R.drawable.down_btn));

                for (int i = 0; i < array_spinner.length; i++) {
                    final String text = ((TextView) arg1).getText().toString();
                    if (array_spinner[i].equals(text)) {
                        selectedBranch = i;
                    }
                }
                if (array_spinner[selectedBranch].toLowerCase().equals(
                        "not selected")) {
                    branchEditText.setText("");
                    branchEditText.setHint(array_spinner[selectedBranch]);
                } else
                    branchEditText.setText(Helper
                            .makeHtmlString(array_spinner[selectedBranch]));
            }

        });
        return s;
    }

    private ListView getWorkerListView(int viewidd, Objects questionObject) {

        listWorkers = filterWorkers(listWorkers, selectedBranchID);

        final ListView s = new ListView(QuestionnaireActivity.this);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        int size = listWorkers.size();
        if (listWorkers.size() == 1
                && listWorkers.get(0).getWorkerName() == null)
            size = 0;
        final String[] array_spinner = new String[size + 1];
        array_spinner[0] = "Not Selected";

        for (int i = 0; i < listWorkers.size(); i++) {
            if (listWorkers.get(i).getWorkerName() == null)
                continue;
            array_spinner[i + 1] = Helper.stripHtml(listWorkers.get(i)
                    .getWorkerName());
            String workerId = listWorkers.get(i).getWorkerID();

            if (qd != null && qd.getWorkerID() != null
                    && qd.getWorkerID().equals(workerId)) {
                if (selectedWorker == -1)
                    selectedWorker = i + 1;
            }
        }
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);

        s.setAdapter(adapter);
        s.setBackgroundColor(Color.parseColor("#F0F0F0"));
        int[] colors = {Color.parseColor("#ffffff"),
                Color.parseColor("#ffffff"), Color.parseColor("#ffffff")};
        s.setDivider(new GradientDrawable(Orientation.RIGHT_LEFT, colors));
        s.setDividerHeight(2);
        if (selectedWorker == -1 || array_spinner.length <= selectedWorker)
            selectedWorker = 0;
        workerListViewListener = -1;
        if (array_spinner[selectedWorker].toLowerCase().equals("not selected")) {
            workerEditText.setText("");
            workerEditText.setHint(array_spinner[selectedWorker]);
        } else
            workerEditText.setText(Helper
                    .makeHtmlString(array_spinner[selectedWorker]));
        s.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {
                InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);

                try {
                    inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputManager.hideSoftInputFromWindow(getCurrentFocus()
                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                } catch (Exception ex) {

                }
                selectedWorker = arg2;
                if (spinnerFirstTime)
                    spinnerFirstTime = false;
                if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();

                    spinnerFirstTime = true;
                }
                workerListViewListener = -1;
                workerListView.setVisibility(View.GONE);
                workerBranchImage.setImageDrawable(getResources().getDrawable(
                        R.drawable.down_btn));

                for (int i = 0; i < array_spinner.length; i++) {
                    final String text = ((TextView) arg1).getText().toString();
                    if (array_spinner[i].equals(text)) {
                        selectedWorker = i;
                    }
                }
                if (array_spinner[selectedWorker].toLowerCase().equals(
                        "not selected")) {
                    workerEditText.setText("");
                    workerEditText.setHint(array_spinner[selectedWorker]);
                } else
                    workerEditText.setText(Helper
                            .makeHtmlString(array_spinner[selectedWorker]));
            }

        });
        return s;
    }

    int selectedSimple = -1;
    Spanned[] array_spinner = null;

    private ListView getSimpleListView(ArrayList<Answers> answers, int viewidd,
                                       Objects questionObject) {

        ArrayList<Answers> listAnswersNew = new ArrayList<Answers>();
        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answer = listAnswers.get(ansCount);

            if (ansCount == 0) {
                if (answer.getAnswer().equalsIgnoreCase("Not filled")
                        || answer
                        .getAnswer()
                        .equalsIgnoreCase(
                                "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                    // Answers tempanswers =
                    // listAnswers.get(listAnswers.size()-1);
                    // listAnswers.set(0, tempanswers);
                    listAnswers.remove(answer);
                    listAnswers.add(answer);
                    answer = listAnswers.get(ansCount);
                    // tempanswers = null;rad
                }
            }

            if (answer.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answer
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }
            listAnswersNew.add(answer);
        }
        answers = listAnswers = listAnswersNew;

        int offset = 0;
        int size = answers.size();
        final ListView s = new ListView(QuestionnaireActivity.this);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());

        if (IsMandatory) {
            offset = 1;
            size++;
        }
        if (size == 0)
            return s;
        array_spinner = new Spanned[size];
        if (offset == 1)
            array_spinner[0] = Helper.makeHtmlString("Not Selected");

        for (int i = 0; i < answers.size(); i++) {
            array_spinner[i + offset] = Helper.makeHtmlString(answers.get(i)
                    .getAnswer());
            // String workerId = answers.get(i).getAnswerID();
            //
            // if (qd != null && qd.getWorkerID() != null
            // && qd.getWorkerID().equals(workerId)) {
            // if (selectedWorker == -1)
            // selectedWorker = i + 1;
            // }
        }
        // if (qd != null)
        selectedSimple = showDropdownAnswer(qd, answers, IsMandatory);
        // else
        // selectedSimple = 0;
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);

        s.setAdapter(adapter);
        s.setBackgroundColor(Color.parseColor("#F0F0F0"));
        int[] colors = {Color.parseColor("#ffffff"),
                Color.parseColor("#ffffff"), Color.parseColor("#ffffff")};
        s.setDivider(new GradientDrawable(Orientation.RIGHT_LEFT, colors));
        s.setDividerHeight(2);
        if (selectedSimple == -1)
            selectedSimple = 0;
        simpleListViewListener = -1;
        if (array_spinner[selectedSimple].toString().toLowerCase()
                .equals("not selected")) {
            simpleEditText.setText("");
            simpleEditText.setHint(array_spinner[selectedSimple]);
        } else
            simpleEditText.setText(array_spinner[selectedSimple]);
        s.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {

                try {
                    InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputManager.hideSoftInputFromWindow(getCurrentFocus()
                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                } catch (Exception ex) {

                }
                selectedSimple = arg2;
                if (spinnerFirstTime) {
                    spinnerFirstTime = false;

                }
                if (IsMandatory
                        && !array_spinner[selectedSimple].toString()
                        .toLowerCase().equals("not selected")) {
                    if (validateadditionjumpapramsRadioButton(arg2 - 1)) {
                        nextbtnClickListener();
                        spinnerFirstTime = true;
                    }

                } else if (IsMandatory
                        && array_spinner[selectedSimple].toString()
                        .toLowerCase().equals("not selected")) {
                    if (miWholeView != null)
                        miWholeView.setVisibility(RelativeLayout.VISIBLE);
                    if (textbox != null)
                        textbox.setVisibility(RelativeLayout.VISIBLE);
                    if (btextbox != null)
                        btextbox.setVisibility(RelativeLayout.VISIBLE);

                    if (mitv != null) {
                        mitv.setVisibility(RelativeLayout.VISIBLE);
                    }
                } else if (validateadditionjumpapramsRadioButton(arg2)) {
                    goNextAfterDelay();
                    spinnerFirstTime = true;
                }

                simpleListViewListener = -1;
                s.setVisibility(View.GONE);
                simpleBranchImage.setImageDrawable(getResources().getDrawable(
                        R.drawable.down_btn));

                for (int i = 0; i < array_spinner.length; i++) {
                    final String text = ((TextView) arg1).getText().toString();
                    if (array_spinner[i].toString().equals(text)) {
                        selectedSimple = i;
                    }
                }
                if (simpleEditText != null
                        && array_spinner[selectedSimple].toString()
                        .toLowerCase().equals("not selected")) {
                    simpleEditText.setText("");
                    simpleEditText.setHint(array_spinner[selectedSimple]);
                } else if (simpleEditText != null)
                    simpleEditText.setText((array_spinner[selectedSimple]));

                // if (validateadditionjumpapramsRadioButton(arg2))
                // nextbtnClickListener();
            }

        });

        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            s.setEnabled(false);
        return s;
    }

    int selectedLocation = -1;
    int selectedProduct = -1;
    private EditText edit_purchase_details = null;
    private EditText edit_purchase_payment = null;
    private EditText edit_purchase_description = null;
    private EditText edit_service_invoice_number = null;
    private EditText edit_service_payment = null;
    private EditText edit_service_description = null;
    private EditText edit_transportation_payment = null;
    private EditText edit_transportation_description = null;
    protected boolean isLastAttachment;
    private boolean lastFileUploadAlreadyAdded = false;
    private ArrayList<InProgressFileData> serverSideFiles;
    private ArrayList<InProgressFileData> lastserverSideFiles;

    private ListView getLocationListView(final ListView locationListView,
                                         int viewidd, Objects questionObject) {

        final ListView s = locationListView;
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        final String[] array_spinner = new String[pos_shelf_item.listProductLocations
                .size() + 1];
        array_spinner[0] = getString(R.string.pos_select_location);

        for (int i = 0; i < pos_shelf_item.listProductLocations.size(); i++) {
            array_spinner[i + 1] = Helper
                    .stripHtml(pos_shelf_item.listProductLocations.get(i)
                            .getProductLocation());
            String productId = pos_shelf_item.listProductLocations.get(i)
                    .getProdLocationID();

            // if (qd != null && qd.getWorkerID() != null
            // && qd.getWorkerID().equals(workerId)) {
            // if (selectedProduct == -1)
            // selectedProduct = i + 1;
            // }
        }
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);

        s.setAdapter(adapter);
        s.setBackgroundColor(Color.parseColor("#F0F0F0"));
        int[] colors = {Color.parseColor("#ffffff"),
                Color.parseColor("#ffffff"), Color.parseColor("#ffffff")};
        s.setDivider(new GradientDrawable(Orientation.RIGHT_LEFT, colors));
        s.setDividerHeight(2);
        if (selectedLocation == -1)
            selectedLocation = 0;
        locationListViewListener = -1;
        if (array_spinner[selectedLocation]
                .equals(getString(R.string.pos_select_location))) {
            locationEditText.setText("");
            locationEditText.setHint(array_spinner[selectedLocation]);
        } else
            locationEditText.setText(Helper
                    .makeHtmlString(array_spinner[selectedLocation]));
        s.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {

                try {
                    InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputManager.hideSoftInputFromWindow(getCurrentFocus()
                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                } catch (Exception ex) {

                }
                selectedLocation = arg2;
                if (spinnerLocationFirstTime)
                    spinnerLocationFirstTime = false;
                else if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();
                    spinnerLocationFirstTime = true;
                }
                locationListViewListener = -1;
                locationListView.setVisibility(View.GONE);
                locationBranchImage.setImageDrawable(getResources()
                        .getDrawable(R.drawable.down_btn));

                txtAddPrice.setText("");

                for (int i = 0; i < array_spinner.length; i++) {
                    final String text = ((TextView) arg1).getText().toString();
                    if (array_spinner[i].equals(text)) {
                        selectedLocation = i;
                    }
                }
                if (array_spinner[selectedLocation]
                        .equals(getString(R.string.pos_select_location))) {
                    locationEditText.setText("");
                    locationEditText.setHint(array_spinner[selectedLocation]);
                } else
                    locationEditText.setText(Helper
                            .makeHtmlString(array_spinner[selectedLocation]));

                txtAddPrice.setText("");

                showSelectedDataPOS();
            }

        });

        s.setOnTouchListener(new ListView.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int action = event.getAction();
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        // Disallow ScrollView to intercept touch events.
                        v.getParent().requestDisallowInterceptTouchEvent(true);
                        break;

                    case MotionEvent.ACTION_UP:
                        // Allow ScrollView to intercept touch events.
                        v.getParent().requestDisallowInterceptTouchEvent(false);
                        break;
                }

                // Handle ListView touch events.
                v.onTouchEvent(event);
                return true;
            }
        });

        return s;
    }

    private ListView getProductListView(final ListView productListView,
                                        int viewidd, Objects questionObject) {

        final ListView s = productListView;
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        final String[] array_spinner = new String[pos_shelf_item.listProducts
                .size() + 1];
        array_spinner[0] = getString(R.string.pos_select_product);

        for (int i = 0; i < pos_shelf_item.listProducts.size(); i++) {
            array_spinner[i + 1] = Helper.stripHtml(pos_shelf_item.listProducts
                    .get(i).getProductName());
            String productId = pos_shelf_item.listProducts.get(i)
                    .getProductID();

            // if (qd != null && qd.getWorkerID() != null
            // && qd.getWorkerID().equals(workerId)) {
            // if (selectedProduct == -1)
            // selectedProduct = i + 1;
            // }
        }
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);

        s.setAdapter(adapter);
        s.setBackgroundColor(Color.parseColor("#F0F0F0"));
        int[] colors = {Color.parseColor("#ffffff"),
                Color.parseColor("#ffffff"), Color.parseColor("#ffffff")};
        s.setDivider(new GradientDrawable(Orientation.RIGHT_LEFT, colors));
        s.setDividerHeight(2);

        if (selectedProduct == -1)
            selectedProduct = 0;
        productListViewListener = -1;
        if (array_spinner[selectedProduct]
                .equals(getString(R.string.pos_select_product))) {
            productEditText.setText("");
            productEditText.setHint(array_spinner[selectedProduct]);
        } else
            productEditText.setText(Helper
                    .makeHtmlString(array_spinner[selectedProduct]));
        s.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {

                try {
                    InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputManager.hideSoftInputFromWindow(getCurrentFocus()
                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                } catch (Exception ex) {

                }
                selectedProduct = arg2;
                if (spinnerProductFirstTime)
                    spinnerProductFirstTime = false;
                else if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();
                    spinnerProductFirstTime = true;
                }
                productListViewListener = -1;
                productListView.setVisibility(View.GONE);
                ((ArrayAdapter) (productListView.getAdapter())).getFilter()
                        .filter("");
                productBranchImage.setImageDrawable(getResources().getDrawable(
                        R.drawable.down_btn));

                for (int i = 0; i < array_spinner.length; i++) {
                    final String text = ((TextView) arg1).getText().toString();
                    if (array_spinner[i].equals(text)) {
                        selectedProduct = i;
                    }
                }
                if (array_spinner[selectedProduct]
                        .equals(getString(R.string.pos_select_product))) {
                    productEditText.setText("");
                    productEditText.setHint(array_spinner[selectedProduct]);
                    toggles.imgPreview.setVisibility(View.GONE);
                } else
                    productEditText.setText(Helper
                            .makeHtmlString(array_spinner[selectedProduct]));

                if (pos_shelf_item.listProducts != null && selectedProduct > 0) {
                    txtAverage.setText(Helper.makeHtmlString(getResources()
                            .getString(R.string.pos_average)
                            + " "
                            + +pos_shelf_item.price_item
                            .getAveragePrice(pos_shelf_item.listProducts
                                    .get(selectedProduct - 1)
                                    .getProductID())));
                }

                txtAddPrice.setText("");

                showSelectedDataPOS();

            }

        });
        s.setOnTouchListener(new ListView.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int action = event.getAction();
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        // Disallow ScrollView to intercept touch events.
                        v.getParent().requestDisallowInterceptTouchEvent(true);
                        break;

                    case MotionEvent.ACTION_UP:
                        // Allow ScrollView to intercept touch events.
                        v.getParent().requestDisallowInterceptTouchEvent(false);
                        break;
                }

                // Handle ListView touch events.
                v.onTouchEvent(event);
                return true;
            }
        });
        return s;
    }

    private void hideShowToggleButtons(Products product) {
        toggles.hideShow(product, false);
    }

    private void showSelectedDataPOS() {


        if (selectedProduct > 0) {
            Products thisselectedProduct = pos_shelf_item.listProducts.get(
                    selectedProduct - 1);
            toggles.setSelectedProduct(thisselectedProduct.getProductID());
            if (thisselectedProduct.isAlreadyQueried() == false && thisselectedProduct.getProductID() != null) {
                pos_shelf_item = DBHelper.getShelfItems(Constants.DB_TABLE_POS,
                        new String[]{Constants.DB_TABLE_POS_LocationId,
                                Constants.DB_TABLE_POS_OrderId,
                                Constants.DB_TABLE_POS_Price,
                                Constants.DB_TABLE_POS_ProductId,
                                Constants.DB_TABLE_POS_PropertyId,
                                Constants.DB_TABLE_POS_Quantity,
                                Constants.DB_TABLE_POS_SetId,
                                Constants.DB_TABLE_POS_Notee,
                                Constants.DB_TABLE_POS_date},
                        Constants.DB_TABLE_POS_OrderId + "=" + "\"" + orderID
                                + "\" AND " + Constants.DB_TABLE_POS_ProductId + "=" + "\"" + thisselectedProduct.getProductID()
                                + "\"", pos_shelf_item, true);
                thisselectedProduct.setAlreadyQueried(true);
            }
        }

        txtAverage.setText(Helper
                .makeHtmlString(getString(R.string.pos_average) + " 0"));

        if (pos_shelf_item.listProducts != null && selectedProduct > 0) {
            txtAverage
                    .setText(Helper.makeHtmlString(getString(R.string.pos_average)
                            + " "
                            + +pos_shelf_item.price_item
                            .getAveragePrice(pos_shelf_item.listProducts
                                    .get(selectedProduct - 1)
                                    .getProductID())));
        }

        // if (!set.getAllowCritFileUpload().equals("1"))
        // {
        // toggles.hidePictureTab();
        // }

        if (pos_shelf_item.price_item != null
                && pos_shelf_item.listProducts != null
                && pos_shelf_item.listProductLocations != null
                && selectedLocation > 0 && selectedProduct > 0) {
            txtAddPrice
                    .setText(Helper.makeHtmlString(pos_shelf_item.price_item
                            .getItemText(
                                    pos_shelf_item.listProducts.get(
                                            selectedProduct - 1).getProductID(),
                                    pos_shelf_item.listProductLocations.get(
                                            selectedLocation - 1)
                                            .getProdLocationID())));

        }

        txtCount.setText(Helper.makeHtmlString(getString(R.string.pos_total)
                + " 0"));

        if (pos_shelf_item.listProducts != null && selectedProduct > 0) {
            txtCount.setText(Helper
                    .makeHtmlString(getString(R.string.pos_total)
                            + " "
                            + +pos_shelf_item.quantity_item
                            .getTotalCount(pos_shelf_item.listProducts
                                    .get(selectedProduct - 1)
                                    .getProductID())));
        }

        if (pos_shelf_item.quantity_item != null
                && pos_shelf_item.listProducts != null
                && pos_shelf_item.listProductLocations != null
                && selectedLocation > 0 && selectedProduct > 0) {
            txtAddQuantity
                    .setText(Helper.makeHtmlString(pos_shelf_item.quantity_item
                            .getItemText(
                                    pos_shelf_item.listProducts.get(
                                            selectedProduct - 1).getProductID(),
                                    pos_shelf_item.listProductLocations.get(
                                            selectedLocation - 1)
                                            .getProdLocationID())));

        }

        if (pos_shelf_item.note_item != null
                && pos_shelf_item.listProducts != null
                && pos_shelf_item.listProductLocations != null
                && selectedLocation > 0 && selectedProduct > 0) {
            txtAddNote
                    .setText(Helper.makeHtmlString(pos_shelf_item.note_item
                            .getItemText(
                                    pos_shelf_item.listProducts.get(
                                            selectedProduct - 1).getProductID(),
                                    pos_shelf_item.listProductLocations.get(
                                            selectedLocation - 1)
                                            .getProdLocationID())));

        }

        if (pos_shelf_item.expiration_item != null
                && pos_shelf_item.listProducts != null
                && pos_shelf_item.listProductLocations != null
                && selectedLocation > 0 && selectedProduct > 0) {
            ExpirationItem currentItem = pos_shelf_item.expiration_item
                    .getCurrentItem(
                            pos_shelf_item.listProducts
                                    .get(selectedProduct - 1).getProductID(),
                            pos_shelf_item.listProductLocations.get(
                                    selectedLocation - 1).getProdLocationID());

            if (currentItem == null || currentItem.getYear() < 0
                    || currentItem.getMonth() < 0 || currentItem.getDay() < 0) {

                Calendar c = Calendar.getInstance();
                int month = c.get(Calendar.MONTH);
                int year = c.get(Calendar.YEAR);
                int day = c.get(Calendar.DAY_OF_MONTH);
                txtAddExpiration.updateDate(year, month, day);
                txtExpiry.setText(Helper.makeHtmlString(getResources()
                        .getString(R.string.pos_selected_date)));

            } else {
                txtAddExpiration.updateDate(currentItem.getYear(),
                        currentItem.getMonth(), currentItem.getDay());

                txtExpiry.setText(Helper.makeHtmlString(getResources()
                        .getString(R.string.pos_selected_date)
                        + txtAddExpiration.getDay()
                        + "-"
                        + (txtAddExpiration.getMonth() + 1)
                        + "-"
                        + txtAddExpiration.getYear()));
            }

        }
        if (selectedProduct > 0)
            hideShowToggleButtons(pos_shelf_item.listProducts
                    .get(selectedProduct - 1));
        else
            hideShowToggleButtons(null);
        productListView.setVisibility(View.GONE);
        locationListView.setVisibility(View.GONE);

    }

    private Spinner getWorkerDropDown(int viewidd, Objects questionObject) {

        listWorkers = filterWorkers(listWorkers, selectedBranchID);

        Spinner s = new Spinner(QuestionnaireActivity.this);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        String[] array_spinner = new String[listWorkers.size() + 1];
        array_spinner[0] = "Not Selected";

        for (int i = 0; i < listWorkers.size(); i++) {
            array_spinner[i + 1] = Helper.stripHtml(listWorkers.get(i)
                    .getWorkerName());
            if (qd != null
                    && qd.getWorkerID()
                    .equals(listWorkers.get(i).getWorkerID())) {
                if (selectedWorker == -1)
                    selectedWorker = i + 1;
            }
        }
        ArrayAdapter adapter = new ArrayAdapter(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), array_spinner);
        adapter.setDropDownViewResource(UIHelper.getSpinnerLayoutSize(
                QuestionnaireActivity.this, modeSelect));
        s.setAdapter(adapter);
        s.setId(viewidd);
        if (selectedWorker == -1)
            selectedWorker = 0;
        s.setSelection(selectedWorker);
        s.setOnItemSelectedListener(new OnItemSelectedListener() {

            @Override
            public void onItemSelected(AdapterView<?> arg0, View arg1,
                                       int arg2, long arg3) {
                // TODO Auto-generated method stub
                // Toast.makeText(QuestionnaireActivity.this, arg2+" "+arg3,
                // Toast.LENGTH_SHORT).show();
                selectedWorker = arg2;
                if (spinnerFirstTime)
                    spinnerFirstTime = false;
                else if (isServerAnswersActAsSubmit) {
                    goNextAfterDelay();
                    spinnerFirstTime = true;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> arg0) {
                // TODO Auto-generated method stub

            }
        });
        changeSpinnerFontSize(s);
        return s;
    }

    private ArrayList<Workers> filterWorkers(ArrayList<Workers> listWorkers2,
                                             String selectedBranchID2) {
        if (selectedBranchID2 == null || selectedBranchID2.equals(""))
            return listWorkers2;

        ArrayList<Workers> filteredWorkers = new ArrayList<Workers>();
        for (int i = 0; i < listWorkers2.size(); i++) {
            if (listWorkers2.get(i) != null
                    && (listWorkers2.get(i).getBranchLink() == null
                    || listWorkers2.get(i).getBranchLink().equals("0") || listWorkers2
                    .get(i).getBranchLink().equals(selectedBranchID2))) {
                filteredWorkers.add(listWorkers2.get(i));
            }
        }
        return filteredWorkers;
    }

    private RelativeLayout.LayoutParams getAttechmentLayout(int id) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        lp.setMargins(dpToPx(45), 0, 60, 0);
        lp.addRule(RelativeLayout.CENTER_VERTICAL, id);
        lp.addRule(RelativeLayout.ALIGN_TOP, id);

        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }
        return lp;
    }

    private RelativeLayout checkForNextBtnVisibility(
            RelativeLayout questionnaireLayout, boolean isPrev,
            boolean isRefresh) {
        if (isRefresh == false)
            nextQIndex = objectCount;

        if ((lastDataId != null
                && questionObject.getDataID().equals(lastDataId) || (lastDataId == null))
                && objectCount == size - 1
                && posLayout.getVisibility() == View.GONE) {
            if (set != null && set.getAllowCritFileUpload().equals("1")
                    && !lastFileUploadAlreadyAdded) {
                lastFileUploadAlreadyAdded = true;
                questionnaireLayout.addView(getLastattachmentView(),
                        getAttachmentLayoutParam(viewId - 1, 15, 15));
                TextView tv = commentTextView(
                        getResources().getString(
                                R.string.questionnaire_upload_files)
                                + "\n", -1);
                if (modeSelect == 3) {
                    tv.setGravity(Gravity.RIGHT);
                }
                setFontSize(tv);

                tv.setOnClickListener(new OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        // showFileChooser();
                        String txt = ((TextView) v).getText().toString();
                        String txt2 = QuestionnaireActivity.this.getResources()
                                .getString(R.string.questionnaire_upload_files);
                        if (QuestionnaireActivity.this.getResources()
                                .getString(R.string.questionnaire_upload_files)
                                .trim().equals(txt.trim())) {
                            isLastAttachment = true;
                        } else
                            isLastAttachment = false;
                        photomenu = true;

                        recorder.DataId = "";
                        customMenu(openMenu(null));
                    }
                });
                questionnaireLayout
                        .addView(tv, getAttechmentLayout(viewId - 1));
                lastserverSideFiles = getServerSideFiles(server_attached_files,
                        true, uploadList);
                lasteyeview = getEyeView(true);
                questionnaireLayout.addView(lasteyeview,
                        getAttachmentLayoutParamEye(viewId - 3, 15, 15));
                if (lastserverSideFiles != null
                        && lastserverSideFiles.size() > 0 && !order.getAsArchive()) {
                    lasteyeview.setVisibility(RelativeLayout.VISIBLE);
                } else
                    lasteyeview.setVisibility(RelativeLayout.INVISIBLE);
            }
            // nextBtn.setVisibility(View.INVISIBLE);
            String txt = getResources().getString(
                    R.string.questionnaire_menu_btn);

            // if (modeSelect == 3) {
            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(
            // R.drawable.done_new, 0, 0, 0);
            //
            // } else
            // nextBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
            // R.drawable.done_new, 0);
            updateProgressOnScreen(1);
            sendMessage(QUESTION_LAST, null);
            nextBtn.setText(txt);
            // if (btextbox!=null) btextbox.setText("asdas");
            nextImg.setVisibility(View.VISIBLE);
            nextBtn.setVisibility(RelativeLayout.VISIBLE);
            showSubmitMenu = true;
            if (set.getAllowCheckerToSetFinishTime() != null
                    && set.getAllowCheckerToSetFinishTime().equals("1")
                    && uqHelper == null) {

                questionnaireLayout
                        .addView(
                                commentTextView(
                                        getString(R.string.Questionnaire_finish_time_lbl),
                                        -1), getLayoutParam(viewId - 1, 20, 0));
                questionnaireLayout.addView(lastEditTextforTime(isPrev, false),
                        getEditTextLayoutParam(viewId - 1, false));
            }
            String replyValue = myPrefs.getString(
                    Constants.SETTINGS_SHOW_REPLY_BOX, "");


            if (set.getShowFreeTextBox() != null
                    && set.getShowFreeTextBox().equals("1") && uqHelper == null) {
                questionnaireLayout
                        .addView(
                                commentTextView(
                                        "\n"
                                                + getString(R.string.questionnaire_free_text_lbl),
                                        -1), getLayoutParam(viewId - 1));
                questionnaireLayout.addView(getFreeEditTextView(isPrev),
                        getEditTextLayoutParam(viewId - 1, false));
            }
            //
            SubmitQuestionnaireData serializeSubmitdata = checkAndGetPurchaseData();
            if ((order != null && order.getsPurchase() != null && order
                    .getsPurchase().equals("1"))
                    || (set.getAskForPurchaseDetails() != null && set
                    .getAskForPurchaseDetails().equals("1"))) {

                questionnaireLayout.addView(commentTextViewHeading("\n"
                                + getString(R.string.purchase_details)),
                        getLayoutParam(viewId - 1));
                questionnaireLayout.addView(
                        commentTextView("\n"
                                        + getString(R.string.purchase_invoice_number),
                                -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_purchase_details() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_details = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_details(),
                                            -23),
                                    getEditTextLayoutParam(viewId - 1, true));
                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_purchase_details() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_details = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_details(),
                                            -23),
                                    getEditTextLayoutParam(viewId - 1, true));
                } else {

                    questionnaireLayout
                            .addView(
                                    edit_purchase_details = getFreeEditTextViewWithType(
                                            null, -23),
                                    getEditTextLayoutParam(viewId - 1, true));
                }

                if (order.getsPurchaseLimit() != null
                        && order.getsPurchaseLimit().length() > 0) {
                    try {
                        double purchaselimit = Double.parseDouble(order
                                .getsPurchaseLimit());
                        if (purchaselimit != 0.0) {
                            questionnaireLayout
                                    .addView(
                                            commentTextView(
                                                    "\n"
                                                            + getString(R.string.purchase_payment)
                                                            + " ("
                                                            + order.getsPurchaseLimit()
                                                            + ")", -1),
                                            getLayoutParam(viewId - 1));
                        } else {
                            questionnaireLayout
                                    .addView(
                                            commentTextView(
                                                    "\n"
                                                            + getString(R.string.purchase_payment),
                                                    -1),
                                            getLayoutParam(viewId - 1));
                        }
                    } catch (Exception ex) {
                    }
                } else
                    questionnaireLayout
                            .addView(
                                    commentTextView(
                                            "\n"
                                                    + getString(R.string.purchase_payment),
                                            -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_purchase_payment() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_payment = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_payment(),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_purchase_payment() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_payment = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_payment(),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_payment = getFreeEditTextViewWithType(
                                            null, InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                }

                edit_purchase_payment.setInputType(InputType.TYPE_CLASS_NUMBER
                        | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                edit_purchase_payment
                        .setOnLongClickListener(new OnLongClickListener() {

                            @Override
                            public boolean onLongClick(View arg0) {
                                Calculation c = new Calculation((EditText) arg0);
                                c.makeDialog(QuestionnaireActivity.this);
                                return false;
                            }
                        });

                questionnaireLayout
                        .addView(
                                commentTextView(
                                        "\n"
                                                + getString(R.string.purchase_description),
                                        -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_purchase_description() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_description = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_purchase_description() != null) {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_description = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_purchase_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else {
                    questionnaireLayout
                            .addView(
                                    edit_purchase_description = getFreeEditTextViewWithType(
                                            null, -1),
                                    getEditTextLayoutParam(viewId - 1, false));
                }
                if (edit_purchase_details != null) {
                    edit_purchase_description.clearFocus();
                    edit_purchase_details.requestFocus();
                }

            } else {
                edit_purchase_description = null;
                edit_purchase_details = null;
                edit_purchase_payment = null;
            }

            if ((order != null && order.getsPurchase() != null && order
                    .getsPurchase().equals("1"))
                    || (set.getAskForServiceDetails() != null && set
                    .getAskForServiceDetails().equals("1"))) {
                questionnaireLayout.addView(commentTextViewHeading("\n"
                                + getString(R.string.service_details)),
                        getLayoutParam(viewId - 1));
                questionnaireLayout.addView(
                        commentTextView("\n"
                                        + getString(R.string.service_invoice_number),
                                -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_service_invoice_number() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_invoice_number = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_service_invoice_number(),
                                            -23),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_service_invoice_number() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_invoice_number = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_service_invoice_number(),
                                            -23),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else {

                    questionnaireLayout
                            .addView(
                                    edit_service_invoice_number = getFreeEditTextViewWithType(
                                            null, -23),
                                    getEditTextLayoutParam(viewId - 1, true));
                }

                questionnaireLayout.addView(
                        commentTextView("\n"
                                + getString(R.string.service_payment), -1),
                        getLayoutParam(viewId - 1));

                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_service_payment(order
                                .getsNonRefundableServicePayment()) != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_payment = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_service_payment(order
                                                            .getsNonRefundableServicePayment()),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_service_payment(order
                                .getsNonRefundableServicePayment()) != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_payment = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_service_payment(order
                                                            .getsNonRefundableServicePayment()),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else {
                    String temps = null;
                    if (order.getsNonRefundableServicePayment() != null
                            && order.getsNonRefundableServicePayment().length() > 0) {
                        temps = (order.getsNonRefundableServicePayment());
                    }

                    questionnaireLayout.addView(
                            edit_service_payment = getFreeEditTextViewWithType(
                                    temps, -23),
                            getEditTextLayoutParam(viewId - 1, true));

                }

                edit_service_payment.setInputType(InputType.TYPE_CLASS_NUMBER
                        | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                edit_service_payment
                        .setOnLongClickListener(new OnLongClickListener() {

                            @Override
                            public boolean onLongClick(View arg0) {
                                Calculation c = new Calculation((EditText) arg0);
                                c.makeDialog(QuestionnaireActivity.this);
                                return false;
                            }
                        });

                questionnaireLayout.addView(
                        commentTextView("\n"
                                + getString(R.string.service_description), -1),
                        getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_service_description() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_description = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_service_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_service_description() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_service_description = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_service_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else {
                    questionnaireLayout
                            .addView(
                                    edit_service_description = getFreeEditTextViewWithType(
                                            null, -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                }
                if (edit_purchase_details != null) {
                    edit_service_description.clearFocus();
                    edit_purchase_details.requestFocus();
                }

            } else {
                edit_service_description = null;
                edit_service_invoice_number = null;
                edit_service_payment = null;
            }

            if (set.getAskForTransportationDetails() != null
                    && set.getAskForTransportationDetails().equals("1")) {
                questionnaireLayout.addView(commentTextViewHeading("\n"
                                + getString(R.string.transportation_details)),
                        getLayoutParam(viewId - 1));
                questionnaireLayout.addView(
                        commentTextView("\n"
                                        + getString(R.string.transportation_payment),
                                -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_transportation_payment(order
                                .getsTransportationPayment()) != null) {

                    questionnaireLayout
                            .addView(
                                    edit_transportation_payment = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_transportation_payment(),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_transportation_payment(order
                                .getsTransportationPayment()) != null) {

                    questionnaireLayout
                            .addView(
                                    edit_transportation_payment = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_transportation_payment(),
                                            InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                } else {
                    String temps = null;
                    if (order.getsTransportationPayment() != null
                            && order.getsTransportationPayment().length() > 0) {
                        temps = (order.getsTransportationPayment());
                    }
                    questionnaireLayout
                            .addView(
                                    edit_transportation_payment = getFreeEditTextViewWithType(
                                            temps, InputType.TYPE_CLASS_NUMBER),
                                    getEditTextLayoutParam(viewId - 1, true));

                }

                edit_transportation_payment
                        .setInputType(InputType.TYPE_CLASS_NUMBER
                                | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                edit_transportation_payment
                        .setOnLongClickListener(new OnLongClickListener() {

                            @Override
                            public boolean onLongClick(View arg0) {
                                Calculation c = new Calculation((EditText) arg0);
                                c.makeDialog(QuestionnaireActivity.this);
                                return false;
                            }
                        });

                questionnaireLayout
                        .addView(
                                commentTextView(
                                        "\n"
                                                + getString(R.string.transportation_description),
                                        -1), getLayoutParam(viewId - 1));
                if (submitData != null
                        && submitData
                        .getDB_TABLE_SUBMITSURVEY_transportation_description() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_transportation_description = getFreeEditTextViewWithType(
                                            submitData
                                                    .getDB_TABLE_SUBMITSURVEY_transportation_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else if (serializeSubmitdata != null
                        && serializeSubmitdata
                        .getDB_TABLE_SUBMITSURVEY_transportation_description() != null) {

                    questionnaireLayout
                            .addView(
                                    edit_transportation_description = getFreeEditTextViewWithType(
                                            serializeSubmitdata
                                                    .getDB_TABLE_SUBMITSURVEY_transportation_description(),
                                            -1),
                                    getEditTextLayoutParam(viewId - 1, false));

                } else {
                    questionnaireLayout
                            .addView(
                                    edit_transportation_description = getFreeEditTextViewWithType(
                                            null, -1),
                                    getEditTextLayoutParam(viewId - 1, false));
                }

                if (edit_purchase_details != null) {
                    edit_transportation_description.clearFocus();
                    edit_purchase_details.requestFocus();
                }

            } else {
                edit_transportation_description = null;
                edit_transportation_payment = null;
            }

            if (replyValue != null
                    && replyValue.equals("1") && uqHelper == null) {
//				if (serializeSubmitdata!=null && serializeSubmitdata.getRs()!=null)
//				{
//					questionnaireLayout
//							.addView(
//									ReplyTextView(
//											serializeSubmitdata.getRs(),
//											-1), getReplyLayoutParam(viewId - 1));
//
//				}
//				else
                {
                    questionnaireLayout
                            .addView(
                                    ReplyTextView(
                                            "\n"
                                                    + getString(R.string.questionnaire_reply_to_company),
                                            -1), getReplyLayoutParam(viewId - 1));

                }
                questionnaireLayout.addView(getReplyEditTextView(isPrev, serializeSubmitdata),
                        getReplyEditTextLayoutParam(viewId - 1));
            }

        }
        return questionnaireLayout;
    }

    private ArrayList<InProgressFileData> getServerSideFiles(
            ArrayList<InProgressFileData> server_attached_files2,
            boolean isLast, ArrayList<filePathDataID> uploadList2) {
        ArrayList<InProgressFileData> files = new ArrayList<InProgressFileData>();

        for (int i = 0; uploadList2 != null && i < uploadList2.size(); i++) {
            if ((uploadList2.get(i).getDataID() == null && isLast)
                    || ((uploadList2.get(i).getUPLOAD_FILe_ORDERID() != null
                    && orderID != null && uploadList2.get(i).getUPLOAD_FILe_ORDERID()
                    .equals(orderID))
                    && (isLast == false && (uploadList2.get(i).getDataID() != null && uploadList2.get(i).getDataID()
                    .equals(questionObject.getDataID())))
                    && uploadList2.get(i).getFilePath() != null
                    && !uploadList2.get(i).getFilePath().trim().equals(""))) {
                File f = new File(uploadList2.get(i).getFilePath());
                InProgressFileData file;
                if (f != null && f.exists()) {
                    int file_size = Integer
                            .parseInt(String.valueOf(f.length() / 1024));

                    file = new InProgressFileData(questionObject.getDataID(),
                            uploadList2.get(i).getFilePath(), orderID, true,
                            file_size + " Kb", i);
                } else {

                    file = new InProgressFileData(questionObject.getDataID(),
                            uploadList2.get(i).getFilePath(), orderID, true, "");
                }
                files.add(file);
            }
        }
        for (int i = 0; server_attached_files2 != null
                && i < server_attached_files2.size(); i++) {
            if ((server_attached_files2.get(i).getFileDataID() == null && isLast == true)
                    || ((server_attached_files2.get(i).getFileOrderID()
                    .equals(orderID))
                    && (isLast == false && (server_attached_files2.get(i).getFileDataID() != null
                    && server_attached_files2.get(i).getFileDataID()
                    .equals(questionObject.getDataID())))
                    && server_attached_files2.get(i).getFileName() != null
                    && !server_attached_files2.get(i).getFileName().trim()
                    .equals(""))) {
                files.add(server_attached_files2.get(i));
            }
        }

        return files;
    }

    private TextView ReplyTextView(String msg2, int size) {
        TextView commonTextbox = new TextView(this.getApplicationContext());
        if (outerQuestionObject == null)
            commonTextbox.setGravity(Gravity.CENTER);
        viewId = getViewId(viewId);
        commonTextbox.setTextSize(20);
        commonTextbox.setId(viewId);
        commonTextbox.setText(Helper.makeHtmlString(msg2));
        commonTextbox.setTextColor(Color.parseColor("#9dc40f"));
//		if (size == -1)
//			setFontSize(commonTextbox);
//		else
        //commonTextbox.setTextSize(size);
        //commonTextbox.setma
        //commonTextbox.setBackgroundColor(Color.parseColor("#9dc40f"));
        return commonTextbox;
    }

    private TextView commentTextView(String msg2, int size) {
        TextView commonTextbox = new TextView(this.getApplicationContext());
        if (outerQuestionObject == null)
            commonTextbox.setGravity(Gravity.TOP);
        viewId = getViewId(viewId);
        commonTextbox.setTextSize(15);
        commonTextbox.setId(viewId);
        commonTextbox.setText(Helper.makeHtmlString(msg2));
        commonTextbox.setTextColor(Color.BLACK);
        if (size == -1)
            setFontSize(commonTextbox);
        else
            commonTextbox.setTextSize(size);

        return commonTextbox;
    }

    private TextView commentTextViewHeading(String msg2) {
        TextView commonTextbox = new TextView(this.getApplicationContext());
        if (outerQuestionObject == null)
            commonTextbox.setGravity(Gravity.TOP);
        viewId = getViewId(viewId);
        commonTextbox.setId(viewId);
        commonTextbox.setText(Helper.makeHtmlString(msg2));
        setFontSize(commonTextbox);
        commonTextbox.setTextColor(Color.parseColor("#9DC40F"));
        commonTextbox.setTypeface(null, Typeface.BOLD);

        return commonTextbox;
    }

    // private EditText lastEditTextforDate(boolean isPrev){
    // finishDate = new EditText(this.getApplicationContext());
    //
    // finishDate.setGravity(Gravity.TOP);
    // finishDate.setHeight(1);
    // viewId = getViewId(viewId);
    // finishDate.setId(viewId);
    // finishDate.setFocusable(false);
    //
    // finishDate.setKeyListener(null);
    //
    // finishDate.setHint(getString(R.string.Questionnaire_finish_Date_lbl));
    // if(isPrev)
    // {
    // QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
    // if(qd != null && qd.getFinishtime() != null)
    // finishDate.setText(qd.getFinishtime());
    // }
    // // final Calendar cal = Calendar.getInstance();
    // // year = cal.get(Calendar.YEAR);
    // // month = cal.get(Calendar.MONTH);
    // // day = cal.get(Calendar.DAY_OF_MONTH);
    //
    // finishTime.setOnClickListener(new View.OnClickListener() {
    // public void onClick(View v) {
    // new DatePickerDialog(QuestionnaireActivity.this, dateListener, myCalendar
    // .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
    // myCalendar.get(Calendar.DAY_OF_MONTH)).show();
    // }
    // });
    // return finishDate;
    // }

    int year, month, day;
    private MultiSelectionSpinner multiSpinner = null;
    private boolean isRdAdded;
    // private RangeBar rangeBar;
    private CustomRBar ratingBar;
    private Button btextbox;
    private LinearLayout miWholeView;
    private Answers selectedAnswerForMiView;
    private TextView mitv;

    private Button lastEditTextforTime(boolean isPrev, boolean isCustom) {
        year = 0;
        month = 0;
        day = 0;
        finishTime = new Button(this.getApplicationContext());
        finishTime.setTextColor(Color.parseColor("#000000"));
        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        finishTime.setBackgroundDrawable(d);
        if (modeSelect == 3) {
            finishTime.setGravity(Gravity.RIGHT);
            finishTime.setLayoutDirection(View.LAYOUT_DIRECTION_RTL);
        }
        if (outerQuestionObject == null && modeSelect == 3)
            finishTime.setGravity(Gravity.TOP | Gravity.RIGHT);

        else if (outerQuestionObject == null)
            finishTime.setGravity(Gravity.TOP);

        viewId = getViewId(viewId);
        finishTime.setId(viewId);
        finishTime.setFocusable(false);
        finishTime.setTextColor(Color.parseColor("#000000"));
        finishTime.setText(Helper.makeHtmlString(sdf.format(new Date())));
        // finishTime.setTextColor(android.R.color.black);finishTime.setText(dateTimeTxt);

        {
            QuestionnaireData qd = getFinishTimeAnswer(questionObject
                    .getDataID());
            // getSingleAnswer(questionObject.getDataID());
            if (qd != null && qd.getFinishtime() != null) {
                finishTime.setText(Helper.makeHtmlString(qd.getFinishtime()));
            }
        }

        if (set.getAllowCheckerToSetFinishTime().toString().contains("1")) {
            finishTime.setEnabled(true);
        } else if (!isCustom) {
            finishTime.setEnabled(false);
        }
        finishTime.setTextColor(Color.parseColor("#000000"));
        setFontSize(finishTime);
        // final Calendar myCalendar = Calendar.getInstance();
        final TimePickerDialog.OnTimeSetListener t = new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, month);
                myCalendar.set(Calendar.DAY_OF_MONTH, day);
                myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                myCalendar.set(Calendar.MINUTE, minute);
                updateLabel();
            }

            private void updateLabel() {
                // TODO Auto-generated method stub
                finishTime.setText(Helper.makeHtmlString(sdf.format(myCalendar
                        .getTime())));
            }
        };

        final DatePickerDialog.OnDateSetListener dateListener = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int yr, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                year = yr;
                month = monthOfYear;
                day = dayOfMonth;
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, month);
                myCalendar.set(Calendar.DAY_OF_MONTH, day);
                // myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                // myCalendar.set(Calendar.MINUTE, minute);
                updateLabel();
                // finishTime.setTextColor(android.R.color.black);finishTime.setText(new
                // StringBuilder().append(dayOfMonth).append('-')
                // .append(monthOfYear+1).append('-').append(year));
                // lastEditTextforTime(true);
            }

            private void updateLabel() {
                // TODO Auto-generated method stub
                finishTime.setText(Helper.makeHtmlString(sdf.format(myCalendar
                        .getTime())));
            }
        };

        finishTime.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                final TimePickerDialog.OnTimeSetListener t = new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay,
                                          int minute) {
                        myCalendar.set(Calendar.YEAR, year);
                        myCalendar.set(Calendar.MONTH, month);
                        myCalendar.set(Calendar.DAY_OF_MONTH, day);
                        myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                        myCalendar.set(Calendar.MINUTE, minute);
                        myCalendar.set(Calendar.SECOND, 0);
                        SimpleDateFormat timeformat = new SimpleDateFormat(
                                "kk:mm:ss", Locale.ENGLISH);

                        String timeLog = sdf.format(myCalendar.getTime());
                        updateLabel();

                        finishTime.setTextColor(android.R.color.black);
                        finishTime.setText(Helper.makeHtmlString(timeLog));
                    }

                    private void updateLabel() {
                        // TODO Auto-generated method stub
                        finishTime.setTextColor(android.R.color.black);
                        finishTime.setText(Helper.makeHtmlString(sdf
                                .format(myCalendar.getTime())));
                    }
                };
                String strn = android.os.Build.VERSION.SDK;
                int sdk = Integer.valueOf(strn);
                if (sdk < 44) {
                    CustomTimePicker cTimePicker = new CustomTimePicker();
                    myCalendar = Calendar.getInstance();
                    cTimePicker.makeTimeDialog(QuestionnaireActivity.this,
                            questionObject.getMiType(),
                            myCalendar.get(Calendar.HOUR_OF_DAY),
                            myCalendar.get(Calendar.MINUTE),
                            myCalendar.get(Calendar.SECOND),
                            new MyTimePickerDialog.OnTimeSetListener() {

                                @Override
                                public void onTimeSet(
                                        com.ikovac.timepickerwithseconds.view.TimePicker view,
                                        int hourOfDay, int minute, int seconds) {

                                    myCalendar.set(Calendar.YEAR, year);
                                    myCalendar.set(Calendar.MONTH, month);
                                    myCalendar.set(Calendar.DAY_OF_MONTH, day);
                                    myCalendar.set(Calendar.HOUR_OF_DAY,
                                            hourOfDay);
                                    myCalendar.set(Calendar.MINUTE, minute);
                                    myCalendar.set(Calendar.SECOND, seconds);
                                    SimpleDateFormat timeformat = new SimpleDateFormat(
                                            "kk:mm:ss", Locale.ENGLISH);

                                    String timeLog = sdf.format(myCalendar
                                            .getTime());
                                    updateLabel();

                                    finishTime.setText(Helper
                                            .makeHtmlString(timeLog));
                                }

                                private void updateLabel() {
                                    // TODO Auto-generated method stub
                                    finishTime.setText(Helper
                                            .makeHtmlString(sdf
                                                    .format(myCalendar
                                                            .getTime())));
                                }
                            });
                    // TimePickerDialog timeDialog = new TimePickerDialog(
                    // QuestionnaireActivity.this, t, myCalendar
                    // .get(Calendar.HOUR_OF_DAY), myCalendar
                    // .get(Calendar.MINUTE), true);
                    // timeDialog.show();

                } else {
                    CustomTimePicker cTimePicker = new CustomTimePicker();
                    myCalendar = Calendar.getInstance();
                    cTimePicker.makeTimeDialog(QuestionnaireActivity.this,
                            questionObject.getMiType(),
                            myCalendar.get(Calendar.HOUR_OF_DAY),
                            myCalendar.get(Calendar.MINUTE),
                            myCalendar.get(Calendar.SECOND),

                            new MyTimePickerDialog.OnTimeSetListener() {

                                @Override
                                public void onTimeSet(
                                        com.ikovac.timepickerwithseconds.view.TimePicker view,
                                        int hourOfDay, int minute, int seconds) {

                                    myCalendar.set(Calendar.YEAR, year);
                                    myCalendar.set(Calendar.MONTH, month);
                                    myCalendar.set(Calendar.DAY_OF_MONTH, day);
                                    myCalendar.set(Calendar.HOUR_OF_DAY,
                                            hourOfDay);
                                    myCalendar.set(Calendar.MINUTE, minute);
                                    myCalendar.set(Calendar.SECOND, seconds);
                                    SimpleDateFormat timeformat = new SimpleDateFormat(
                                            "kk:mm:ss", Locale.ENGLISH);

                                    String timeLog = sdf.format(myCalendar
                                            .getTime());
                                    updateLabel();

                                    finishTime.setText(Helper
                                            .makeHtmlString(timeLog));
                                }

                                private void updateLabel() {
                                    // TODO Auto-generated method stub
                                    finishTime.setText(Helper
                                            .makeHtmlString(sdf
                                                    .format(myCalendar
                                                            .getTime())));
                                }
                            });
                    MyTimePickerDialog mTimePicker = new MyTimePickerDialog(
                            QuestionnaireActivity.this,
                            new MyTimePickerDialog.OnTimeSetListener() {

                                @Override
                                public void onTimeSet(
                                        com.ikovac.timepickerwithseconds.view.TimePicker view,
                                        int hourOfDay, int minute, int seconds) {

                                    myCalendar.set(Calendar.YEAR, year);
                                    myCalendar.set(Calendar.MONTH, month);
                                    myCalendar.set(Calendar.DAY_OF_MONTH, day);
                                    myCalendar.set(Calendar.HOUR_OF_DAY,
                                            hourOfDay);
                                    myCalendar.set(Calendar.MINUTE, minute);
                                    myCalendar.set(Calendar.SECOND, seconds);
                                    SimpleDateFormat timeformat = new SimpleDateFormat(
                                            "kk:mm:ss", Locale.ENGLISH);

                                    String timeLog = sdf.format(myCalendar
                                            .getTime());
                                    updateLabel();

                                    finishTime.setText(Helper
                                            .makeHtmlString(timeLog));
                                }

                                private void updateLabel() {
                                    // TODO Auto-generated method stub
                                    finishTime.setText(Helper
                                            .makeHtmlString(sdf
                                                    .format(myCalendar
                                                            .getTime())));
                                }
                            }, myCalendar.get(Calendar.HOUR_OF_DAY), myCalendar
                            .get(Calendar.MINUTE), myCalendar
                            .get(Calendar.SECOND), true);
                    mTimePicker.show();
                }
                new DatePickerDialog(QuestionnaireActivity.this, dateListener,
                        myCalendar.get(Calendar.YEAR), myCalendar
                        .get(Calendar.MONTH), myCalendar
                        .get(Calendar.DAY_OF_MONTH)).show();

                final Calendar myCalendar = Calendar.getInstance();
                // TimePickerDialog timeDialog = new TimePickerDialog(
                // QuestionnaireActivity.this, t, myCalendar
                // .get(Calendar.HOUR_OF_DAY), myCalendar
                // .get(Calendar.MINUTE), true);
                // timeDialog.show();

            }
        });

        // finishTime.setOnClickListener(new View.OnClickListener() {
        // public void onClick(View v) {
        // new DatePickerDialog(QuestionnaireActivity.this, dateListener,
        // myCalendar
        // .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
        // myCalendar.get(Calendar.DAY_OF_MONTH)).show();
        // }
        // });

        return finishTime;
    }

    private RelativeLayout.LayoutParams getShelfStudyParams() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(),
                android.view.ViewGroup.LayoutParams.MATCH_PARENT);
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 5, 0, 5);
        return lp;
    }

    private RelativeLayout.LayoutParams getElseTextViewSplitLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth() / 5, getDisplay().getWidth() / 8);
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(5, 0, 5, 0);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.RIGHT_OF, viewId - 1);
        }
        // lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        // lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    private RelativeLayout.LayoutParams getElseSplitLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(5, 0, 5, 0);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.RIGHT_OF, viewId - 1);
        }
        // lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        // lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    private RelativeLayout.LayoutParams getWebViewParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(), getDisplay().getWidth());
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 5, 0, 5);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.BELOW, viewId - 1);
        }
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    public Display getDisplay() {
        if (display != null) return display;
        else {
            display = getWindowManager().getDefaultDisplay();
        }
        return display;
    }

    private RelativeLayout.LayoutParams getElseLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 5, 0, 5);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.BELOW, viewId - 1);
        }
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    public static int dp2px(Resources resource, int dp) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,
                resource.getDisplayMetrics());
    }

    public static float px2dp(Resources resource, float px) {
        return (float) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX,
                px, resource.getDisplayMetrics());
    }

    private RelativeLayout.LayoutParams getSearchEditTextLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                QuestionnaireActivity.dp2px(getResources(), 45));
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 5, 0, 5);
        lp.addRule(RelativeLayout.BELOW, viewId - 3);
        // lp.addRule(RelativeLayout.LEFT_OF, viewId - 1);
        return lp;
    }

    private RelativeLayout.LayoutParams getIconParam() {

        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                QuestionnaireActivity.dp2px(getResources(), 28),
                QuestionnaireActivity.dp2px(getResources(), 45));
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 0, 10, 0);
        // (int) QuestionnaireActivity.px2dp(getResources(), 9));
        lp.addRule(RelativeLayout.ALIGN_TOP, viewId);
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        // lp.addRule(RelativeLayout.CENTER_VERTICAL);
        // lp.addRule(RelativeLayout.ALIGN_RIGHT, viewId - 1);
        return lp;
    }

    private RelativeLayout.LayoutParams getSpinnerLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(),
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 15, 0, 15);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.BELOW, viewId - 1);
        }
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    private RelativeLayout.LayoutParams getListEditLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(),
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(0, 15, 0, 15);
        if (viewId != 101) {
            // lp.addRule(RelativeLayout.BELOW, tempId);
            lp.addRule(RelativeLayout.BELOW, viewId - 1);
        }
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    private RelativeLayout.LayoutParams getListLayoutParam() {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(), getDisplay().getHeight() / 2);
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.setMargins(5, 0, 15, 15);
        if (viewId != 101) {
            lp.addRule(RelativeLayout.BELOW, viewId - 1);
        }
        lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lp.addRule(RelativeLayout.ALIGN_RIGHT);
        return lp;
    }

    private RelativeLayout.LayoutParams getLayoutParam(int id) {

        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.FILL_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        if (questionObject != null && questionObject.getDisplayType() != null
                && questionObject.getDisplayType().equals("5")) {
            lp.setMargins(0, 0, 0, 60);
        }
        lp.addRule(RelativeLayout.BELOW, id);
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }

        return lp;

    }

    private RelativeLayout.LayoutParams getReplyLayoutParam(int id) {

        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.FILL_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        lp.setMargins(0, 30, 0, 30);
        lp.addRule(RelativeLayout.BELOW, id);
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }

        return lp;

    }

    private RelativeLayout.LayoutParams getLayoutParam(int id, int marginTop,
                                                       int marginBottom) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.FILL_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.addRule(RelativeLayout.BELOW, id);
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }
        lp.setMargins(0, marginTop, 0, marginBottom);
        // lp.addRule(RelativeLayout.BELOW, id);
        return lp;
    }

    public static int pxToDp(int px) {
        return (int) (px / Resources.getSystem().getDisplayMetrics().density);
    }

    public static int dpToPx(int dp) {
        return (int) (dp * Resources.getSystem().getDisplayMetrics().density);
    }

    private RelativeLayout.LayoutParams getAttachmentLayoutParam(int id) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                dpToPx(25), dpToPx(25));
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.addRule(RelativeLayout.BELOW, id);
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }
        lp.setMargins(15, 10, 0, 0);
        // lp.addRule(RelativeLayout.BELOW, id);
        return lp;
    }

    private RelativeLayout.LayoutParams getAttachmentLayoutParam(int id,
                                                                 int topMargin, int BottomMArgin) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                dpToPx(25), dpToPx(25));
        // lp.addRule(setAlignmentOfView(Helper.getInt(questionObject.getAlign())));
        lp.addRule(RelativeLayout.BELOW, id);
        // lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        // lp.addRule(RelativeLayout.ALIGN_RIGHT);
        lp.setMargins(10, topMargin, 0, BottomMArgin);
        // lp.addRule(RelativeLayout.BELOW, id);
        return lp;
    }

    private RelativeLayout.LayoutParams getAttachmentLayoutParamEye(int id,
                                                                    int topMargin, int BottomMArgin) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                dpToPx(25), dpToPx(25));
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT, RelativeLayout.TRUE);
        } else
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, RelativeLayout.TRUE);
        lp.setMargins(0, 0, 5, 10);
        lp.addRule(RelativeLayout.BELOW, id);
        return lp;
    }

    // private RelativeLayout.LayoutParams getLayoutParamRight()
    // {
    // RelativeLayout.LayoutParams lp=new
    // RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,
    // RelativeLayout.LayoutParams.WRAP_CONTENT);
    // //lp.addRule(setAlignmentOfView(1));
    // lp.addRule(RelativeLayout.RIGHT_OF, viewId-1);
    // return lp;
    // }

    private RelativeLayout.LayoutParams getEditTextLayoutParam(int id,
                                                               boolean isNumber) {
        if (isNumber) {
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                    getDisplay().getWidth() / 4,
                    RelativeLayout.LayoutParams.WRAP_CONTENT);
            lp.addRule(setAlignmentOfView(Helper.getInt(questionObject
                    .getAlign())));
            lp.addRule(RelativeLayout.BELOW, id);
            if (modeSelect == 3) {
                lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
                lp.addRule(RelativeLayout.ALIGN_RIGHT);
            }
            return lp;
        } else {
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                    getDisplay().getWidth(),
                    RelativeLayout.LayoutParams.WRAP_CONTENT);
            lp.addRule(setAlignmentOfView(Helper.getInt(questionObject
                    .getAlign())));
            lp.addRule(RelativeLayout.BELOW, id);
            if (modeSelect == 3) {
                lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
                lp.addRule(RelativeLayout.ALIGN_RIGHT);
            }
            return lp;
        }
    }

    private RelativeLayout.LayoutParams getReplyEditTextLayoutParam(int id) {
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                LayoutParams.MATCH_PARENT,
                LayoutParams.WRAP_CONTENT);
        lp.addRule(setAlignmentOfView(Helper.getInt(questionObject
                .getAlign())));
        lp.addRule(RelativeLayout.BELOW, id);
        if (modeSelect == 3) {
            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
            lp.addRule(RelativeLayout.ALIGN_RIGHT);
        }
        lp.setMargins(10, 0, 10, 0);
        return lp;

    }

    private RelativeLayout.LayoutParams getDrawingViewLayoutParams(int id) {

        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                getDisplay().getWidth(), getDisplay().getHeight());
        lp.addRule(RelativeLayout.BELOW, id);
        return lp;

    }

    private WebView getwebText(String input) {
        WebView webview = new WebView(QuestionnaireActivity.this);
        String content = "</br>" + input;// + "</HTML></BODY>";
        if (content != null && !content.equals("")) {
            content = content.replace("&lt;", "<");
            content = content.replace("&gt;", ">");
            content = content.replace("&quot;", "\"");
            WebView wv = webview;
            final String mimeType = "text/html";
            final String encoding = "UTF-8";
            wv.loadDataWithBaseURL("", content, mimeType, encoding, "");
        }
        return webview;
    }

    private WebView getwebviewInsteadOfTextView(String input) {
        WebView webview = new WebView(QuestionnaireActivity.this);
        String content = "<HTML><BODY>" + input + "</HTML></BODY>";
        if (content != null && !content.equals("")) {
            content = content.replace("&lt;", "<");
            content = content.replace("&gt;", ">");
            content = content.replace("&quot;", "\"");
            WebView wv = webview;
            final String mimeType = "text/html";
            final String encoding = "UTF-8";
            wv.loadDataWithBaseURL("", content, mimeType, encoding, "");
        }
        viewId = getViewId(viewId);
        webview.setId(viewId);
        return webview;
    }

    private View getViewByObjectType(int type, boolean isPrev) {
        switch (type) {
            case 2:
                if (questionObject != null && questionObject.getText() != null
                        && Helper.getSystemURL() != null
                        && questionObject.getText().contains("<img"))
                    return getwebviewInsteadOfTextView(ConvertTextCodetoText(
                            questionObject.getText(), false));
                return getTextView();
            case 3:

                if (questionObject.getPictureFilename().toLowerCase()
                        .endsWith(".mp4")
                        || questionObject.getPictureFilename().toLowerCase()
                        .endsWith(".avi")
                        || questionObject.getPictureFilename().toLowerCase()
                        .endsWith(".3gp")) {

                    File root = CheckerApp.localFilesDir;//android.os.Environment.getExternalStorageDirectory();
                    String path = root.getAbsolutePath()
                            + "/mnt/sdcard/CheckerVideos/";
                    File rootFile = new File(path,
                            questionObject.getPictureFilename());
                    if (rootFile.exists()
                            && rootFile.getAbsolutePath().toLowerCase()
                            .endsWith(".mp4")) {
                        return getVideoView(rootFile.getAbsolutePath());
                    }
                } else {
                    return getIamgeView();
                }
            case 7:
                // return getVideoView();
            case 8:
                return getLinkedTextView();
            case 9:
                // questionnaireLayout.addView(displayLabel(questionObject.getWorkerInputCaption()),
                // getLayoutParam(viewId-1));
                // displayLabel(questionObject.getWorkerInputCaption())
                // return getDropDownView(null, null, listWorkers, isPrev);
            case 10:
                // questionnaireLayout.addView(displayLabel(questionObject.getBranchInputCaption()),
                // getLayoutParam(viewId-1));
                // displayLabel(questionObject.getBranchInputCaption());
                // return getDropDownView(null, listBranches, null, isPrev);
        }
        return null;
    }

    // private View getVideoView() {
    // try {
    // VideoView videoview=new vide
    // ImageView iv = new ImageView(this.getApplicationContext());
    // LayoutParams lp = new LayoutParams(getDisplay().getWidth(),
    // getDisplay().getHeight() / 2);
    // iv.setLayoutParams(lp);
    // ByteArrayInputStream imageStream = new ByteArrayInputStream(
    // questionObject.getPictureData());
    // Bitmap theImage = BitmapFactory.decodeStream(imageStream);
    // Helper.thisImage = theImage;
    // iv.setImageBitmap(theImage);
    // iv.setOnClickListener(new OnClickListener() {
    //
    // @Override
    // public void onClick(View v) {
    //
    // Intent intent = new Intent(QuestionnaireActivity.this,
    // TouchImageViewActivity.class);
    // startActivity(intent);
    // }
    // });
    // viewId = getViewId(viewId);
    // iv.setId(viewId);
    // // iv.setMaxZoom(4f);
    //
    // return iv;
    // } catch (Exception e) {
    // e.printStackTrace();
    // }
    // return null;
    // }
    ImageView iv = null;
    private View miView;
    private VideoView vv;

    private ImageView getIamgeView() {
        try {
            iv = new ImageView(this.getApplicationContext());
            LayoutParams lp = new LayoutParams(getDisplay().getWidth(),
                    getDisplay().getHeight() / 8);
            iv.setLayoutParams(lp);
            ByteArrayInputStream imageStream = new ByteArrayInputStream(
                    questionObject.getPictureData());
            Bitmap theImage = BitmapFactory.decodeStream(imageStream);
            iv.setTag(theImage);
            iv.setImageBitmap(theImage);
            iv.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {

                    Helper.thisImage = (Bitmap) v.getTag();
                    Intent intent = new Intent(QuestionnaireActivity.this,
                            TouchImageViewActivity.class);
                    startActivity(intent);
                }
            });
            viewId = getViewId(viewId);
            iv.setId(viewId);
            // iv.setMaxZoom(4f);

            return iv;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private static String getHtmlImageView(byte[] pictureData, String fileName, Bitmap theImage) {
        if (pictureData == null && theImage != null) {
            try {
                String path = DBHelper.writeOrGetImagePathPreview(fileName, theImage);
                if (path != null && !path.equals(""))
                    return "<img src=\"" + path + "\">";

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (pictureData != null) {
            try {
                ByteArrayInputStream imageStream = new ByteArrayInputStream(
                        pictureData);
                theImage = BitmapFactory.decodeStream(imageStream);
                String path = DBHelper.writeOrGetImagePathPreview(fileName, theImage);
                if (path != null && !path.equals(""))
                    return "<img src=\"" + path + "\">";

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return "";
    }

    private View getVideoView(String path) {
        try {
            // Toast.makeText(QuestionnaireActivity.this, path,
            // Toast.LENGTH_LONG)
            // .show();
            LinearLayout llayout = new LinearLayout(QuestionnaireActivity.this);
            int orientation = getResources().getConfiguration().orientation;
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                        getDisplay().getWidth(), (int) (getDisplay().getHeight()));
                llayout.setLayoutParams(lp);
                llayout.setBackgroundColor(Color.parseColor("#101110"));
            } else {
                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                        getDisplay().getHeight(), (int) (getDisplay().getWidth()));
                llayout.setLayoutParams(lp);
                llayout.setBackgroundColor(Color.parseColor("#101110"));
            }


            vv = new VideoView(QuestionnaireActivity.this);
            LinearLayout.LayoutParams lpp = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.FILL_PARENT,
                    LinearLayout.LayoutParams.FILL_PARENT);
            lpp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;

            llayout.addView(vv, lpp);

            // vv.setBackgroundColor(Color.parseColor("#787878"));
            vv.setVideoURI(Uri.parse(path));
            vv.setMediaController(new MediaController(
                    QuestionnaireActivity.this));
            vv.requestFocus();
            vv.setZOrderOnTop(true);
            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    vv.start();
                }
            }, 500);

            viewId = getViewId(viewId);
            llayout.setId(viewId);
            return llayout;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public String getImagePath() {
        StringBuffer sb = new StringBuffer();
        sb.append(Helper.getSystemURL());
        sb.append("/checker-files/media/");
        sb.append(companyLink);
        sb.append("/pictures/");
        sb.append(questionObject.getPictureFilename());
        return sb.toString();
    }

    private TextView getLinkedTextView() {
        TextView tv = new TextView(this.getApplicationContext());
        final String str = ConvertTextCodetoText(
                questionObject.getUrlContent(), false);
        tv.setText(Html.fromHtml("<a href=\"http://www.google.com\">" + str
                + "</a> "));
        tv.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent browse = new Intent(Intent.ACTION_VIEW, Uri.parse(Helper
                        .getValidURLForWebView(str)));
                startActivity(browse);
            }
        });
        viewId = getViewId(viewId);
        tv.setId(viewId);
        setFontSize(tv);
        return tv;
    }

    private TextView getTextView() {
        TextView tv = new TextView(QuestionnaireActivity.this);

        String inputstring = ConvertTextCodetoText(questionObject.getText(),
                false);
        tv = setTextViewProperties(tv, inputstring, questionObject.getFont(),
                questionObject.getColor(), questionObject.getSize(),
                questionObject.getItalics(), questionObject.getBold(),
                questionObject.getUnderline(), questionObject.getAlign());
        if (!questionObject.getText().contains("href")) {

            tv = setTextViewProperties(tv, questionObject.getText(),
                    questionObject.getFont(), questionObject.getColor(),
                    questionObject.getSize(), questionObject.getItalics(),
                    questionObject.getBold(), questionObject.getUnderline(),
                    questionObject.getAlign());
            setFontSize(tv);
            tv = getTextFromHtmlFormate(
                    Helper.getValidString(questionObject.getText()), tv);
            tv = getTextFromHtmlFormate(tv.getText().toString(), tv);
            String str = ConvertTextCodetoText(tv.getText().toString(), false);
            tv.setText(Helper.makeHtmlString(str));

        } else {

            tv.setText(Html.fromHtml(questionObject.getText()));
            String value = tv.getText().toString();
            tv.setText(Html.fromHtml(value));
            tv.setMovementMethod(LinkMovementMethod.getInstance());
            tv.setLinksClickable(true);
            tv.setAutoLinkMask(Linkify.ALL);
        }
        viewId = getViewId(viewId);
        tv.setId(viewId);
        if (Build.VERSION.SDK_INT > 13) {
            if (modeSelect == 3)
                tv.setGravity(Gravity.RIGHT);
        }

        // String str1 =
        // "&lt;h3 style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;color:#ffa500;&quot;"
        // +
        // "&gt;&lt;span style=&quot;background-color:#f0ffff;&quot;&gt;Short Branch Name: &lt;/span&gt;&lt;"
        // +
        // "span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;background-color:#f0ffff;&quot;"
        // +
        // "&gt;$[201]$  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 18px; color: "
        // +
        // "rgb(0, 204, 0); text-align: center;&quot;&gt;About Employees&lt;/span&gt;&lt;/h3&gt;";
        //
        // tv = getTextFromHtmlFormate(str1, tv);
        // tv = getTextFromHtmlFormate(tv.getText().toString(), tv);

        return tv;
    }

    private TextView setTextViewProperties(TextView tv, String text,
                                           String font, String color, String size, String italic, String bold,
                                           String underline, String align) {
        tv.setTextColor(Helper.getIntColor(color));

        float f = Helper.getFloat(size);
        if (f != 0)
            tv.setTextSize(f);
        if (Helper.comapreString(italic, "1"))
            tv.setTypeface(null, Typeface.ITALIC);
        if (Helper.comapreString(bold, "1"))
            tv.setTypeface(null, Typeface.BOLD);

        if (Helper.comapreString(underline, "1"))
            tv = setUnderLineText(text, tv);
        tv.setGravity(setGravityAlignment(Helper.getInt(align)));
        setFontSize(tv);
        return tv;
    }

    private View getQuestionDescriptionView() {
        String questionText = questionObject.getQuestionDescription();
        if (questionObject.getMiType().equals("11")
                || questionObject.getMiType().equals("12")
                || questionObject.getMiType().equals("13")
                || questionObject.getMiType().equals("14")
                || questionObject.getMiType().equals("15")) {
            if (questionObject.getListAnswers() == null
                    || questionObject.getListAnswers().size() == 0)
                questionText = "";
        }
        TextView tv = new TextView(this.getApplicationContext());
        if (Helper.comapreString(questionObject.getAttachment(), "1"))
            IsAttachement = true;
        tv = setTextViewProperties(tv, questionText,
                questionObject.getFont(), questionObject.getColor(),
                questionObject.getSize(), questionObject.getItalics(), "0",
                questionObject.getUnderline(), questionObject.getAlign());

        tv = getTextFromHtmlFormate(
                Helper.getValidString(questionText),
                tv);
        tv = getTextFromHtmlFormate(tv.getText().toString(), tv);
        tv.setText(Helper.makeHtmlString(ConvertTextCodetoText(
                questionText, false)));
        if (Helper.IsEmptyString(tv.getText().toString()))
            tv.setVisibility(View.GONE);
        viewId = getViewId(viewId);
        tv.setId(viewId);
        // if (Build.VERSION.SDK_INT > 13) {
        if (modeSelect == 3)
            tv.setGravity(Gravity.RIGHT);
        // }
        setFontSize(tv);
        if (thisAutoValues != null && thisAutoValues.size() > 0)
            tv.setText("");

        tv.setPadding(Constants.dpToPx(20), 0, Constants.dpToPx(20), 0);
        return tv;
    }

    private View getAnswersView(boolean isPrev,
                                RelativeLayout questionnaireLayout) {
        if (isSplit)
            return null;
        ArrayList<Answers> listAnswersTemp = questionObject.getListAnswers(set,
                questionObject.getDataID());

        if (listAnswersTemp == null)
            return null;

        listAnswers = new ArrayList<Answers>();
        for (int i = 0; i < listAnswersTemp.size(); i++) {
            if (listAnswersTemp.get(i) != null
                    && listAnswersTemp.get(i).getAnswerDisplayCondition() != null) {
                if (IsObjectdisplaybyCondition(listAnswersTemp.get(i)
                        .getAnswerDisplayCondition()))
                    listAnswers.add(listAnswersTemp.get(i));

            } else
                listAnswers.add(listAnswersTemp.get(i));
        }
        // Helper.getSortData(Helper.getInt(questionObject.getAnswerOrdering()),
        // listAnswers);sid מזון תינוקות
        int thisviewid = viewId;
        View v = getAnswersView(Helper.getInt(questionObject.getDisplayType()),
                Helper.getInt(questionObject.getQuestionTypeLink()),
                listAnswers, isPrev, questionnaireLayout);
        viewId = getViewId(viewId);
        if (v != null) {
            v.setId(viewId);
        } else
            viewId = thisviewid;

        return v;
    }

    private int getSDK() {
        String str = android.os.Build.VERSION.SDK;
        int sdk = Integer.valueOf(str);
        return sdk;
    }

    private View getEditTextView(int type, boolean isPrev) {

        final TextView txtView = new TextView(this.getApplicationContext());

        String color = "#00FF00";

        textbox = new EditText(this.getApplicationContext());
        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        textbox.setBackgroundDrawable(d);

        textbox.setTextColor(getResources().getColor(
                android.R.color.black));

        viewId = getViewId(viewId);
        miEditViewId = viewId;
        textbox.setId(viewId);
        textbox.setOnFocusChangeListener(onKeyBoardOn);
        if (modeSelect == 3) {
            textbox.setGravity(Gravity.RIGHT);
        } else if (modeSelect == 3 && outerQuestionObject == null) {
            textbox.setGravity(Gravity.RIGHT | Gravity.TOP);
        } else if (outerQuestionObject == null)
            textbox.setGravity(Gravity.TOP);
        String str = android.os.Build.VERSION.SDK;
        int sdk = Integer.valueOf(str);
        if (isPrev) {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            if (qd != null)
                textbox.setText(Helper.makeHtmlString(qd.getAnswerText()));
        }
        setFontSize(textbox);
        txtCurrent = textbox;
        if (sdk >= 14) {
            txtCurrent.requestFocus();
            txtCurrent.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    {
                        InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                        keyboard.showSoftInput(txtCurrent, 0);
                    }
                }
            }, 50);

            txtCurrent.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {
                    InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    keyboard.showSoftInput(textbox, 0);
                }
            });
        }
        switch (type) {
            case 0:
                textbox.setVisibility(RelativeLayout.GONE);
                break;
            case 1:
                textbox.setInputType(InputType.TYPE_CLASS_TEXT
                        | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
                textbox.setSingleLine(false);
                textbox.setLines(4); // desired number of lines
                textbox.setHorizontallyScrolling(false);

                textbox.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
                txtView.setTextSize(22);

                textbox.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start,
                                                  int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start,
                                              int before, int count) {

                        String color = "#00FF00";
                        count = s.length();

                        String txt = "";
                        if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0
                                && (Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == 0 || Helper
                                .getInt(questionObject
                                        .getMiFreeTextMaxlength()) == Integer.MAX_VALUE)) {
                            txtView.setVisibility(RelativeLayout.INVISIBLE);
                        } else if (Helper.getInt(questionObject
                                .getMiFreeTextMinlength()) == 0) {
                            // <string name="questionnaire_min_zero_max">#MAX#
                            // characters
                            // left.</string>
                            txt = getString(R.string.questionnaire_min_zero_max);

                        } else if (Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == 0
                                || Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == Integer.MAX_VALUE) {
                            // <string name="questionnaire_min_max">Minimum #MIN#
                            // characters.</string>
                            txt = getString(R.string.questionnaire_min_max);
                        } else {
                            // <string name="questionnaire_min_max_zero">#MAX#
                            // characters
                            // left.
                            // Minimum #MIN# characters.</string>
                            txt = getString(R.string.questionnaire_min_max_zero);
                        }

                        txt = txt.replace(
                                "#MAX#",
                                (Helper.getInt(questionObject
                                        .getMiFreeTextMaxlength()) - count) + "");
                        int min = (Helper.getInt(questionObject
                                .getMiFreeTextMinlength()) - count);
                        if (min < 0) min = 0;
                        txt = txt.replace("#MIN#",
                                min + "");
                        txtView.setText(txt);
                        txtView.setTextColor(Color.parseColor("#993f6c"));

                    }
                });

                String txt = "";
                if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0
                        && (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == 0 || (Helper
                        .getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE))) {
                    txtView.setVisibility(RelativeLayout.INVISIBLE);
                } else if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0) {
                    // <string name="questionnaire_min_zero_max">#MAX# characters
                    // left.</string>
                    txt = getString(R.string.questionnaire_min_zero_max);

                } else if (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == 0
                        || Helper.getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE) {
                    // <string name="questionnaire_min_max">Minimum #MIN#
                    // characters.</string>
                    txt = getString(R.string.questionnaire_min_max);
                } else {
                    // <string name="questionnaire_min_max_zero">#MAX# characters
                    // left.
                    // Minimum #MIN# characters.</string>
                    txt = getString(R.string.questionnaire_min_max_zero);
                }
                txt = txt
                        .replace(
                                "#MAX#",
                                (Helper.getInt(questionObject
                                        .getMiFreeTextMaxlength()) - (textbox
                                        .getText().toString().length()))
                                        + "");
                txt = txt.replace("#MIN#", questionObject.getMiFreeTextMinlength());
                txtView.setText(txt);
                txtView.setTextColor(Color.parseColor("#993f6c"));

                textbox.setFilters(new InputFilter[]{new InputFilter.LengthFilter(
                        Helper.getInt(questionObject.getMiFreeTextMaxlength()))});

                if (textbox != null && sdk < 14)
                    return textbox;
                break;
            case 2:
            case 5:
                txtView.setVisibility(RelativeLayout.INVISIBLE);
                textbox.setInputType(InputType.TYPE_CLASS_NUMBER
                        | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                // textbox.setText("");
                textbox.setOnLongClickListener(new OnLongClickListener() {

                    @Override
                    public boolean onLongClick(View arg0) {
                        Calculation c = new Calculation((EditText) arg0);
                        c.makeDialog(QuestionnaireActivity.this);
                        return false;
                    }
                });

                textbox.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start,
                                                  int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start,
                                              int before, int ccount) {

                        String color = "#00FF00";
                        double count = 0.0;
                        if (s.length() != 0) {
                            double dval = 0.0;
                            try {
                                count = Double.parseDouble(s.toString().toString());
                            } catch (Exception ex) {
                            }

                        }

                        String txt = "";
                        // if (Helper.getInt(questionObject.getMiNumberMin()) == 0
                        // && Helper.getInt(questionObject.getMiNumberMax()) == 0) {
                        // txtView.setVisibility(RelativeLayout.INVISIBLE);
                        // } else if (Helper.getInt(questionObject.getMiNumberMin())
                        // == 0) {
                        // // <string name="questionnaire_min_zero_max">#MAX#
                        // // characters
                        // // left.</string>
                        // txt = getString(R.string.questionnaire_min_zero_max_i);
                        //
                        // } else if (Helper.getInt(questionObject.getMiNumberMax())
                        // == 0) {
                        // // <string name="questionnaire_min_max">Minimum #MIN#
                        // // characters.</string>
                        // txt = getString(R.string.questionnaire_min_max_i);
                        // } else {
                        // // <string name="questionnaire_min_max_zero">#MAX#
                        // // characters
                        // // left.
                        // // Minimum #MIN# characters.</string>
                        // txt = getString(R.string.questionnaire_min_max_zero_i);
                        // }
                        // txt = txt.replace(
                        // "#MAX#",
                        // (Helper.getInt(questionObject.getMiNumberMax()) - Helper
                        // .getInt(textbox.getText().toString())) + "");
                        txt = txt.replace("#MIN#", questionObject.getMiNumberMin());
                        txtView.setText(txt);
                        txtView.setTextColor(Color.parseColor("#993f6c"));

                    }
                });
                double cccount = 0.0;
                if (textbox.getText().toString().length() > 0) {
                    try {
                        cccount = Double.parseDouble(textbox.getText().toString()
                                .toString());
                    } catch (Exception ex) {
                    }

                }

                txt = "";
                // if (Helper.getInt(questionObject.getMiNumberMin()) == 0
                // && Helper.getInt(questionObject.getMiNumberMax()) == 0) {
                // txtView.setVisibility(RelativeLayout.INVISIBLE);
                // } else if (Helper.getInt(questionObject.getMiNumberMin()) == 0) {
                // // <string name="questionnaire_min_zero_max">#MAX# characters
                // // left.</string>
                // txt = getString(R.string.questionnaire_min_zero_max_i);
                //
                // } else if (Helper.getInt(questionObject.getMiNumberMax()) == 0) {
                // // <string name="questionnaire_min_max">Minimum #MIN#
                // // characters.</string>
                // txt = getString(R.string.questionnaire_min_max_i);
                // } else {
                // // <string name="questionnaire_min_max_zero">#MAX# characters
                // // left.
                // // Minimum #MIN# characters.</string>
                // txt = getString(R.string.questionnaire_min_max_zero_i);
                // }
                // txt = txt.replace(
                // "#MAX#",
                // (Helper.getInt(questionObject.getMiNumberMax()) - Helper
                // .getInt(textbox.getText().toString())) + "");
                // txt = txt.replace("#MIN#", questionObject.getMiNumberMin());
                // txtView.setText(txt);
                // txtView.setTextColor(Color.parseColor("#993f6c"));
                txtView.setVisibility(RelativeLayout.INVISIBLE);
                break;
            case 3:
                textbox.setFocusable(false);
                textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                ShowDatePicker();
                vDateTime = Helper.DatePicker;
                break;
            case 4:
            case 6:
            case 7:
            case 8:
                textbox.setFocusable(false);
                textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                showTimePickerSeconds(textbox);
                vDateTime = Helper.TimePicker;
                break;
        }

        if (questionObject.getMiType().equals("11")) {
            SimpleDateFormat sdf = new SimpleDateFormat("kk:mm:ss",
                    Locale.ENGLISH);
            String time = sdf.format(new Date().getTime());
            textbox.setText(time);
            textbox.setTextColor(Color.BLACK);
            textbox.setVisibility(RelativeLayout.GONE);
        }
        if (questionObject.getMiType().equals("12")) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",
                    Locale.ENGLISH);
            String time = sdf.format(new Date().getTime());
            textbox.setText(time);
            textbox.setTextColor(Color.BLACK);
            textbox.setVisibility(RelativeLayout.GONE);
        }
        if (questionObject.getMiType().equals("13")) {
            getEndLocations();
            if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                    && Helper.critEndLong != null
                    && !Helper.critEndLong.equals("")) {
                textbox.setText(Helper.critEndLat + "," + Helper.critEndLong);
            } else
                textbox.setText("0,0");
            textbox.setTextColor(Color.BLACK);
            textbox.setVisibility(RelativeLayout.GONE);

        }
        if (questionObject.getMiType().equals("14")) {// ip address
            textbox.setTextColor(Color.BLACK);
            textbox.setVisibility(RelativeLayout.GONE);
            getIpAddress(textbox);
        }
        if (questionObject.getMiType().equals("15")) {// user agent
            textbox.setTextColor(Color.BLACK);
            textbox.setVisibility(RelativeLayout.GONE);
            getUserAgent(textbox);
        }

        LinearLayout hebrewLayout = new LinearLayout(
                this.getApplicationContext());
        hebrewLayout.setOrientation(LinearLayout.VERTICAL);
        if (modeSelect == 3) {
            txtView.setGravity(Gravity.RIGHT);
        }
        hebrewLayout.setId(viewId);
        hebrewLayout
                .addView(textbox, new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        Gravity.LEFT));

        LinearLayout.LayoutParams lpp = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.RIGHT);
        hebrewLayout.addView(txtView, lpp);
        setMiWholeView(miWholeView);

        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            textbox.setEnabled(false);
        return hebrewLayout;
    }

    private EditText getReplyEditTextView(boolean isPrev, SubmitQuestionnaireData serializeSubmitdata) {
        replyMsgBox = new EditText(this.getApplicationContext());
        replyMsgBox.setTextColor(getResources().getColor(
                android.R.color.black));
        replyMsgBox.setBackgroundResource(R.drawable.box_outline_reply);
        replyMsgBox.setPadding(10, 0, 10, 0);


        if (modeSelect == 3) {
            replyMsgBox.setGravity(Gravity.RIGHT);
        } else if (modeSelect == 3 && outerQuestionObject == null) {
            replyMsgBox.setGravity(Gravity.RIGHT | Gravity.TOP);
        } else if (outerQuestionObject == null)
            replyMsgBox.setGravity(Gravity.TOP);

        if (submitData != null && submitData.getRs() != null) {
            replyMsgBox.setText(submitData.getRs());
        } else if (serializeSubmitdata != null && serializeSubmitdata.getRs() != null) {
            replyMsgBox.setText(serializeSubmitdata.getRs());
        }

        viewId = getViewId(viewId);
        replyMsgBox.setId(viewId);
        setFontSize(replyMsgBox);
        replyMsgBox.setPadding(10, 20, 10, 20);
        return replyMsgBox;
    }


    private EditText getFreeEditTextView(boolean isPrev) {
        freeTextbox = new EditText(this.getApplicationContext());
        freeTextbox.setTextColor(getResources().getColor(
                android.R.color.black));
        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        freeTextbox.setBackgroundDrawable(d);


        if (isPrev) {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            if (qd != null && qd.getFreetext() != null)
                freeTextbox.setText(Helper.makeHtmlString(qd.getFreetext()));
        }

        if (modeSelect == 3) {
            freeTextbox.setGravity(Gravity.RIGHT);
        } else if (modeSelect == 3 && outerQuestionObject == null) {
            freeTextbox.setGravity(Gravity.RIGHT | Gravity.TOP);
        } else if (outerQuestionObject == null)
            freeTextbox.setGravity(Gravity.TOP);

        viewId = getViewId(viewId);
        freeTextbox.setId(viewId);
        setFontSize(freeTextbox);
        txtCurrent = freeTextbox;
        if (getSDK() >= 14) {
            txtCurrent.requestFocus();

            txtCurrent.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    {
                        InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                        keyboard.showSoftInput(txtCurrent, 0);
                    }
                }
            }, 50);
        }
        return freeTextbox;
    }

    private EditText getFreeEditTextViewWithType(String PreviousValue, int type) {
        EditText freeTextbox = new EditText(this.getApplicationContext());
        freeTextbox.setTextColor(getResources().getColor(
                android.R.color.black));
        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        freeTextbox.setBackgroundDrawable(d);

        if (modeSelect == 3) {
            freeTextbox.setGravity(Gravity.RIGHT);
        } else if (modeSelect == 3 && outerQuestionObject == null) {
            freeTextbox.setGravity(Gravity.RIGHT | Gravity.TOP);
        } else if (outerQuestionObject == null)
            freeTextbox.setGravity(Gravity.TOP);
        viewId = getViewId(viewId);
        freeTextbox.setId(viewId);
        setFontSize(freeTextbox);
        txtCurrent = freeTextbox;
        if (getSDK() >= 14) {
            txtCurrent.requestFocus();

            txtCurrent.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    {
                        InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                        keyboard.showSoftInput(txtCurrent, 0);
                    }
                }
            }, 50);
        }
        if (PreviousValue != null) {
            freeTextbox.setText(PreviousValue);
        }

        if (type >= 0)
            freeTextbox.setInputType(type);
        else {
            freeTextbox.setSingleLine(true);

        }
        return freeTextbox;
    }

    private TextView setUnderLineText(String text, TextView tv) {
        tv.setPaintFlags(tv.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
        tv.setText(Helper.makeHtmlString(Helper.getValidString(text)));
        return tv;
    }

    // ****Start ***//

    private RadioButton setRadioButtonTextViewProperties(RadioButton rb,
                                                         String text, String color, String italic, String bold,
                                                         String underline) {
        rb = getTextFromHtmlFormate(Helper.getValidString(text), rb);
        rb = getTextFromHtmlFormate(rb.getText().toString(), rb);
        // rb.setText(Helper.getValidString(text));
        rb.setTextColor(Helper.getIntColor(color));
        if (Helper.comapreString(italic, "1"))
            rb.setTypeface(null, Typeface.ITALIC);
        if (Helper.comapreString(bold, "1"))
            rb.setTypeface(null, Typeface.BOLD);
        if (Helper.comapreString(underline, "1"))
            rb = (RadioButton) setUnderLineText(text, rb);
        setFontSize(rb);
        return rb;
    }

    private Drawable getThisDrawable(String name) {
        boolean isDownloadedYet = myPrefs.getBoolean(
                Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH, false);
        Display display = getWindowManager().getDefaultDisplay();
        Point size = new Point();
        getDisplay().getSize(size);
        int width = size.x;
        int height = size.y;
        Bitmap bitmap = Bitmap.createScaledBitmap(
                helper.readFile(name, isDownloadedYet), (width / 2) - 80,
                (width / 2) - 80, false);
        Drawable d = new BitmapDrawable(getResources(), bitmap);

        return d;
    }

    private RadioButton setRadioButtonImageViewProperties(RadioButton rb,
                                                          String text, String color, String italic, String bold,
                                                          String underline) {
        // rb = getTextFromHtmlFormate(Helper.getValidString(text), rb);
        // rb = getTextFromHtmlFormate(rb.getText().toString(), rb);
        rb.setText("      ");
        rb.setTextColor(Helper.getIntColor(color));
        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
        boolean isDownloadedYet = myPrefs.getBoolean(
                Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH, false);
        Drawable d = new BitmapDrawable(getResources(), helper.readFile(text,
                isDownloadedYet));
        rb.setCompoundDrawablesWithIntrinsicBounds(null, null, d, null);
        // if (Helper.comapreString(italic, "1"))
        // rb.setTypeface(null, Typeface.ITALIC);
        // if (Helper.comapreString(bold, "1"))
        // rb.setTypeface(null, Typeface.BOLD);
        // if (Helper.comapreString(underline, "1"))
        // rb = (RadioButton) setUnderLineText(text, rb);
        // setFontSize(rb);
        return rb;
    }

    private CheckBox getShowCriticalView() {
        CheckBox ckb = new CheckBox(this.getApplicationContext());
        if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
            ckb.setButtonDrawable(getResources().getDrawable(
                    R.drawable.checkbox_selector_n));
        } else {
            ckb.setButtonDrawable(getResources().getDrawable(
                    R.drawable.checkbox_selector));

        }
        ckb.setText("Critical");
        ckb.setTextColor(Helper.getIntColor(questionObject.getColor()));
        viewId = getViewId(viewId);
        ckb.setId(viewId);
        setFontSize(ckb);
        return ckb;
    }

    // *****End*****//

    private TextView getMiView() {
        TextView tv = new TextView(this.getApplicationContext());
        StringBuffer sb = new StringBuffer();
        if (Helper.comapreString(questionObject.getMiMandatory(), "1")) {
            sb.append("*");
            IsMiMandatory = true;
        }
        sb.append(Helper.getValidString(questionObject.getMiDescription()));
        // Log.v("sb text",sb.toString());
        tv = getTextFromHtmlFormate(sb.toString(), tv);
        sb = null;
        viewId = getViewId(viewId);
        miLabelViewId = viewId;
        tv.setId(viewId);
        tv = setTextViewProperties(tv, questionObject.getQuestionDescription(),
                questionObject.getFont(), questionObject.getColor(),
                questionObject.getSize(), questionObject.getItalics(),
                questionObject.getBold(), questionObject.getUnderline(),
                questionObject.getAlign());
        setFontSize(tv);
        mitv = tv;
        return tv;
    }

    private View getMiView(int type, boolean isPrev) {
        if (type == 3 || type == 4 || type == 6 || type == 7 || type == 8) {
            textbox = null;
            Button btn = btextbox = new Button(this.getApplicationContext());
            if (selectedAnswerForMiView != null)
                show_hide_mi(selectedAnswerForMiView);
            if (uqHelper != null)
                uqHelper.qGroups = null;

            uqHelper = null;
            vDateTime = getDateButtonEditTextView(this, btn, type, isPrev,
                    questionObject);
            return btn;
        }
        View viewtextBox = getEditText(type, isPrev);
        EditText editText = textbox;
        if (editText != null) {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            if (qd != null && qd.getMi() != null)
                editText.setText(Helper.makeHtmlString(qd.getMi()));
            else if (qd != null && qd.getAnswerText() != null)
                editText.setText(Helper.makeHtmlString(qd.getAnswerText()));
        }

        if (questionObject.getMiType().equals("11")) {
            SimpleDateFormat sdf = new SimpleDateFormat("kk:mm:ss",
                    Locale.ENGLISH);
            String time = sdf.format(new Date().getTime());
            editText.setText(time);
            editText.setTextColor(Color.BLACK);
            editText.setVisibility(RelativeLayout.GONE);
            viewtextBox.setVisibility(RelativeLayout.GONE);
        }
        if (questionObject.getMiType().equals("12")) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",
                    Locale.ENGLISH);
            String time = sdf.format(new Date().getTime());
            editText.setText(time);
            editText.setTextColor(Color.BLACK);
            editText.setVisibility(RelativeLayout.GONE);
            viewtextBox.setVisibility(RelativeLayout.GONE);
        }
        if (questionObject.getMiType().equals("13")) {
            getEndLocations();
            if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                    && Helper.critEndLong != null
                    && !Helper.critEndLong.equals("")) {
                editText.setText(Helper.critEndLat + "," + Helper.critEndLong);
            } else
                editText.setText("0,0");
            editText.setTextColor(Color.BLACK);
            editText.setVisibility(RelativeLayout.GONE);
            viewtextBox.setVisibility(RelativeLayout.GONE);

        }
        if (questionObject.getMiType().equals("14")) {// ip address
            editText.setTextColor(Color.BLACK);
            editText.setVisibility(RelativeLayout.GONE);
            viewtextBox.setVisibility(RelativeLayout.GONE);
            getIpAddress(editText);
        }
        if (questionObject.getMiType().equals("15")) {// user agent
            editText.setTextColor(Color.BLACK);
            editText.setVisibility(RelativeLayout.GONE);
            viewtextBox.setVisibility(RelativeLayout.GONE);
            getUserAgent(editText);
        }

        miView = viewtextBox;
        return viewtextBox;
    }

    private void getUserAgent(EditText editText) {
        String s = "User-Agent:";
        s += "\n OS Version: " + System.getProperty("os.version");
        s += "\n OS API Level: " + android.os.Build.VERSION.RELEASE + "("
                + android.os.Build.VERSION.SDK_INT + ")";
        s += "\n Device: " + android.os.Build.DEVICE;
        s += "\n Model (and Product): " + android.os.Build.MODEL + " ("
                + android.os.Build.PRODUCT + ")";
        editText.setText(s);
    }

    public String getLocalIpAddress() {
        if (IsInternetConnectted()) {
            try {
                for (Enumeration<NetworkInterface> en = NetworkInterface
                        .getNetworkInterfaces(); en.hasMoreElements(); ) {
                    NetworkInterface intf = en.nextElement();
                    for (Enumeration<InetAddress> enumIpAddr = intf
                            .getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
                        InetAddress inetAddress = enumIpAddr.nextElement();
                        if (!inetAddress.isLoopbackAddress()) {
                            return inetAddress.getHostAddress();
                        }
                    }
                }
            } catch (SocketException ex) {
                Log.e("ques", ex.toString());
            }
        } else {
            myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
            if (myPrefs.contains(Constants.DOWNLOADIP))
                return myPrefs.getString(Constants.DOWNLOADIP, "");
        }
        return "";
    }

    private void getIpAddress(EditText editText) {
        editText.setText(getLocalIpAddress());
    }

    private View getEditText(int type, boolean isPrev) {

        final TextView txtView = new TextView(this.getApplicationContext());
        btextbox = null;
        textbox = new EditText(this.getApplicationContext());
        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            textbox.setEnabled(false);
        textbox.setTextColor(getResources().getColor(
                android.R.color.black));
        Drawable d = getResources().getDrawable(R.drawable.backdatebox);
        textbox.setBackgroundDrawable(d);

        textbox.setMinWidth(Helper.getInt(questionObject
                .getMiFreeTextMinlength()));
        textbox.setMaxWidth(Helper.getInt(questionObject
                .getMiFreeTextMaxlength()));
        if (modeSelect == 3) {
            textbox.setGravity(Gravity.RIGHT);
        } else if (modeSelect == 3 && outerQuestionObject == null) {
            textbox.setGravity(Gravity.RIGHT | Gravity.TOP);
        } else if (outerQuestionObject == null)
            textbox.setGravity(Gravity.TOP);
        textbox.setLines(Helper.getInt(questionObject.getMiFreeTextMaxlength()));
        viewId = getViewId(viewId);
        miEditViewId = viewId;
        textbox.setOnFocusChangeListener(onKeyBoardOn);
        textbox.setId(viewId);
        {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            if (qd != null)
                textbox.setText(Helper.makeHtmlString(qd.getAnswerText()));
        }
        setFontSize(textbox);
        String color = "#00FF00";
        switch (type) {
            case 1:
                if (!Helper.isSuggestionsEnabled())
                    textbox.setInputType(InputType.TYPE_CLASS_TEXT
                            | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
                else textbox.setInputType(InputType.TYPE_CLASS_TEXT);
                textbox.setSingleLine(false);
                textbox.setLines(4); // desired number of lines
                textbox.setHorizontallyScrolling(false);
                textbox.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
                if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0
                        && Helper.getInt(questionObject.getMiFreeTextMaxlength()) == 0) {
                    txtView.setVisibility(RelativeLayout.INVISIBLE);
                } else
                    txtView.setVisibility(RelativeLayout.VISIBLE);

                String txt = "";
                if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0
                        && (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == 0 || (Helper
                        .getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE))) {
                    txtView.setVisibility(RelativeLayout.INVISIBLE);
                } else if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0) {
                    // <string name="questionnaire_min_zero_max">#MAX# characters
                    // left.</string>
                    txt = getString(R.string.questionnaire_min_zero_max);

                } else if (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == 0
                        || (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE)) {

                    // <string name="questionnaire_min_max">Minimum #MIN#
                    // characters.</string>
                    txt = getString(R.string.questionnaire_min_max);
                } else {
                    // <string name="questionnaire_min_max_zero">#MAX# characters
                    // left.
                    // Minimum #MIN# characters.</string>
                    txt = getString(R.string.questionnaire_min_max_zero);
                }
                txt = txt
                        .replace(
                                "#MAX#",
                                (Helper.getInt(questionObject
                                        .getMiFreeTextMaxlength()) - textbox
                                        .getText().length())
                                        + "");
                txt = txt.replace("#MIN#", questionObject.getMiFreeTextMinlength());
                txtView.setText(txt);
                txtView.setTextColor(Color.parseColor("#993f6c"));

                textbox.setFilters(new InputFilter[]{new InputFilter.LengthFilter(
                        Helper.getInt(questionObject.getMiFreeTextMaxlength()))});

                textbox.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start,
                                                  int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start,
                                              int before, int count) {

                        String color = "#00FF00";
                        count = s.length();

                        String txt = "";
                        if (Helper.getInt(questionObject.getMiFreeTextMinlength()) == 0
                                && Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == 0) {
                            txtView.setVisibility(RelativeLayout.INVISIBLE);
                        } else if (Helper.getInt(questionObject
                                .getMiFreeTextMinlength()) == 0) {
                            // <string name="questionnaire_min_zero_max">#MAX#
                            // characters
                            // left.</string>
                            txt = getString(R.string.questionnaire_min_zero_max);

                        } else if (Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == 0
                                || (Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == Integer.MAX_VALUE)) {

                            // <string name="questionnaire_min_max">Minimum #MIN#
                            // characters.</string>
                            txt = getString(R.string.questionnaire_min_max);
                        } else {
                            // <string name="questionnaire_min_max_zero">#MAX#
                            // characters
                            // left.
                            // Minimum #MIN# characters.</string>
                            txt = getString(R.string.questionnaire_min_max_zero);
                        }
                        txt = txt.replace(
                                "#MAX#",
                                ""
                                        + (Helper.getInt(questionObject
                                        .getMiFreeTextMaxlength()) - count));
                        txt = txt.replace("#MIN#",
                                questionObject.getMiFreeTextMinlength());
                        txtView.setText(txt);
                        txtView.setTextColor(Color.parseColor("#993f6c"));

                    }
                });

                break;
            case 2:
            case 5:

                textbox.setInputType(InputType.TYPE_CLASS_NUMBER
                        | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                textbox.setText("");
                textbox.setOnLongClickListener(new OnLongClickListener() {

                    @Override
                    public boolean onLongClick(View arg0) {

                        Calculation c = new Calculation((EditText) arg0);
                        c.makeDialog(QuestionnaireActivity.this);
                        return false;
                    }
                });

                textbox.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start,
                                                  int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start,
                                              int before, int ccount) {

                        String color = "#00FF00";

                        double count = 0.0;
                        try {
                            if (textbox.getText().toString().length() > 0) {
                                try {
                                    count = Double.parseDouble(s.toString());
                                } catch (Exception ex) {
                                }

                            }
                        } catch (Exception ex) {

                        }

                        String txt = "";
                        if (Helper.getInt(questionObject.getMiNumberMin()) == 0
                                && (Helper.getInt(questionObject.getMiNumberMax()) == 0 || (Helper
                                .getInt(questionObject
                                        .getMiFreeTextMaxlength()) == Integer.MAX_VALUE))) {
                            txtView.setVisibility(RelativeLayout.INVISIBLE);
                        } else if (Helper.getInt(questionObject.getMiNumberMin()) == 0) {
                            // <string name="questionnaire_min_zero_max">#MAX#
                            // characters
                            // left.</string>
                            txt = getString(R.string.questionnaire_min_zero_max);

                        } else if (Helper.getInt(questionObject.getMiNumberMax()) == 0
                                || (Helper.getInt(questionObject
                                .getMiFreeTextMaxlength()) == Integer.MAX_VALUE)) {
                            // <string name="questionnaire_min_max">Minimum #MIN#
                            // characters.</string>
                            txt = getString(R.string.questionnaire_min_max);
                        } else {
                            // <string name="questionnaire_min_max_zero">#MAX#
                            // characters
                            // left.
                            // Minimum #MIN# characters.</string>
                            txt = getString(R.string.questionnaire_min_max_zero);
                        }
                        txt = txt.replace(
                                "#MAX#",
                                (Helper.getInt(questionObject.getMiNumberMax()) - Helper
                                        .getInt(textbox.getText().toString())) + "");
                        txt = txt.replace("#MIN#", questionObject.getMiNumberMin());
                        txtView.setText(txt);
                        txtView.setTextColor(Color.parseColor("#993f6c"));

                    }
                });

                double cccount = 0.0;
                try {
                    if (textbox.getText().toString().length() > 0) {
                        try {
                            cccount = Double.parseDouble(textbox.getText()
                                    .toString().toString());
                        } catch (Exception ex) {
                        }

                    }
                } catch (Exception ex) {

                }

                txt = "";
                if (Helper.getInt(questionObject.getMiNumberMin()) == 0
                        && (Helper.getInt(questionObject.getMiNumberMax()) == 0 || (Helper
                        .getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE))) {
                    txtView.setVisibility(RelativeLayout.INVISIBLE);
                } else if (Helper.getInt(questionObject.getMiNumberMin()) == 0) {
                    // <string name="questionnaire_min_zero_max">#MAX# characters
                    // left.</string>
                    txt = getString(R.string.questionnaire_min_zero_max);

                } else if (Helper.getInt(questionObject.getMiNumberMax()) == 0
                        || (Helper.getInt(questionObject.getMiFreeTextMaxlength()) == Integer.MAX_VALUE)) {
                    // <string name="questionnaire_min_max">Minimum #MIN#
                    // characters.</string>
                    txt = getString(R.string.questionnaire_min_max);
                } else {
                    // <string name="questionnaire_min_max_zero">#MAX# characters
                    // left.
                    // Minimum #MIN# characters.</string>
                    txt = getString(R.string.questionnaire_min_max_zero);
                }
                txt = txt.replace(
                        "#MAX#",
                        (Helper.getInt(questionObject.getMiNumberMax()) - Helper
                                .getInt(textbox.getText().toString())) + "");
                txt = txt.replace("#MIN#", questionObject.getMiNumberMin());
                txtView.setText(txt);
                txtView.setTextColor(Color.parseColor("#993f6c"));
                txtView.setVisibility(RelativeLayout.INVISIBLE);

                break;
            case 3:
                textbox.setFocusable(false);
                textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                ShowDatePicker();
                vDateTime = Helper.DatePicker;
                break;
            case 4:
            case 6:
            case 7:
            case 8:
                textbox.setFocusable(false);
                textbox.setInputType(InputType.TYPE_CLASS_DATETIME);
                showTimePickerSeconds(textbox);
                vDateTime = Helper.TimePicker;
                break;
        }

        LinearLayout hebrewLayout = new LinearLayout(
                this.getApplicationContext());
        hebrewLayout.setOrientation(LinearLayout.VERTICAL);
        if (modeSelect == 3) {
            txtView.setGravity(Gravity.RIGHT);
        }
        hebrewLayout.setId(viewId);
        hebrewLayout
                .addView(textbox, new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        Gravity.LEFT));

        LinearLayout.LayoutParams lpp = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.RIGHT);
        hebrewLayout.addView(txtView, lpp);
        setMiWholeView(hebrewLayout);
        // miWholeView = hebrewLayout;
        return hebrewLayout;
    }

    private void setMiWholeView(LinearLayout hebrewLayout) {
        miWholeView = hebrewLayout;
        if (selectedAnswerForMiView != null)
            show_hide_mi(selectedAnswerForMiView);
    }

    private void ShowDatePicker() {
        final DatePickerDialog.OnDateSetListener dateListener = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int yr, int monthOfYear,
                                  int dayOfMonth) {
                year = yr;
                month = monthOfYear;
                day = dayOfMonth;
                textbox.setTextColor(android.R.color.black);
                textbox.setText(new StringBuilder().append(day).append('-')
                        .append(month + 1).append('-').append(year));

            }
        };

        textbox.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                new DatePickerDialog(QuestionnaireActivity.this, dateListener,
                        myCalendar.get(Calendar.YEAR), myCalendar
                        .get(Calendar.MONTH), myCalendar
                        .get(Calendar.DAY_OF_MONTH)).show();
            }
        });
    }

    private void showTimePicker(final EditText txtTime) {
        if (modeSelect == 3)
            txtTime.setGravity(Gravity.RIGHT);
        final TimePickerDialog.OnTimeSetListener t = new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                // hour = hourOfDay;
                // min = minute;
                myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                myCalendar.set(Calendar.MINUTE, minute);
                SimpleDateFormat timeformat = new SimpleDateFormat("kk:mm:ss",
                        Locale.ENGLISH);
                // textbox.setText(new
                // StringBuilder().append(hourOfDay).append(':')
                // .append(minute));
                String timeLog = timeformat.format(myCalendar.getTime());
                txtTime.setText(Helper.makeHtmlString(timeLog));
            }
        };
        txtTime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                myCalendar = Calendar.getInstance();
                TimePickerDialog timeDialog = new TimePickerDialog(
                        QuestionnaireActivity.this, t, myCalendar
                        .get(Calendar.HOUR_OF_DAY), myCalendar
                        .get(Calendar.MINUTE), true);
                timeDialog.show();

            }
        });
    }

    private void showTimePickerSeconds(final EditText btextbox2) {
        if (modeSelect == 3) {
            btextbox2.setGravity(Gravity.RIGHT);
        }
        btextbox2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                CustomTimePicker cTimePicker = new CustomTimePicker();
                myCalendar = Calendar.getInstance();
                cTimePicker.makeTimeDialog(QuestionnaireActivity.this,
                        questionObject.getMiType(),
                        myCalendar.get(Calendar.HOUR_OF_DAY),
                        myCalendar.get(Calendar.MINUTE),
                        myCalendar.get(Calendar.SECOND),
                        new MyTimePickerDialog.OnTimeSetListener() {

                            @Override
                            public void onTimeSet(
                                    com.ikovac.timepickerwithseconds.view.TimePicker view,
                                    int hourOfDay, int minute, int seconds) {

                                myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                                myCalendar.set(Calendar.MINUTE, minute);
                                myCalendar.set(Calendar.SECOND, seconds);

                                String mitype = questionObject.getMiType();
                                SimpleDateFormat timeformat = null;
                                if (mitype.equals("4"))// HH:MM:SS
                                    timeformat = new SimpleDateFormat(
                                            "kk:mm:ss", Locale.ENGLISH);
                                if (mitype.equals("6"))// HH:MM
                                    timeformat = new SimpleDateFormat("kk:mm",
                                            Locale.ENGLISH);
                                if (mitype.equals("7"))// MM:SS
                                    timeformat = new SimpleDateFormat("mm:ss",
                                            Locale.ENGLISH);
                                if (mitype.equals("8"))// SS
                                    timeformat = new SimpleDateFormat("ss",
                                            Locale.ENGLISH);
                                // textbox.setText(new
                                // StringBuilder().append(hourOfDay).append(':')
                                // .append(minute));
                                String timeLog = timeformat.format(myCalendar
                                        .getTime());
                                btextbox2.setText(Helper
                                        .makeHtmlString(timeLog));
                            }
                        });

            }
        });
    }

    public void ShowDatePickerOnButton(final Button btnnn) {
        if (modeSelect == 3)
            btnnn.setGravity(Gravity.RIGHT);
        final DatePickerDialog.OnDateSetListener dateListener = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int yr, int monthOfYear,
                                  int dayOfMonth) {
                year = yr;
                month = monthOfYear;
                day = dayOfMonth;
                btnnn.setText(day + "-" + (month + 1) + "-" + year);

            }
        };

        btnnn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                new DatePickerDialog(QuestionnaireActivity.this, dateListener,
                        myCalendar.get(Calendar.YEAR), myCalendar
                        .get(Calendar.MONTH), myCalendar
                        .get(Calendar.DAY_OF_MONTH)).show();
            }
        });
    }

    public void showTimePickerSecondsonButton(final Button btextboxc2) {
        if (modeSelect == 3)
            btextboxc2.setGravity(Gravity.RIGHT);
        btextboxc2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                CustomTimePicker cTimePicker = new CustomTimePicker();
                myCalendar = Calendar.getInstance();
                cTimePicker.makeTimeDialog(QuestionnaireActivity.this,
                        questionObject.getMiType(),
                        myCalendar.get(Calendar.HOUR_OF_DAY),
                        myCalendar.get(Calendar.MINUTE),
                        myCalendar.get(Calendar.SECOND),
                        new MyTimePickerDialog.OnTimeSetListener() {

                            @Override
                            public void onTimeSet(
                                    com.ikovac.timepickerwithseconds.view.TimePicker view,
                                    int hourOfDay, int minute, int seconds) {

                                myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                                myCalendar.set(Calendar.MINUTE, minute);
                                myCalendar.set(Calendar.SECOND, seconds);

                                String mitype = questionObject.getMiType();
                                SimpleDateFormat timeformat = null;
                                if (mitype.equals("4"))// HH:MM:SS
                                    timeformat = new SimpleDateFormat(
                                            "kk:mm:ss", Locale.ENGLISH);
                                if (mitype.equals("6"))// HH:MM
                                    timeformat = new SimpleDateFormat("kk:mm",
                                            Locale.ENGLISH);
                                if (mitype.equals("7"))// MM:SS
                                    timeformat = new SimpleDateFormat("mm:ss",
                                            Locale.ENGLISH);
                                if (mitype.equals("8"))// SS
                                    timeformat = new SimpleDateFormat("ss",
                                            Locale.ENGLISH);
                                // textbox.setText(new
                                // StringBuilder().append(hourOfDay).append(':')
                                // .append(minute));
                                String timeLog = timeformat.format(myCalendar
                                        .getTime());
                                btextboxc2.setText(Helper
                                        .makeHtmlString(timeLog));
                            }
                        });

            }
        });
    }

    private View getAnswersView(int displayType, int qtl,
                                ArrayList<Answers> listAns, boolean isPrev,
                                RelativeLayout questionnaireLayout) {
        if ((listAns == null || listAns.size() <= 0)
                && (thisAutoValues == null || thisAutoValues.size() <= 0))
            return null;

        switch (displayType) {
            case 0:
                if (qtl == 4 && thisAutoValues == null)
                    return null;
                else if (qtl == 4 && thisAutoValues != null)
                    return getRadioButtonView(listAns, isPrev);
                if (qtl == 8 || qtl == 9)
                    return getCheckBoxView(listAns, isPrev);

                return getRadioButtonImageView(listAns, isPrev);
            // case 7:
            // return getRangeBarView(listAns, isPrev);
            case 5:
                return getRatingStarView(listAns, isPrev);
            case 1:
                if (qtl == 8 || qtl == 9)
                    return getMultipleDropdown(listAns, isPrev);
                else {
                    // rangeBar = null;
                    radioGroup = null;
                    // return getDropDownView(listAns, listBranches, listWorkers,
                    // isPrev)
                    // return getDropDownListView(listAns, null, null, isPrev);
                    // wiki dada
                    QuestionnaireData qd = null;
                    View view = displayLabel("");
                    questionnaireLayout.addView((view), getElseLayoutParam());
                    simpleBranchImage = displayupdownicon(getResources()
                            .getDrawable(R.drawable.down_btn));
                    simpleBranchImage.setOnClickListener(new OnClickListener() {

                        @Override
                        public void onClick(View v) {
                            if (simpleListView.getVisibility() == View.GONE) {
                                simpleListView.setVisibility(View.VISIBLE);
                                // simpleBranchImage
                                // .setImageDrawable(getResources()
                                // .getDrawable(R.drawable.up_btn));

                            } else {
                                simpleListView.setVisibility(View.GONE);
                                // simpleBranchImage
                                // .setImageDrawable(getResources()
                                // .getDrawable(R.drawable.down_btn));
                            }

                        }
                    });
                    simpleEditText = displayListEdit("");
                    viewId = getViewId(viewId);
                    simpleEditText.setId(viewId);
                    simpleEditText.setPadding(0, 0,
                            QuestionnaireActivity.dp2px(getResources(), 45), 0);
                    simpleEditText.setGravity(Gravity.CENTER_VERTICAL);
                    simpleEditText.setTextColor(Color.parseColor("#ffffff"));
                    questionnaireLayout.addView((simpleEditText),
                            getSearchEditTextLayoutParam());
                    simpleBranchImage.setPadding(
                            (int) QuestionnaireActivity.px2dp(getResources(), 9),
                            4, 4,
                            (int) QuestionnaireActivity.px2dp(getResources(), 9));
                    questionnaireLayout
                            .addView((simpleBranchImage), getIconParam());

                    viewId = getViewId(viewId);
                    simpleListView = getSimpleListView(listAns, viewId,
                            questionObject);
                    simpleBranchImage.setBackgroundColor(getResources().getColor(
                            R.color.transparent));
                    simpleEditText.setBackground(getResources().getDrawable(
                            R.drawable.pos_green_bg));

                    simpleListView.setId(viewId);
                    if (thisAutoValues == null)
                        tmmpid = viewId;
                    simpleListView.setVisibility(View.GONE);
                    simpleListView.setCacheColorHint(Color.TRANSPARENT);
                    simpleListView
                            .setOnTouchListener(new ListView.OnTouchListener() {

                                @Override
                                public boolean onTouch(View arg0, MotionEvent arg1) {
                                    int action = arg1.getAction();
                                    switch (action) {
                                        case MotionEvent.ACTION_DOWN:
                                            // Disallow ScrollView to
                                            // intercept touch events.
                                            arg0.getParent()
                                                    .requestDisallowInterceptTouchEvent(
                                                            true);
                                            break;

                                        case MotionEvent.ACTION_UP:
                                            // Allow ScrollView to intercept
                                            // touch events.
                                            arg0.getParent()
                                                    .requestDisallowInterceptTouchEvent(
                                                            false);
                                            break;
                                    }

                                    // Handle ListView touch events.
                                    arg0.onTouchEvent(arg1);
                                    return true;
                                }
                            });

                    simpleEditText.setOnClickListener(new OnClickListener() {

                        @Override
                        public void onClick(View v) {
                            // TODO Auto-generated method stub
                            // workerEditText.setText("");
                            if (simpleListView.getVisibility() == View.GONE) {
                                simpleListView.setVisibility(View.VISIBLE);
                                // simpleBranchImage
                                // .setBackgroundDrawable(getResources()
                                // .getDrawable(R.drawable.up_btn));

                            }
                        }
                    });

                    simpleEditText.addTextChangedListener(new TextWatcher() {

                        @Override
                        public void onTextChanged(CharSequence cs, int arg1,
                                                  int arg2, int arg3) {
                            // When user changed the Text
                            if (simpleListViewListener != -1) {
                                ((ArrayAdapter) (simpleListView.getAdapter()))
                                        .getFilter().filter(cs);
                                if (simpleListView.getVisibility() == View.GONE) {
                                    simpleListView.setVisibility(View.VISIBLE);
                                    // simpleBranchImage
                                    // .setBackgroundDrawable(getResources()
                                    // .getDrawable(R.drawable.up_btn));

                                }
                            } else
                                simpleListViewListener = 0;

                        }

                        @Override
                        public void beforeTextChanged(CharSequence arg0, int arg1,
                                                      int arg2, int arg3) {
                            // TODO Auto-generated method stub

                        }

                        @Override
                        public void afterTextChanged(Editable arg0) {
                            // TODO Auto-generated method stub

                        }
                    });

                    questionnaireLayout.addView(simpleListView,
                            getListLayoutParam());
                    viewId = viewId;
                    return null;
                }
            case 2:
            case 3:
            case 4:
            case 6:

                if (qtl == 4)
                    return null;
                return getCheckBoxView(listAns, isPrev);

        }
        return null;
    }

    // private View getRangeBarView(final ArrayList<Answers> listAns,
    // boolean isPrev) {
    // rangeBar = new RangeBar(QuestionnaireActivity.this, listAns.size());
    // QuestionnaireData qd = null;
    // if (isPrev)
    // qd = getSingleAnswer(questionObject.getDataID());
    // int selectedIndex = 0;
    // if (qd != null) {
    // for (int i = 0; i < listAns.size(); i++) {
    // if (isSelectedAnswers(qd, listAns.get(i).getAnswerID())) {
    // rangeBar.setmLeftIndex(i);
    // selectedIndex = i;
    // }
    // }
    // }
    // if (listAns.get(selectedIndex).getIconName() != null) {
    // Bitmap d = helper.readFile(
    // listAns.get(selectedIndex).getIconName(), true);
    // d = Bitmap.createScaledBitmap(d, 80, 80, false);
    // rangeBar.setThumbImageNormal(d);
    // }
    // viewId = getViewId(viewId);
    // rangeBar.setId(viewId);
    // LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
    // android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
    // android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
    // if (listAns.size() > 2 && listAns.size() < 5)
    // rangeBar.setTickCount(listAns.size());
    // rangeBar.setOnRangeBarChangeListener(new OnRangeBarChangeListener() {
    //
    // @Override
    // public void onIndexChangeListener(RangeBar rangeBar,
    // int leftThumbIndex, int rightThumbIndex) {
    // if (listAns.get(leftThumbIndex).getIconName() != null
    // && !listAns.get(leftThumbIndex).getIconName()
    // .equals("")) {
    // boolean isDownloadedYet = myPrefs.getBoolean(
    // Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
    // false);
    // if (listAns.get(leftThumbIndex).getIconName() != null) {
    // Bitmap d = helper.readFile(listAns.get(leftThumbIndex)
    // .getIconName(), isDownloadedYet);
    // d = Bitmap.createScaledBitmap(d, 80, 80, false);
    // rangeBar.setThumbImageNormal(d);
    // }
    // }
    //
    // }
    // });
    // return rangeBar;
    // }

    private View getRatingStarView(ArrayList<Answers> listAns, boolean isPrev) {
        for (int i = 0; i < listAns.size(); i++) {
            if (listAns.get(i).getAnswer() != null
                    && listAns.get(i).getAnswer().toLowerCase()
                    .equals("not filled")) {
                listAnswers.remove(i);
                break;
            }
        }
        listAns = listAnswers;
        LinearLayout.LayoutParams lpOut = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);

        LinearLayout layoutRadioGroup = new LinearLayout(
                QuestionnaireActivity.this);
        layoutRadioGroup.setLayoutParams(lpOut);
        // radioGroup = new RadioGroup(con);
        layoutRadioGroup.setOrientation(LinearLayout.VERTICAL);

        ratingBar = new CustomRBar(QuestionnaireActivity.this);
        viewId = getViewId(viewId);
        ratingBar.setId(viewId);
        ratingBar.setNumStars(listAns.size());
        ratingBar.setStepSize((float) 0.1);
        if (isPrev) {
            QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
            for (int i = 0; i < listAns.size(); i++) {
                if (listAns.get(i).getAnswerID() != null
                        && listAns.get(i) != null
                        && listAns.get(i).getAnswerID() != null
                        && qd != null
                        && qd.getAnswersList() != null
                        && qd.getAnswersList().size() > 0
                        && listAns
                        .get(i)
                        .getAnswerID()
                        .equals(qd.getAnswersList().get(0)
                                .getAnswerID())) {
                    ratingBar.setRating(i + 1);
                }
            }
        }
        ImageView ib = new ImageView(this.getApplicationContext());
        ib.setBackgroundResource(R.drawable.minus);
        ib.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                ratingBar.setRating(0);
            }
        });

        LinearLayout.LayoutParams lpimage = new LinearLayout.LayoutParams(
                dpToPx(21), dpToPx(21));
        lpimage.setMargins(5, 0, 5, 0);
        layoutRadioGroup.addView(ratingBar);

        LinearLayout layoutRadioGroupInner = new LinearLayout(
                QuestionnaireActivity.this);
        layoutRadioGroupInner.setLayoutParams(lpOut);
        layoutRadioGroupInner.setOrientation(LinearLayout.HORIZONTAL);
        TextView tv = new TextView(QuestionnaireActivity.this);
        tv.setText("Cancel Rating");
        tv.setTextSize(18);
        tv.setTextColor(Color.parseColor("#ff6847"));
        tv.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                ratingBar.setRating(0);
            }
        });

        layoutRadioGroupInner.addView(ib, lpimage);
        layoutRadioGroupInner.addView(tv);
        layoutRadioGroup.addView(layoutRadioGroupInner);

        return layoutRadioGroup;
    }

    private void RadioButtonClicked(View v) {
        if (modeSelect != 3) {
            ColorDrawable[] color = {
                    new ColorDrawable(Color.parseColor("#4863A0")),
                    new ColorDrawable(Color.parseColor("#FFFFFF"))};
            TransitionDrawable trans = new TransitionDrawable(color);
            // This will work also on old devices. The latest
            // API says you have to use setBackground instead.
            v.setBackgroundDrawable(trans);
            trans.startTransition(1000);
        } else {

            if (modeSelect != 3) {
                ColorDrawable[] color = {
                        new ColorDrawable(Color.parseColor("#E77471")),
                        new ColorDrawable(Color.parseColor("#FFFFFF"))};
                TransitionDrawable trans = new TransitionDrawable(color);
                // This will work also on old devices. The
                // latest
                // API says you have to use setBackground
                // instead.
                v.setBackgroundDrawable(trans);
                trans.startTransition(1000);
            }

        }

    }

    private View getRadioButtonImageView(ArrayList<Answers> listAnswers,
                                         boolean isPrev) {
        // if (questionObject.getListAutoValues() != null
        // && questionObject.getListAutoValues().size() > 0) {
        // return getRadioButtonView(listAnswers, isPrev);
        // }
        makeAutoValueRadioButtonNeat();
        autoRadioGroup = null;
        radioGroup = new CustomRadioButtonGroup(QuestionnaireActivity.this);
        LinearLayout layoutRadioGroupOuter = new LinearLayout(
                QuestionnaireActivity.this);
        LinearLayout.LayoutParams lpOut = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);

        LinearLayout layoutRadioGroup = new LinearLayout(
                QuestionnaireActivity.this);
        layoutRadioGroup.setLayoutParams(lpOut);
        // radioGroup = new RadioGroup(con);
        layoutRadioGroup.setOrientation(LinearLayout.VERTICAL);

        layoutRadioGroup.setFocusable(true);
        layoutRadioGroup.setFocusableInTouchMode(true);
        // thisQGroup.setRadioGroup(layoutRadioGroup);
        QuestionnaireData qd = null;
        ImageView rdnotFilled = null;
        Boolean isRdChecked = false;
        if (isPrev)
            qd = getSingleAnswer(questionObject.getDataID());
        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answers = listAnswers.get(ansCount);
            boolean isAuto = false;
            if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                isAuto = true;

            if (answers.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answers
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }

            LinearLayout layoutinner = new LinearLayout(
                    QuestionnaireActivity.this);
            Display display = getWindowManager().getDefaultDisplay();
            Point size = new Point();
            getDisplay().getSize(size);
            int width = size.x;
            int height = size.y;
            LinearLayout.LayoutParams lp = null;
            if (modeSelect != 3)
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        width - 80);
            else
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        width - 80);
            // lp.weight = 1;
            lp.setMargins(0, 20, 0, 20);

            if (modeSelect != 30909) {

                View altMarker = ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))
                        .inflate(R.layout.radio_button_row, null);
                ImageView rd = (ImageView) altMarker
                        .findViewById(R.id.radiobutton);
                TextView textview = (TextView) altMarker
                        .findViewById(R.id.txtview);
                textview.setTag(rd);
                textview.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        radioGroup.ImageClicked((View) v.getTag());
                    }
                });
                textview.setText(Helper.makeHtmlString(ConvertTextCodetoText(
                        answers.getAnswer(), false)));
                textview.setTextColor(Helper.getIntColor(answers.getColor()));
                setFontSize(textview);

                ImageView imgView = (ImageView) altMarker
                        .findViewById(R.id.imgview);
                imgView.setTag(rd);
                if (order != null && order.getIsJobInProgressOnServer() != null
                        && order.isDataIdEnabled(set, questionObject.getDataID())) {
                    textview.setEnabled(false);
                    rd.setEnabled(false);
                }
                imgView.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View view) {
                        radioGroup.ImageClicked((View) view.getTag());
                        if (validateadditionjumpaprams()) {
                            nextbtnClickListener();

                        } else if (validateadditionjumpapramsonly()) {
                            View v = questionnaireLayout
                                    .findViewById(miLabelViewId);
                            setFontSize(v);
                            if (v != null
                                    && v.getClass().equals(TextView.class))
                                v.setVisibility(View.GONE);
                            v = questionnaireLayout.findViewById(miEditViewId);
                            setFontSize(v);
                            if (v != null
                                    && v.getClass().equals(EditText.class)) {
                                EditText edit = (EditText) v;
                                edit.setText("");
                                v.setVisibility(View.GONE);
                            }
                        } else {
                            View v = questionnaireLayout
                                    .findViewById(miLabelViewId);
                            if (v != null
                                    && v.getClass().equals(TextView.class)
                                    && (questionObject.getMiType() != null
                                    && !questionObject.getMiType()
                                    .equals("11")
                                    && !questionObject.getMiType()
                                    .equals("12")
                                    && !questionObject.getMiType()
                                    .equals("13")
                                    && !questionObject.getMiType()
                                    .equals("14") && !questionObject
                                    .getMiType().equals("15")))
                                v.setVisibility(View.VISIBLE);
                            v = questionnaireLayout.findViewById(miEditViewId);
                            if (v != null
                                    && v.getClass().equals(EditText.class)
                                    && (questionObject.getMiType() != null
                                    && !questionObject.getMiType()
                                    .equals("11")
                                    && !questionObject.getMiType()
                                    .equals("12")
                                    && !questionObject.getMiType()
                                    .equals("13")
                                    && !questionObject.getMiType()
                                    .equals("14") && !questionObject
                                    .getMiType().equals("15")))
                                v.setVisibility(View.VISIBLE);
                        }

                    }
                });
                imgView.setVisibility(RelativeLayout.GONE);
                if (answers.getIconName() != null
                        && !answers.getIconName().equals("")) {
                    boolean isDownloadedYet = myPrefs.getBoolean(
                            Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
                            false);
                    Drawable d = new BitmapDrawable(getResources(),
                            helper.readFile(answers.getIconName(),
                                    isDownloadedYet));
                    imgView.setVisibility(RelativeLayout.VISIBLE);
                    imgView.setImageDrawable(d);
                }

                rd = radioGroup.addRadioButton(false,
                        listAnswers.get(ansCount), Color.WHITE, null, rd);
                rd.setId(ansCount);

                if (answers.getAnswer() != null && answers.getAnswer().toString().toLowerCase().trim()
                        .startsWith("not filled")) {
                    rdnotFilled = rd;
                }

                if ((questionObject.getListAutoValues() == null || questionObject
                        .getListAutoValues().size() <= 0)
                        && isPrev
                        && isSelectedAnswers(qd, answers.getAnswerID())) {
                    isRdChecked = true;
                    selectedAnswerForMiView = answers;
                    radioGroup.setChecked(rd, true);
                }

                if (isAuto) {
                    isRdChecked = true;
                    selectedAnswerForMiView = answers;
                    radioGroup.setChecked(rd, true);

                }

                layoutRadioGroup.addView(altMarker);

            }
        }
        if (isRdChecked == false) {
            if (rdnotFilled != null)
                radioGroup.setChecked(rdnotFilled, true);
        }

        layoutRadioGroup.setTag(questionObject.getDataID());
        layoutRadioGroup.setLayoutParams(lpOut);

        layoutRadioGroupOuter.addView(layoutRadioGroup);

        return layoutRadioGroupOuter;
    }

    RadioGroup autoRadioGroup = null;

    private View getRadioButtonView(ArrayList<Answers> listAnswers,
                                    boolean isPrev) {
        makeAutoValueRadioButtonNeat();
        isRdAdded = false;
        autoRadioGroup = new RadioGroup(this.getApplicationContext());

        QuestionnaireData qd = null;
        RadioButton rdnotFilled = null;
        Boolean isRdChecked = false;
        if (isPrev)
            qd = getSingleAnswer(questionObject.getDataID());
        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answers = listAnswers.get(ansCount);

            if (ansCount == 0) {
                if (answers.getAnswer().equalsIgnoreCase("Not filled")
                        || answers
                        .getAnswer()
                        .equalsIgnoreCase(
                                "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                    // Answers tempanswers =
                    // listAnswers.get(listAnswers.size()-1);
                    // listAnswers.set(0, tempanswers);
                    listAnswers.remove(answers);
                    listAnswers.add(answers);
                    answers = listAnswers.get(ansCount);
                    // tempanswers = null;rad
                }
            }

            boolean isAuto = false;
            if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                isAuto = true;

            if (answers.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answers
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }

            RadioButton rd = new RadioButton(this.getApplicationContext());
            if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                rd.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);
            } else {

                rd.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);

            }
            LinearLayout.LayoutParams lp = null;

            if (Build.VERSION.SDK_INT <= 13) {
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
            } else {
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
                lp.setMargins(0, 120, 0, 120);

            }
            rd.setTag(answers.getAnswer());
            if (answers.getIconName() != null) {
                rd = setRadioButtonImageViewProperties(rd,
                        answers.getIconName(), answers.getColor(),
                        answers.getItalics(), answers.getBold(),
                        answers.getUnderline());
            } else {
                rd = setRadioButtonTextViewProperties(rd,
                        ConvertTextCodetoText(answers.getAnswer(), false),
                        answers.getColor(), answers.getItalics(),
                        answers.getBold(), answers.getUnderline());
            }
            String ans = answers.getAnswer().toString().toLowerCase();
            if (ans != null && ans.toLowerCase().trim()
                    .startsWith("not filled")
                    || ans.contains("ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                rdnotFilled = rd;
            }

            rd.setId(ansCount);
            if (isAuto) {
                rd.setChecked(true);
                isRdChecked = true;
                rd.setId(ansCount);
            }
            if (isPrev && thisAutoValues == null) {
                if (qd != null
                        && qd.getAnswersList().size() > 0
                        && answers.getAnswerID() != null
                        && answers.getAnswerID().equals(
                        qd.getAnswersList().get(0).getAnswerID())) {
                    isRdChecked = true;
                    rd.setChecked(true);
                    try {
                        String str = answers.getAdditionalInfoMandatory();
                        if (Integer.valueOf(answers
                                .getAdditionalInfoMandatory()) > 0) {
                            isMandatorySingleChoiceAnswers = 2;
                        } else
                            isMandatorySingleChoiceAnswers = 0;
                        str = answers.getHideAdditionalInfo();
                        if (Integer.valueOf(answers.getHideAdditionalInfo()) > 0) {
                            isHideAdditionalInfoSingleChoiceAnswers = 2;
                        } else
                            isHideAdditionalInfoSingleChoiceAnswers = 0;
                    } catch (Exception ex) {
                        isMandatorySingleChoiceAnswers = 0;
                        isHideAdditionalInfoSingleChoiceAnswers = 0;
                    }
                }
            }

            setFontSize(rd);
            if (order != null && order.getIsJobInProgressOnServer() != null
                    && order.isDataIdEnabled(set, questionObject.getDataID()))
                rd.setEnabled(false);
            autoRadioGroup.addView(rd, lp);

            isRdAdded = true;
        }
        if (isRdChecked == false) {
            if (rdnotFilled != null)
                rdnotFilled.setChecked(true);

        }

        autoRadioGroup
                .setOnCheckedChangeListener(new OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(RadioGroup group, int checkedId) {

                        if (validateadditionjumpaprams()) {
                            nextbtnClickListener();

                        } else if (validateadditionjumpapramsonly()) {
                            View v = questionnaireLayout
                                    .findViewById(miLabelViewId);
                            setFontSize(v);
                            if (v != null
                                    && v.getClass().equals(TextView.class))
                                v.setVisibility(View.GONE);
                            v = questionnaireLayout.findViewById(miEditViewId);
                            setFontSize(v);
                            if (v != null
                                    && v.getClass().equals(EditText.class)) {
                                EditText edit = (EditText) v;
                                edit.setText("");
                                v.setVisibility(View.GONE);
                            }
                        } else {
                            View v = questionnaireLayout
                                    .findViewById(miLabelViewId);
                            if (v != null
                                    && v.getClass().equals(TextView.class)
                                    && (questionObject.getMiType() != null
                                    && !questionObject.getMiType()
                                    .equals("11")
                                    && !questionObject.getMiType()
                                    .equals("12") && !questionObject
                                    .getMiType().equals("13"))
                                    && !questionObject.getMiType().equals("14")
                                    && !questionObject.getMiType().equals("15"))
                                v.setVisibility(View.VISIBLE);
                            v = questionnaireLayout.findViewById(miEditViewId);
                            if (v != null
                                    && v.getClass().equals(EditText.class)
                                    && (questionObject.getMiType() != null
                                    && !questionObject.getMiType()
                                    .equals("11")
                                    && !questionObject.getMiType()
                                    .equals("12")
                                    && !questionObject.getMiType()
                                    .equals("13")
                                    && !questionObject.getMiType()
                                    .equals("14") && !questionObject
                                    .getMiType().equals("15")))
                                v.setVisibility(View.VISIBLE);
                        }
                    }
                });
        return autoRadioGroup;
    }

    private void removethisobjectfromquestionairedata(String dataID,
                                                      boolean okayToRemove) {
        if (questionnaireData == null)
            return;
        if (Helper.getSystemURL() != null && Helper.getSystemURL().toLowerCase().contains("indochina"))
            return;
        for (int qCount = 0; qCount < questionnaireData.size(); qCount++) {
            QuestionnaireData qd = questionnaireData.get(qCount);
            if (qd.getDataID().equals(dataID)) {
                qCount--;
                // if (okayToRemove)
                questionnaireData.remove(qd);
            }
        }
        return;
    }

    private static String getMiPreviewAnswer(String dataID, ArrayList<QuestionnaireData> questionnaireData) {

        if (questionnaireData == null)
            return "";
        for (int qCount = 0; qCount < questionnaireData.size(); qCount++) {
            QuestionnaireData qd = questionnaireData.get(qCount);
            if (qd.getDataID().contains(dataID)) {
                String str = "";
                if (qd.getAnswerText() != null && qd.getAnswerText().length() > 0)
                    str += qd.getAnswerText();
                else if (qd.getFreetext() != null && qd.getAnswerText().length() > 0)
                    str += qd.getFreetext();
                else if (qd.getAnsText() != null && qd.getAnswerText().length() > 0)
                    str += qd.getAnsText();


                return str;
            }
        }
        return "";
    }

    private QuestionnaireData getSingleAnswer(String dataID) {
        if (questionnaireData == null)
            return null;
        for (int qCount = 0; qCount < questionnaireData.size(); qCount++) {
            QuestionnaireData qd = questionnaireData.get(qCount);
            if (qd.getDataID().equals(dataID))
                return qd;
        }
        return null;
    }

    private QuestionnaireData getFinishTimeAnswer(String dataID) {
        if (questionnaireData == null)
            return null;
        for (int qCount = 0; qCount < questionnaireData.size(); qCount++) {
            QuestionnaireData qd = questionnaireData.get(qCount);
            if (qd.getFinishtime() != null
                    || (dataID != null && qd.getDataID().equals(dataID)))
                return qd;
        }
        return null;
    }

    private String[] getListItem(ArrayList<Answers> listAnswers,
                                 ArrayList<Branches> listBranches, ArrayList<Workers> listWorkers) {
        String[] items = null;
        if (listAnswers != null && listAnswers.size() > 0) {
            boolean b = listAnswers.get(0).getAnswer()
                    .equals(getPlsSelectValue());
            if (IsMandatory && !b) {
                Answers ans = new Answers();
                ans.setAnswer(getPlsSelectValue());
                ans.setAnswerID("-2");
                listAnswers.add(0, ans);
                ans = null;
            }

            items = new String[listAnswers.size()];
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                Answers answers = listAnswers.get(ansCount);
                if (ansCount == 0) {
                    if (answers.getAnswer().equalsIgnoreCase("Not filled")
                            || answers
                            .getAnswer()
                            .equalsIgnoreCase(
                                    "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                        listAnswers.remove(answers);
                        listAnswers.add(answers);
                        answers = listAnswers.get(ansCount);
                    }
                } else {
                    if (ansCount == 1 && IsMandatory) {
                        if (answers.getAnswer().equalsIgnoreCase("Not filled")
                                || answers
                                .getAnswer()
                                .equalsIgnoreCase(
                                        "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                            listAnswers.remove(answers);
                            listAnswers.add(answers);
                            answers = listAnswers.get(ansCount);
                        }
                    }
                }

                Spanned sp = Html.fromHtml(ConvertTextCodetoText(
                        answers.getAnswer(), false));
                items[ansCount] = sp.toString();
            }
        } else if (listBranches != null && listBranches.size() > 0) {
            items = new String[listBranches.size()];
            for (ansCount = 0; ansCount < listBranches.size(); ansCount++) {
                Branches branch = listBranches.get(ansCount);
                // items[ansCount] = branch.getBranchName();
                Spanned sp = Html.fromHtml(branch.getBranchName());
                items[ansCount] = sp.toString();
            }
        } else {
            items = new String[listWorkers.size()];
            for (ansCount = 0; ansCount < listWorkers.size(); ansCount++) {
                Workers worker = listWorkers.get(ansCount);
                // items[ansCount] = worker.getWorkerName();
                Spanned sp = Html.fromHtml(worker.getWorkerName());
                items[ansCount] = sp.toString();
            }
        }
        return items;
    }

    private View getDropDownListView(ArrayList<Answers> listAnswers,
                                     ArrayList<Branches> listBranches, ArrayList<Workers> listWorkers,
                                     boolean isPrev) {

        listSpinner = new ListView(this);
        QuestionnaireData qd = null;
        if (isPrev)
            qd = getSingleAnswer(questionObject.getDataID());
        listSpinner.setAdapter(new ArrayAdapter<String>(this,
                android.R.layout.simple_list_item_1, getListItem(listAnswers,
                listBranches, listWorkers)));
        listSpinner.setLayoutParams(new LayoutParams(
                android.view.ViewGroup.LayoutParams.FILL_PARENT, 350));

        viewId = getViewId(viewId);
        listSpinner.setId(viewId);

        return listSpinner;
    }

    private int getNotFilledDropdOwn(ArrayList<Answers> listAnswers,
                                     ArrayList<Branches> listBranches, ArrayList<Workers> listWorkers) {

        String[] items = null;
        if (listAnswers != null && listAnswers.size() > 0) {
            boolean b = listAnswers.get(0).getAnswer()
                    .equals(getPlsSelectValue());
            if (IsMandatory && !b) {
                return 0;
            }

            items = new String[listAnswers.size()];
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                Answers answers = listAnswers.get(ansCount);

                if (answers.getAnswer().equalsIgnoreCase("Not filled")
                        || answers
                        .getAnswer()
                        .equalsIgnoreCase(
                                "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                    return (ansCount);
                }

            }
        } else if (listBranches != null && listBranches.size() > 0) {
            items = new String[listBranches.size()];
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                Answers answers = listAnswers.get(ansCount);

                if (answers.getAnswer().equalsIgnoreCase("Not filled")
                        || answers
                        .getAnswer()
                        .equalsIgnoreCase(
                                "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                    return (ansCount);
                }

            }
        } else {
            items = new String[listWorkers.size()];
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                Answers answers = listAnswers.get(ansCount);

                if (answers.getAnswer().equalsIgnoreCase("Not filled")
                        || answers
                        .getAnswer()
                        .equalsIgnoreCase(
                                "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                    return (ansCount);
                }

            }
        }
        return 0;

    }

    // private View getDropDownView(ArrayList<Answers> listAnswers,
    // ArrayList<Branches> listBranches, ArrayList<Workers> listWorkers,
    // boolean isPrev) {
    // spinner = new Spinner(this);
    // QuestionnaireData qd = null;
    // if (isPrev)
    // qd = getSingleAnswer(questionObject.getDataID());
    // ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
    // UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,modeSelect),
    // getListItem(listAnswers, listBranches, listWorkers));
    //
    // adapter.setDropDownViewResource(UIHelper
    // .getSpinnerLayoutSize(QuestionnaireActivity.this));
    // spinner.setAdapter(adapter);
    // if (isPrev && qd != null) {
    // spinner.setSelection(listAnswers.size() - 1);
    // setSpinnerValue(Helper.getInt(qd.getObjectType()), qd, listAnswers,
    // listBranches, listWorkers);
    // } else {
    // if (IsMandatory) {
    // spinner.setSelection(0);
    // } else
    // spinner.setSelection(getNotFilledDropdOwn(listAnswers,
    // listBranches, listWorkers));
    // }
    //
    // spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
    // @Override
    // public void onItemSelected(AdapterView<?> arg0, View arg1,
    // int arg2, long arg3) {
    // // TODO Auto-generated method stub
    // if (spinnerFirstTime)
    // spinnerFirstTime = false;
    // else {
    // if (!questionObject.isMi())
    // nextbtnClickListener();
    // spinnerFirstTime = true;
    // }
    // }
    //
    // @Override
    // public void onNothingSelected(AdapterView<?> arg0) {
    // // TODO Auto-generated method stub
    // }
    // });
    //
    // viewId = getViewId(viewId);
    // spinner.setId(viewId);
    //
    // changeSpinnerFontSize(spinner);
    // return spinner;
    // }

    public Spinner changeSpinnerFontSize(Spinner spinner) {

        for (int i = 0; i < spinner.getAdapter().getCount(); i++) {
            View tblRow = spinner.getAdapter().getView(i, null, null);
            setFontSize(tblRow);

        }
        return spinner;
    }

    private void setSpinnerValue(int objtp, QuestionnaireData qd,
                                 ArrayList<Answers> listAnswers, ArrayList<Branches> listBranches,
                                 ArrayList<Workers> listWorkers) {
        switch (objtp) {
            case 4:
                showDropdownAnswer(qd, listAnswers, IsMandatory);
                break;
            case 10:
                // showDropdownBranch(qd, listBranches);
                break;
            case 9:
                // showDropdownWorker(qd, listWorkers);
                break;
        }
    }

    private int showDropdownAnswer(QuestionnaireData qd,
                                   ArrayList<Answers> listAnswers, boolean isMi) {

        if (qd != null) {
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                String answer = listAnswers.get(ansCount).getAnswer()
                        .toString();
                if (answer != null
                        && qd != null
                        && qd.getAnswersList() != null
                        && qd.getAnswersList().size() > 0
                        && answer
                        .equals(qd.getAnswersList().get(0).getAnswer())) {
                    selectedAnswerForMiView = listAnswers.get(ansCount);
                    if (isMi)
                        return ansCount + 1;
                    else
                        return ansCount;
                }
            }
        }

        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            String answer = listAnswers.get(ansCount).getAnswer().toString();
            if (answer != null
                    && answer.toLowerCase().trim()
                    .startsWith("not filled")
                    || answer
                    .toLowerCase()
                    .contains(
                            "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                return ansCount;
            }
        }

        // for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
        // String answer = spinner.get0ItemAtPosition(ansCount).toString();
        // if (answer != null && isAutoValueSelected(thisAutoValues,
        // answerCode)) {
        //
        // spinner.setSelection(ansCount);
        // break;
        // }
        // }
        makeAutoValueRadioButtonNeat();
        if (thisAutoValues != null && thisAutoValues.size() > 0) {
            for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
                Answers answers = listAnswers.get(ansCount);

                boolean isAuto = false;
                if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                    isAuto = true;

                if (answers.getAnswerDisplayCondition() != null) {
                    Boolean b = IsObjectdisplaybyCondition(answers
                            .getAnswerDisplayCondition());
                    if (!b)
                        continue;
                }

                if (isAuto) {
                    isCheckShown = true;
                    selectedSimple = ansCount;
                    break;
                }

            }
        }
        return selectedSimple;
    }

    private View getCheckBoxView(final ArrayList<Answers> listAnswers,
                                 boolean isPrev) {
        makeAutoValueCheckBoxesButtonNeat();
        CheckBox cbnotfilled = null;
        isCheckShown = false;
        checkboxgrp = new LinearLayout(this.getApplicationContext());
        viewId = getViewId(viewId);
        checkboxgrp.setId(viewId);
        checkboxgrp.setOrientation(LinearLayout.VERTICAL);
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());

        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answers = listAnswers.get(ansCount);
            boolean isAuto = false;
            if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                isAuto = true;

            if (answers.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answers
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }

            TextView cbTextLeft = new TextView(QuestionnaireActivity.this);
            setFontSize(cbTextLeft);
            CheckBox cb = new CheckBox(this.getApplicationContext());

            if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                cb.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);
            } else {

                cb.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);

            }

            cb.setId(ansCount + 1);
            cb.setTag(answers.getAnswer());
            if (answers.getIconName() != null && modeSelect != 3) {
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
                lp.setMargins(0, 0, 20, 0);
                myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                boolean isDownloadedYet = myPrefs.getBoolean(
                        Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH, false);
                Drawable d = new BitmapDrawable(getResources(),
                        helper.readFile(answers.getIconName(), isDownloadedYet));
                cb.setCompoundDrawablesWithIntrinsicBounds(null, null, d, null);
                cb.setText(Helper.makeHtmlString(ConvertTextCodetoText(
                        answers.getAnswer(), false)));
            } else {
                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);

                if (modeSelect == 3) {
                    cbTextLeft.setText(Helper
                            .makeHtmlString(ConvertTextCodetoText(
                                    answers.getAnswer(), false)));
                } else {
                    cb.setText(Helper.makeHtmlString(ConvertTextCodetoText(
                            answers.getAnswer(), false)));
                }
            }
            cbTextLeft.setTextColor(Helper.getIntColor(answers.getColor()));
            cb.setTextColor(Helper.getIntColor(answers.getColor()));

            if (answers.getAnswer() != null && answers.getAnswer().toString().toLowerCase().trim()
                    .startsWith("not filled")
                    || answers
                    .getAnswer()
                    .equalsIgnoreCase(
                            "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                cbnotfilled = cb;
            }

            {
                LinearLayout.LayoutParams lptu = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        Gravity.RIGHT);
                LinearLayout.LayoutParams lpRadio = new LinearLayout.LayoutParams(
                        55, 55, 100f);
                LinearLayout.LayoutParams lpImgView = new LinearLayout.LayoutParams(
                        90, 90);

                lpRadio.setMargins(0, 20, 0, 20);

                ImageView imgView = new ImageView(QuestionnaireActivity.this);
                imgView.setVisibility(RelativeLayout.GONE);
                if (answers.getIconName() != null
                        && !answers.getIconName().equals("")) {
                    boolean isDownloadedYet = myPrefs.getBoolean(
                            Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
                            false);
                    Drawable d = new BitmapDrawable(getResources(),
                            helper.readFile(answers.getIconName(),
                                    isDownloadedYet));
                    imgView.setVisibility(RelativeLayout.VISIBLE);
                    imgView.setImageDrawable(d);
                }

                lp = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
                LinearLayout hebrewLayout = new LinearLayout(
                        this.getApplicationContext());
                hebrewLayout.setOrientation(LinearLayout.HORIZONTAL);
                LinearLayout.LayoutParams lpRight = new LinearLayout.LayoutParams(
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                        android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
                lpRight.setMargins(0, 10, 0, 10);
                cbTextLeft.setGravity(Gravity.RIGHT);
                if (modeSelect != 30909) {

                    View altMarker = ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))
                            .inflate(R.layout.checkbox_hebrew_row, null);
                    cbTextLeft = (TextView) altMarker
                            .findViewById(R.id.txtview);
                    setFontSize(cbTextLeft);
                    imgView = (ImageView) altMarker.findViewById(R.id.imgview);
                    imgView.setVisibility(RelativeLayout.GONE);
                    cb = (CheckBox) altMarker.findViewById(R.id.chkbox);
                    cbTextLeft.setText(Helper
                            .makeHtmlString(ConvertTextCodetoText(
                                    answers.getAnswer(), false)));
                    imgView.setTag(cb);
                    cbTextLeft.setTag(cb);
                    cbTextLeft.setOnClickListener(new OnClickListener() {

                        @Override
                        public void onClick(View v) {
                            CheckBox cb = ((CheckBox) v.getTag());
                            if (cb.isChecked())
                                cb.setChecked(false);
                            else
                                cb.setChecked(true);
                            checkboxClick((View) v.getTag(), listAnswers);
                        }
                    });
                    imgView.setOnClickListener(new OnClickListener() {

                        @Override
                        public void onClick(View v) {
                            CheckBox cb = ((CheckBox) v.getTag());
                            if (cb.isChecked())
                                cb.setChecked(false);
                            else
                                cb.setChecked(true);
                            checkboxClick((View) v.getTag(), listAnswers);
                        }
                    });

                    if (answers.getIconName() != null
                            && !answers.getIconName().equals("")) {
                        boolean isDownloadedYet = myPrefs.getBoolean(
                                Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
                                false);
                        Drawable d = new BitmapDrawable(getResources(),
                                helper.readFile(answers.getIconName(),
                                        isDownloadedYet));
                        imgView.setVisibility(RelativeLayout.VISIBLE);
                        imgView.setImageDrawable(d);
                    }

                    if (isAuto) {
                        isCheckShown = true;
                        cb.setChecked(true);
                    }
                    if (isPrev && isSelectedAnswers(qd, answers.getAnswerID())) {
                        isCheckShown = true;
                        cb.setChecked(true);
                    }
                    if (order != null && order.getIsJobInProgressOnServer() != null
                            && order.isDataIdEnabled(set, questionObject.getDataID())) {
                        cb.setEnabled(false);
                        cbTextLeft.setEnabled(false);
                    }
                    checkboxgrp.addView(altMarker);
                    // cb.setId(ansCount + 1);
                    cb.setTag(answers.getAnswer());

                }
                // else {
                // hebrewLayout.addView(cb, lp);
                // hebrewLayout.addView(imgView, lpImgView);
                // hebrewLayout.addView(cbTextLeft, lpRadio);
                // hebrewLayout.setGravity(Gravity.LEFT);
                // lpRight.gravity = Gravity.LEFT;
                // checkboxgrp.addView(hebrewLayout, lpRight);
                // }

            }

            if (order != null && order.getIsJobInProgressOnServer() != null
                    && order.isDataIdEnabled(set, questionObject.getDataID())) {
                cb.setEnabled(false);
                cbTextLeft.setEnabled(false);
            }
            // else {
            // lp.setMargins(0, 10, 0, 10);
            // checkboxgrp.addView(cb, lp);
            // }
            setFontSize(cb);
            cb.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {

                    checkboxClick(v, listAnswers);
                }
            });

            // setFontSize(cbTextLeft);
        }
        if (isCheckShown == false && cbnotfilled != null) {
            cbnotfilled.setChecked(true);
        }

        return checkboxgrp;
    }

    public static boolean isIndexSelected(List<Integer> listindices, int index) {
        for (int k = 0; k < listindices.size(); k++) {
            if (listindices.get(k) == index) return true;
        }
        return false;
    }

    public static boolean hideShowMiInMultipleDropDown(ArrayList<Answers> listAnswers,
                                                       MultiSelectionSpinner checkboxgrp, Objects questionObject) {
        boolean hideAdditionalInfo = true;
        List<Integer> listindices = checkboxgrp.getSelectedIndicies();
        for (int k = 0; k < listAnswers.size(); k++) {

            if (isIndexSelected(listindices, k) && listAnswers.get(k).getAdditionalInfoMandatory() != null
                    && listAnswers.get(k).getAdditionalInfoMandatory().length() > 0

                    && listAnswers.get(k).getAdditionalInfoMandatory().equals("1")) {
                hideAdditionalInfo = false;
                break;
            }
        }
        boolean miMandatory = questionObject != null
                && questionObject.getMiMandatory() != null && Helper.comapreString(questionObject.getMiMandatory(), "1");
        if (miMandatory) hideAdditionalInfo = false;
        return hideAdditionalInfo;
    }

    public static boolean hideShowMiInCheckBox(ArrayList<Answers> listAnswers, LinearLayout checkboxgrp, Objects questionObject) {
        boolean hideAdditionalInfo = true;
        for (int k = 0; k < listAnswers.size(); k++) {
            CheckBox cb = null;
            if (checkboxgrp.getChildAt(k) instanceof RelativeLayout) {
                RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                        .getChildAt(k);
                if (thisLayout.getChildAt(0) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(0);
                else if (thisLayout.getChildAt(1) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(1);
                else if (thisLayout.getChildAt(2) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(2);
            } else {
                cb = (CheckBox) checkboxgrp.getChildAt(k);
            }
            if (cb != null && cb.isChecked() && listAnswers.get(k).getAdditionalInfoMandatory() != null
                    && listAnswers.get(k).getAdditionalInfoMandatory().length() > 0

                    && listAnswers.get(k).getAdditionalInfoMandatory().equals("1")) {
                hideAdditionalInfo = false;
                break;
            }
        }
        boolean miMandatory = questionObject != null
                && questionObject.getMiMandatory() != null && Helper.comapreString(questionObject.getMiMandatory(), "1");
        if (miMandatory) hideAdditionalInfo = false;
        return hideAdditionalInfo;
    }

    public void hideBoxIfCheckBox(ArrayList<Answers> listAnswers) {
        boolean hideAdditionalInfo = false;
        boolean isMandatoryGivenInAnyAnswer = false;
        for (int k = 0; k < listAnswers.size(); k++) {

            if (listAnswers.get(k).getAdditionalInfoMandatory() != null
                    && listAnswers.get(k).getAdditionalInfoMandatory().length() > 0
                    && listAnswers.get(k).getAdditionalInfoMandatory().equals("1"))
                isMandatoryGivenInAnyAnswer = true;

        }
        if (checkboxgrp != null)
            hideAdditionalInfo = QuestionnaireActivity.hideShowMiInCheckBox(listAnswers, checkboxgrp, questionObject);
        else if (multiSpinner != null)
            hideAdditionalInfo = QuestionnaireActivity.hideShowMiInMultipleDropDown(listAnswers, multiSpinner, questionObject);
        if (questionnaireLayout != null) {
            View tv = questionnaireLayout.findViewById(miEditViewId);
            if (textbox != null) tv = textbox;
            if ((isMandatoryGivenInAnyAnswer == false || hideAdditionalInfo == false) && tv != null) {
                tv.setVisibility(View.VISIBLE);
                if (mitv != null) mitv.setVisibility(View.VISIBLE);
            } else if (tv != null) {
                tv.setVisibility(View.GONE);
                if (mitv != null) mitv.setVisibility(View.GONE);
            }
        }
    }

    public void checkboxClick(View v, ArrayList<Answers> listAnswers) {

        //boolean hideAdditionalInfo=QuestionnaireActivity.hideShowMiInCheckBox(listAnswers,checkboxgrp);
//		for (int k = 0; k < listAnswers.size(); k++) {
//			CheckBox cb = null;
//			if (checkboxgrp.getChildAt(k) instanceof RelativeLayout) {
//				RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
//						.getChildAt(k);
//				if (thisLayout.getChildAt(0) instanceof CheckBox)
//					cb = (CheckBox) thisLayout.getChildAt(0);
//				else if (thisLayout.getChildAt(1) instanceof CheckBox)
//					cb = (CheckBox) thisLayout.getChildAt(1);
//				else if (thisLayout.getChildAt(2) instanceof CheckBox)
//					cb = (CheckBox) thisLayout.getChildAt(2);
//			} else {
//				cb = (CheckBox) checkboxgrp.getChildAt(k);
//			}
//			if (cb != null && cb.isChecked() && listAnswers.get(k).getAdditionalInfoMandatory() != null
//					&& listAnswers.get(k).getAdditionalInfoMandatory().length()>0) {
//				hideAdditionalInfo = false;
//				break;
//			}
//		}
//		View tv = questionnaireLayout.findViewById(miEditViewId);
//
//		if (hideAdditionalInfo==false && tv != null
//				) {
//			tv.setVisibility(View.GONE);
//		}
        if (((CheckBox) v).isChecked()) {
            // v.startAnimation(AnimationUtils.loadAnimation(
            // QuestionnaireActivity.this,
            // R.anim.click_animation));

            if (modeSelect != 3) {
                ColorDrawable[] color = {
                        new ColorDrawable(Color.parseColor("#4863A0")),
                        new ColorDrawable(Color.parseColor("#FFFFFF"))};
                TransitionDrawable trans = new TransitionDrawable(color);
                // This will work also on old devices. The latest
                // API says you have to use setBackground instead.
                v.setBackgroundDrawable(trans);
                trans.startTransition(1000);
            }
            // clear all
            for (int k = 0; k < listAnswers.size(); k++) {
                CheckBox cb = null;


                if (v.getTag().equals(listAnswers.get(k).getAnswer())
                        && listAnswers.get(k).getClearOtherAnswers() != null
                        && listAnswers.get(k).getClearOtherAnswers()
                        .equals("1")) {
                    for (int l = 0; l < listAnswers.size(); l++) {
                        cb = null;
                        if (checkboxgrp.getChildAt(l) instanceof RelativeLayout) {
                            RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                                    .getChildAt(l);
                            if (thisLayout.getChildAt(0) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(0);
                            else if (thisLayout.getChildAt(1) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(1);
                            else if (thisLayout.getChildAt(2) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(2);
                        } else {
                            cb = (CheckBox) checkboxgrp.getChildAt(l);
                        }

                        if (listAnswers.get(l).getClearOtherAnswers() != null
                                && listAnswers.get(l).getClearOtherAnswers()
                                .equals("1") && cb != null
                                && cb.isChecked() && cb != ((CheckBox) v)) {
                            ((CheckBox) v).setChecked(false);
                            return;
                        }

                        if (cb != null)
                            cb.setChecked(false);
                    }
                    ((CheckBox) v).setChecked(true);
                } else if (listAnswers.get(k).getClearOtherAnswers() != null
                        && listAnswers.get(k).getClearOtherAnswers()
                        .equals("1")) {
                    cb = null;
                    if (checkboxgrp.getChildAt(k) instanceof RelativeLayout) {
                        RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                                .getChildAt(k);
                        if (thisLayout.getChildAt(0) instanceof CheckBox)
                            cb = (CheckBox) thisLayout.getChildAt(0);
                        else if (thisLayout.getChildAt(1) instanceof CheckBox)
                            cb = (CheckBox) thisLayout.getChildAt(1);
                        else if (thisLayout.getChildAt(2) instanceof CheckBox)
                            cb = (CheckBox) thisLayout.getChildAt(2);
                    } else {
                        cb = (CheckBox) checkboxgrp.getChildAt(k);
                    }

                    if (cb != null && cb.isChecked()) {
                        ((CheckBox) v).setChecked(false);
                        break;
                    }
                }
            }
        } else {

            if (modeSelect != 3) {
                ColorDrawable[] color = {
                        new ColorDrawable(Color.parseColor("#E77471")),
                        new ColorDrawable(Color.parseColor("#FFFFFF"))};
                TransitionDrawable trans = new TransitionDrawable(color);
                // This will work also on old devices. The latest
                // API says you have to use setBackground instead.
                v.setBackgroundDrawable(trans);
                trans.startTransition(1000);
            }

        }
        hideBoxIfCheckBox(listAnswers);

    }

    public Bitmap getBitmapFromView(View view) {
        view.measure(MeasureSpec.UNSPECIFIED, MeasureSpec.UNSPECIFIED);
        Bitmap bitmap = Bitmap.createBitmap(view.getMeasuredWidth(),
                view.getMeasuredHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());
        view.draw(canvas);
        return bitmap;
    }

    Drawable getBubble(int rank) {
        View altMarker = ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))
                .inflate(R.layout.custom_red_bubble, null);
        TextView tv = (TextView) altMarker
                .findViewById(R.id.txt_tab_sync_balloon);
        tv.setText(rank + "");

        Bitmap bitmap = getBitmapFromView(altMarker);

        Drawable d = new BitmapDrawable(getResources(), bitmap);

        return d;

    }

    public void logHeap() {
        Double allocated = new Double(Debug.getNativeHeapAllocatedSize())
                / new Double((1048576));
        Double available = new Double(Debug.getNativeHeapSize()) / 1048576.0;
        Double free = new Double(Debug.getNativeHeapFreeSize()) / 1048576.0;
        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);
        df.setMinimumFractionDigits(2);
        if (txtMemory == null) {
            txtMemory = (TextView) findViewById(R.id.memoryText);

        }
        // if (Constants.isQAAllowed && txtMemory != null && lastDataId != null
        // && questionObject != null) {
        // txtMemory.setText("lasd=" + lastDataId + "thisd="
        // + questionObject.getDataID() + "," + (allocated) + "/"
        // + available);
        // } else
        if (Constants.isQAAllowed && txtMemory != null) {
            txtMemory.setText(+(allocated) + "/" + available);
        }
        Log.d("tag", "debug. =================================");
        Log.d("tag", "debug.heap native: allocated " + df.format(allocated)
                + "MB of " + df.format(available) + "MB (" + df.format(free)
                + "MB free)");
        Log.d("tag",
                "debug.memory: allocated: "
                        + df.format(new Double(Runtime.getRuntime()
                        .totalMemory() / 1048576))
                        + "MB of "
                        + df.format(new Double(
                        Runtime.getRuntime().maxMemory() / 1048576))
                        + "MB ("
                        + df.format(new Double(Runtime.getRuntime()
                        .freeMemory() / 1048576)) + "MB free)");
    }

    private void removeRank(int id, CheckBox cb) {

        cb.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
    }

    private void setRank(int id, int rank, CheckBox cb) {
        if (listRanks == null)
            listRanks = new ArrayList<Ranking>();
        Ranking r = new Ranking();
        r.setAnsid(id + "");
        r.setRank(rank);
        r.setCb(cb);
        for (int i = 0; i < listRanks.size(); i++) {
            if (listRanks.get(i).getRank() > rank) {
                listRanks.add(i, r);
                return;
            }
        }
        listRanks.add(r);
        cb.setCompoundDrawablesWithIntrinsicBounds(null, null, getBubble(rank),
                null);
    }

    private void setRank(int id, CheckBox cb) {
        if (listRanks == null)
            listRanks = new ArrayList<Ranking>();
        Ranking r = new Ranking();
        r.setCb(cb);
        r.setAnsid(id + "");
        r.setRank(listRanks.size() + 1);
        listRanks.add(r);

        cb.setCompoundDrawablesWithIntrinsicBounds(null, null,
                getBubble(listRanks.size() + 1), null);
    }

    private String getRank(int id) {
        if (listRanks == null)
            return null;
        for (int i = 0; i < listRanks.size(); i++) {
            if (listRanks.get(i).getAnsid().equals(id + "")) {
                return listRanks.get(i).getRank() + "";
            }
        }
        return null;
    }

    private View getRankingCheckBoxView(ArrayList<Answers> listAnswers,
                                        boolean isPrev) {
        makeAutoValueCheckBoxesButtonNeat();
        CheckBox cbnotfilled = null;
        isCheckShown = false;
        checkboxgrp = new LinearLayout(this.getApplicationContext());
        viewId = getViewId(viewId);
        checkboxgrp.setId(viewId);
        checkboxgrp.setOrientation(LinearLayout.VERTICAL);
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
                android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());

        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answers = listAnswers.get(ansCount);
            // if (answers.getAnswerDisplayCondition()!=null &&
            // answers.getAnswerDisplayCondition().contains("$"))
            // {
            // Boolean
            // b=CheckAnswerDisplayCondition(answers.getAnswerDisplayCondition());
            // if (!b) continue;
            // }
            boolean isAuto = false;
            if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                isAuto = true;

            if (answers.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answers
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }
            CheckBox cb = new CheckBox(this.getApplicationContext());
            cb.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View v) {
                    if (((CheckBox) v).isChecked()) {

                        setRank(((CheckBox) v).getId(), (CheckBox) v);
                    } else {

                        removeRank(((CheckBox) v).getId(), (CheckBox) v);
                    }
                }

            });
            if (Helper.getTheme(QuestionnaireActivity.this) == 0) {
                cb.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);
            } else {

                cb.setCompoundDrawables(
                        getResources().getDrawable(R.drawable.radio_selector_n),
                        null, null, null);

            }

            cb.setId(ansCount + 1);
            cb.setTag(answers.getAnswer());
            if (answers.getIconName() != null) {
                myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                boolean isDownloadedYet = myPrefs.getBoolean(
                        Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH, false);
                Drawable d = new BitmapDrawable(getResources(),
                        helper.readFile(answers.getIconName(), isDownloadedYet));
                cb.setCompoundDrawablesWithIntrinsicBounds(null, null, d, null);
            } else {
                cb.setText(Helper.makeHtmlString(ConvertTextCodetoText(
                        answers.getAnswer(), false)));
            }

            cb.setTextColor(Helper.getIntColor(answers.getColor()));

            if (isAuto) {
                isCheckShown = true;
                cb.setChecked(true);
            }
            if (isPrev && isSelectedAnswers(qd, answers.getAnswerID())) {
                isCheckShown = true;
                cb.setChecked(true);
                String rank = getRankFromQD(qd, answers.getAnswerID());
                if (rank != null)
                    answers.setRank(Integer.parseInt(rank));

                setRank(ansCount + 1, Integer.parseInt(rank), cb);

            }

            if (answers.getAnswer().toString().toLowerCase()
                    .contains("not filled")
                    || answers
                    .getAnswer()
                    .equalsIgnoreCase(
                            "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")) {
                cbnotfilled = cb;
            }

            checkboxgrp.addView(cb, lp);
            setFontSize(cb);
        }
        if (isCheckShown == false && cbnotfilled != null) {
            cbnotfilled.setChecked(true);
        }
        return checkboxgrp;
    }

    private View getMultipleDropdown(ArrayList<Answers> listAnswers,
                                     boolean isPrev) {
        multiSpinner = new MultiSelectionSpinner(QuestionnaireActivity.this,
                modeSelect, listAnswers);


        makeAutoValueCheckBoxesButtonNeat();
        CheckBox cbnotfilled = null;
        isCheckShown = false;
        viewId = getViewId(viewId);
        multiSpinner.setId(viewId);
        // LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
        // android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
        // android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
        QuestionnaireData qd = getSingleAnswer(questionObject.getDataID());
        ArrayList<String> listFinalAnswers = new ArrayList<String>();
        ArrayList<String> listFinalSelectedAnswers = new ArrayList<String>();
        for (ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
            Answers answers = listAnswers.get(ansCount);
            boolean isAuto = false;
            if (isAutoValueSelected(thisAutoValues, answers.getAnswerCode()))
                isAuto = true;
            listFinalAnswers.add(answers.getAnswer());
            if (answers.getAnswerDisplayCondition() != null) {
                Boolean b = IsObjectdisplaybyCondition(answers
                        .getAnswerDisplayCondition());
                if (!b)
                    continue;
            }


            if (isAuto) {
                isCheckShown = true;
                // cb.setChecked(true);
            }
            if (isPrev && isSelectedAnswers(qd, answers.getAnswerID())) {
                isCheckShown = true;
                listFinalSelectedAnswers.add(answers.getAnswer());
            }
        }
        multiSpinner.setItems(listFinalAnswers);
        multiSpinner.setSelection(listFinalSelectedAnswers);
        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            multiSpinner.setEnabled(false);
        return multiSpinner;
    }

    private boolean isAutoValueSelected(ArrayList<AutoValues> thisAutoValues2,
                                        String answerCode) {
        if (thisAutoValues2 == null)
            return false;
        for (int i = 0; i < thisAutoValues2.size(); i++) {
            if (thisAutoValues2.get(i).getValue_AnswerCode() != null
                    && answerCode != null
                    && thisAutoValues2.get(i).getValue_AnswerCode()
                    .equals(answerCode)) {
                thisAutoValues2.remove(i);
                return true;
            }
        }
        return false;
    }

    public String getDataID(String input) {
        int startIndex = input.indexOf("$[");
        int endIndex = input.indexOf("]$");

        if (startIndex > -1 && endIndex > -1) {
            startIndex = input.indexOf(",", startIndex);
            if (startIndex > -1 && endIndex > -1) {
                String res = input.substring(startIndex + 1, endIndex);
                return res;
            }
        }
        return null;
    }

    private int getDataIndex(String input) {
        int startIndex = input.indexOf("$[");
        int endIndex = input.indexOf("]$");

        if (startIndex > -1 && endIndex > -1) {
            startIndex = input.indexOf(",", startIndex);
            if (startIndex > -1 && endIndex > -1) {
                String res = input.substring(startIndex + 1, endIndex);
                try {
                    int index = Integer.parseInt(res);
                    return index;
                } catch (Exception ex) {
                    return -1;
                }
            }
        }
        return -1;
    }

    private String getNewQuestion(String q) {
        Boolean b = q.indexOf("$[") > -1;
        String question = "";
        if (b) {
            return getSpecificAnswersAgainstQD(q);
        }
        return q;
    }

    private Answers getSpecificAnswerAgainstQD(String Question) {
        int dIndex = getDataIndex(Question);
        String dId = getDataID(Question);
        if (dIndex < 0 || dId == null)
            return null;
        for (int i = 0; i < listObjects.size(); i++) {
            Objects obj = listObjects.get(i);
            if (obj == null)
                continue;
            if (obj.getDataID().equals(dId)) {

                QuestionnaireData qd = getSingleAnswer(dId);
                if (qd != null) {
                    for (int qCount = 0; qCount < qd.getAnswersList().size(); qCount++) {
                        if (qCount == dIndex) {
                            Answers ans = qd.getAnswersList().get(qCount);
                            return ans;
                        }

                    }
                }
            }
        }
        return null;
    }

    private String getSpecificAnswersAgainstQD(String Question) {
        int dIndex = getDataIndex(Question);
        String dId = getDataID(Question);

        if (dIndex < 0 || dId == null)
            return Question;
        for (int i = 0; i < listObjects.size(); i++) {
            Objects obj = listObjects.get(i);
            if (obj == null)
                continue;
            if (obj.getDataID().equals(dId)) {

                QuestionnaireData qd = getSingleAnswer(dId);
                if (qd != null) {
                    String answer = "";
                    for (int qCount = 0; qCount < qd.getAnswersList().size(); qCount++) {
                        Answers ans = qd.getAnswersList().get(qCount);
                        answer = answer + ans.getAnswer() + ",";
                    }
                    Question = Question.replace(dId, answer);
                    Question = Question.replace(dIndex + "", "");
                    Question = Question.replace(",", "");
                    Question = Question.replace("-", "");
                    Question = Question.replace("$", "");
                    Question = Question.replace("[", "");
                    Question = Question.replace("]", "");
                    return answer;
                }
            }
        }
        return Question;
    }

    private boolean isSelectedAnswers(QuestionnaireData qd, String ansID) {
        if (questionnaireData == null || qd == null)
            return false;
        for (int qCount = 0; qCount < qd.getAnswersList().size(); qCount++) {
            Answers ans = qd.getAnswersList().get(qCount);
            if (ans.getAnswerID() != null && ans.getAnswerID().equals(ansID))
                return true;
        }
        return false;
    }

    private String getRankFromQD(QuestionnaireData qd, String ansID) {
        if (questionnaireData == null || qd == null)
            return null;
        for (int qCount = 0; qCount < qd.getAnswersList().size(); qCount++) {
            Answers ans = qd.getAnswersList().get(qCount);
            if (ans.getAnswerID() != null && ans.getAnswerID().equals(ansID))
                return ans.getRank();
        }
        return null;
    }

    private int setAlignmentOfView(int align) {
        switch (align) {
            case 1:
                return (RelativeLayout.ALIGN_PARENT_RIGHT);
            case 2:
                return (RelativeLayout.CENTER_HORIZONTAL);
            case 3:
                return (RelativeLayout.ALIGN_PARENT_LEFT);
        }
        return (RelativeLayout.ALIGN_PARENT_LEFT);
    }

    private int setGravityAlignment(int align) {
        switch (align) {
            case 1:
                return (Gravity.RIGHT);
            case 2:
                return (Gravity.CENTER_HORIZONTAL);
            case 3:
                return (Gravity.LEFT);
        }
        return (Gravity.LEFT);
    }

    private View getEditorView(int viewid) {
        // questionObject.currentIndex = questionNumber;

        TextView tv = new TextView(this.getApplicationContext());
        EditorNote note = order.getEditorNoteAgainstQuestion(set, questionObject.getDataID());
        if (note != null) tv.setText(note.getUserName() + " - " + note.getNoteFromEditor());
        tv.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                tv.getTextSize()));
        tv.setTextColor(Color.parseColor("#bc1200"));
        viewId = getViewId(viewid);
        tv.setId(viewId);
        if (Build.VERSION.SDK_INT > 13) {
            if (modeSelect == 3)
                tv.setGravity(Gravity.RIGHT);
        }

        return tv;
    }

    private View getQuestionView(int viewid) {
        // questionObject.currentIndex = questionNumber;
        String questionText = questionObject.getQuestion();
        TextView tv = new TextView(this.getApplicationContext());
        if (questionObject.getMiType().equals("11")
                || questionObject.getMiType().equals("12")
                || questionObject.getMiType().equals("13")
                || questionObject.getMiType().equals("14")
                || questionObject.getMiType().equals("15")) {
            if (questionObject.getListAnswers() == null
                    || questionObject.getListAnswers().size() == 0)
                questionText = "";
            tv.setText(questionText);
            tv.setPadding(Constants.dpToPx(20), 0, Constants.dpToPx(20), 0);
            return tv;
        }

        StringBuffer sb = new StringBuffer();
        if (Helper.comapreString(questionObject.getMandatory(), "1")) {
            sb.append("*");
            IsMandatory = true;
        }
        sb.append(Helper.getValidString(questionText));
        tv = setTextViewProperties(tv, sb.toString(), questionObject.getFont(),
                questionObject.getColor(), questionObject.getSize(),
                questionObject.getItalics(), questionObject.getBold(),
                questionObject.getUnderline(), questionObject.getAlign());
        if (set.getEnableQuestionNumberingInForm().equals("1"))
            tv.setText(thisAutoValues != null ? "" : Helper
                    .makeHtmlString(questionObject.currentIndex + ". "
                            + ConvertTextCodetoText(sb.toString(), false)));
        else if (set.getEnableQuestionNumberingInForm().equals("2")) {
            Spanned q = null;
            if (questionObject.getObjectCode() == null)
                questionObject.setObjectCode("");
            if (questionObject.getObjectCode().equals("")) {
                questionObject.setObjectCode("");
                q = Helper.makeHtmlString(ConvertTextCodetoText(sb.toString(),
                        false));
            } else {
                q = Helper.makeHtmlString(questionObject.getObjectCode() + ". "
                        + ConvertTextCodetoText(sb.toString(), false));
            }

            tv.setText(thisAutoValues != null ? "" : q);
        } else {
            tv.setText(thisAutoValues != null ? ""
                    : Helper.makeHtmlString(ConvertTextCodetoText(
                    sb.toString(), false)));
        }
        sb = null;
        viewId = getViewId(viewid);
        tv.setId(viewId);
        if (Build.VERSION.SDK_INT > 13) {
            if (modeSelect == 3)
                tv.setGravity(Gravity.RIGHT);
        }
        setFontSize(tv);
        int size = -1;
        if (questionObject.getSize() != null
                && !questionObject.getSize().equals("")) {
            try {
                size = Integer.parseInt(questionObject.getSize());
            } catch (Exception ex) {
            }

        }
        if (size != -1)
            tv.setTextSize(size);
        if (questionObject.getMiType() == null)
            return tv;


        return tv;
    }

    private View getattachmentView() {
        ImageButton ib = new ImageButton(this.getApplicationContext());
        ib.setBackgroundResource(Helper.getImageID("attachment",
                getApplicationContext()));
        if (order != null && order.getIsJobInProgressOnServer() != null
                && order.isDataIdEnabled(set, questionObject.getDataID()))
            ib.setEnabled(false);
        ib.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                photomenu = true;
                isLastAttachment = false;
                customMenu(openMenu(null));
            }
        });
        viewId = getViewId(viewId);
        ib.setId(viewId);
        return ib;
    }

    private View getLastattachmentView() {
        ImageButton ib = new ImageButton(this.getApplicationContext());
        ib.setBackgroundResource(Helper.getImageID("attachment",
                getApplicationContext()));
        ib.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                photomenu = true;
                isLastAttachment = true;
                customMenu(openMenu(null));
            }
        });
        viewId = getViewId(viewId);
        ib.setId(viewId);
        return ib;
    }

    public void showEyeDialog(final Context context,
                              final InProgressFileData value, final Dialog dialog) {
        final Dialog rowView = new Dialog(context);
        rowView.setContentView(R.layout.eye_file_name_dialog);
        TextView txtName = (TextView) rowView.findViewById(R.id.nameText);
        TextView txtheader = (TextView) rowView.findViewById(R.id.header);
        TextView txtVal = (TextView) rowView.findViewById(R.id.valueText);
        TextView txtSize = (TextView) rowView.findViewById(R.id.sizeText);
        String filename = value.getFileName();
        if (filename != null && filename.contains("/")) {
            filename = filename.substring(filename.lastIndexOf("/") + 1);
        }
        txtName.setText(getString(R.string.file_name) + filename);
        txtSize.setText(getString(R.string.file_size) + value.getSize());
        txtVal.setText(getString(R.string.local_path) + value.getFileName());
        ImageView btnClose = (ImageView) rowView.findViewById(R.id.btnClose);

        btnClose.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                rowView.dismiss();

                deleteThisFile(value, dialog);
            }
        });
        Button dialogButtonOpenFolder = (Button) rowView
                .findViewById(R.id.btnOpenFolder);
        dialogButtonOpenFolder.setVisibility(RelativeLayout.GONE);
        dialogButtonOpenFolder.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                String filename = value.getFileName();

                if (filename != null && filename.contains("/")) {
                    int index = filename.lastIndexOf("/");
                    filename = filename.substring(0, index + 1);
                    Uri uri = Uri.parse(filename);

                    Intent intent = new Intent(Intent.ACTION_VIEW);
                    intent.setDataAndType(uri, "*/*");

                    // if (intent.resolveActivityInfo(getPackageManager(), 0) !=
                    // null) {
                    startActivity(intent);
                    // } else {
                    // if you reach this place, it means there is no any
                    // file
                    // explorer app installed on your device
                    // }
                }

                rowView.dismiss();
            }
        });
        Button dialogButtonOpenFile = (Button) rowView
                .findViewById(R.id.btnOpenFile);
        // if button is clicked, close the custom dialog
        dialogButtonOpenFile.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                rowView.dismiss();
                if (value != null && value.getFileName() != null
                        && value.isOnAppSide()) {

                } else {
                    return;
                }
                String item_ext = FilenameUtils.getExtension(value
                        .getFileName());
                item_ext = "." + item_ext;
                String ff = value.getFileName();
                File file = new File(ff);
                if (file != null && file.exists()) {

                } else {
                }

                {

                    if (item_ext.equalsIgnoreCase(".mp3")
                            || item_ext.equalsIgnoreCase(".pcm")
                            || item_ext.equalsIgnoreCase(".m4a")) {

                        Intent i = new Intent();
                        i.setAction(android.content.Intent.ACTION_VIEW);
                        i.setDataAndType(Uri.fromFile(file), "audio/*");
                        context.startActivity(i);
                    }

                    /* photo file selected */
                    else if (item_ext.equalsIgnoreCase(".jpeg")
                            || item_ext.equalsIgnoreCase(".jpg")
                            || item_ext.equalsIgnoreCase(".png")
                            || item_ext.equalsIgnoreCase(".gif")
                            || item_ext.equalsIgnoreCase(".tiff")) {

                        if (file.exists()) {
                            Intent picIntent = new Intent();
                            picIntent.setAction(android.content.Intent.ACTION_VIEW);
                            picIntent.setDataAndType(Uri.fromFile(file), "image/*");
                            context.startActivity(picIntent);
                        }
                    }

                    /* video file selected--add more video formats */
                    else if (item_ext.equalsIgnoreCase(".m4v")
                            || item_ext.equalsIgnoreCase(".mp4")
                            || item_ext.equalsIgnoreCase(".3gp")
                            || item_ext.equalsIgnoreCase(".wmv")
                            || item_ext.equalsIgnoreCase(".mp4")
                            || item_ext.equalsIgnoreCase(".ogg")
                            || item_ext.equalsIgnoreCase(".wav")) {

                        if (file.exists()) {
                            Intent movieIntent = new Intent();
                            movieIntent
                                    .setAction(android.content.Intent.ACTION_VIEW);
                            movieIntent.setDataAndType(Uri.fromFile(file),
                                    "video/*");
                            context.startActivity(movieIntent);
                        }
                    } else if (item_ext.equalsIgnoreCase(".pdf")) {

                        if (file.exists()) {
                            Intent pdfIntent = new Intent();
                            pdfIntent.setAction(android.content.Intent.ACTION_VIEW);
                            pdfIntent.setDataAndType(Uri.fromFile(file),
                                    "application/pdf");

                            try {
                                context.startActivity(pdfIntent);
                            } catch (ActivityNotFoundException e) {
                                Toast.makeText(context,
                                        "Sorry, couldn't find a pdf viewer",
                                        Toast.LENGTH_SHORT).show();
                            }
                        }
                    } else if (item_ext.equalsIgnoreCase(".txt")) {

                        if (file.exists()) {
                            Intent txtIntent = new Intent();
                            txtIntent.setAction(android.content.Intent.ACTION_VIEW);
                            txtIntent.setDataAndType(Uri.fromFile(file),
                                    "text/plain");

                            try {
                                context.startActivity(txtIntent);
                            } catch (ActivityNotFoundException e) {
                                txtIntent.setType("text/*");
                                context.startActivity(txtIntent);
                            }
                        }
                    }
                }
                rowView.dismiss();
            }
        });
        rowView.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        rowView.show();

    }

    public void ShowImageorVideo(String fileName) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        try {
            dialog.setContentView(R.layout.custom_view_photo_video);
        } catch (Exception ex) {
            int i = 0;
            i++;
        }
        // set the custom dialog components - text, image and button
        ImageView gallery_image = (ImageView) dialog.findViewById(R.id.gallery_image);
        File file = new File(fileName);
        Uri uri = Uri.fromFile(file);
        Bitmap selectedImage = loadFromUri(uri, file);

        // Load the selected image into a preview

        gallery_image.setImageBitmap(selectedImage);

//        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
//        // if button is clicked, close the custom dialog
//        dialogButton.setOnClickListener(new OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                dialog.dismiss();
//            }
//        });

        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public Bitmap loadFromUri(Uri photoUri, File file) {
        Bitmap image = null;
        try {
            // check version of Android on device
            if (Build.VERSION.SDK_INT > 27) {
                // on newer versions of Android, use the new decodeBitmap method
                ImageDecoder.Source source = ImageDecoder.createSource(this.getContentResolver(), photoUri);
                image = ImageDecoder.decodeBitmap(source);

                //            image = BitmapFactory.decodeFile(file.getAbsolutePath());
            } else {
                // support older versions of Android by using getBitmap
                image = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return image;
    }

    public void deleteThisFile(InProgressFileData value, Dialog dialog) {
        removeThisAttachment(value.getIndex());
        DBHelper.deleteFileInDb(orderID, questionObject.getDataID(),
                value.getFileName());
        updateServerSideFiles();
        dialog.dismiss();

        customAlertforServerSideFile(QuestionnaireActivity.this,
                getResources().getString(R.string.serverfilesMsg),
                serverSideFiles);
    }


    public void customMenu(final Menu valuess) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        try {
            dialog.setContentView(R.layout.menu_dialog);
        } catch (Exception ex) {
            int i = 0;
            i++;
        }
        ListView lv = (ListView) dialog.findViewById(R.id.lvjobs);
        menuAdapter stAdapter =
                new menuAdapter(QuestionnaireActivity.this, valuess, dialog);
        lv.setAdapter(stAdapter);
        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog
        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    public void customAlertforServerSideFile(Context context,
                                             String textString, final ArrayList<InProgressFileData> valuess) {
        final Dialog dialog = new Dialog(QuestionnaireActivity.this);
        try {
            dialog.setContentView(R.layout.custom_server_side_dialog);
        } catch (Exception ex) {
            int i = 0;
            i++;
        }
        // set the custom dialog components - text, image and button
        TextView text = (TextView) dialog.findViewById(R.id.textView1);
        text.setText(textString);

        ListView lv = (ListView) dialog.findViewById(R.id.lvjobs);
        serverFilesPreviewAdapter stAdapter = new serverFilesPreviewAdapter(
                QuestionnaireActivity.this, valuess, dialog);
        lv.setAdapter(stAdapter);
        lv.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {
                if (valuess.get(arg2).isOnAppSide())
                    showEyeDialog(QuestionnaireActivity.this,
                            valuess.get(arg2), dialog);
            }
        });
        Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
        // if button is clicked, close the custom dialog
        dialogButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.getWindow().setBackgroundDrawable(
                new ColorDrawable(android.graphics.Color.TRANSPARENT));
        dialog.show();
    }

    private View getEyeView(final boolean islast) {
        ImageButton ib = new ImageButton(this.getApplicationContext());
        ib.setBackgroundResource(Helper.getImageID("preview",
                getApplicationContext()));
        ib.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                customAlertforServerSideFile(QuestionnaireActivity.this,
                        getResources().getString(R.string.serverfilesMsg),
                        lastserverSideFiles);
            }
        });
        viewId = getViewId(viewId);
        ib.setId(viewId);
        return ib;
    }

    private View getEyeView() {
        ImageButton ib = new ImageButton(this.getApplicationContext());
        ib.setBackgroundResource(Helper.getImageID("preview",
                getApplicationContext()));
        ib.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                customAlertforServerSideFile(QuestionnaireActivity.this,
                        getResources().getString(R.string.serverfilesMsg),
                        serverSideFiles);
            }
        });
        viewId = getViewId(viewId);
        ib.setId(viewId);
        return ib;
    }

    private static final int FILE_SELECT_CODE = 11123;
    private static final int FILE_SELECT_CODE_LAST = 111234;

    public static final String QUESTION_START_ACTIVITY = "/QUESTION_STARTED";
    public static final String QUESTION_LAST = "/QUESTION_LAST";
    public static final String TAG = "TAG";
    private static final String QUESTION_FINISHED = "/QUESTION_FINISHED";

    private void showFileChooser(boolean isLastAttachment) {
        if (Build.VERSION.SDK_INT >= 29) {
            pickPhotoFromGallery();
        } else {
            showFilePicker(isLastAttachment);
        }
//		currentLocationId= "";
//		currentProductId="";
//		Intent intent = new Intent(this.getApplicationContext(),
//				FileExplore.class);
//		//
//		// Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
//		// intent.setType("*/*");
//		// intent.addCategory(Intent.CATEGORY_OPENABLE);
//
//		try {
//			Intent photoPickerIntent = new Intent(Intent.ACTION_GET_CONTENT);
//			photoPickerIntent.setType("image/*,video/*,text/*,application/pdf");
//			if (isLastAttachment)
//				startActivityForResult(photoPickerIntent, FILE_SELECT_CODE_LAST);
//			else
//				startActivityForResult(photoPickerIntent, FILE_SELECT_CODE);
//			// startActivityForResult(intent, FILE_SELECT_CODE);
//		} catch (android.content.ActivityNotFoundException ex) {
//			// Potentially direct the user to the Market with a Dialog
//			Toast.makeText(this, getString(R.string.pos_intall_manager),
//					Toast.LENGTH_SHORT).show();
//		}
    }

    public final static int PICK_PHOTO_CODE = 1046;

    private void pickPhotoFromGallery() {

        Intent intent = new Intent(Intent.ACTION_PICK,
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        //
        if (intent.resolveActivity(getPackageManager()) != null) {
            intent.setType("image/* video/*");
            startActivityForResult(intent, PICK_PHOTO_CODE);
        }

    }

    private void showFilePicker(boolean isLastAttachment) {

        currentLocationId = "";
        currentProductId = "";
        new ChooserDialog(QuestionnaireActivity.this)
                .withChosenListener(new ChooserDialog.Result() {
                    @Override
                    public void onChoosePath(String path, File pathFile) {
                        uploadList.add(getPathFromPath(path, questionObject.getDataID(),
                                order.getClientName(), order.getBranchName(),
                                order.getSetName(), sdf.format(new Date()),
                                order.getOrderID(), false));
                        Toast.makeText(
                                QuestionnaireActivity.this,
                                getString(R.string.questionnaire_file_attached_text) + " " + path,
                                Toast.LENGTH_LONG).show();
                    }
                })
                // to handle the back key pressed or clicked outside the dialog:
                .withOnCancelListener(new DialogInterface.OnCancelListener() {
                    public void onCancel(DialogInterface dialog) {
                        Log.d("CANCEL", "CANCEL");
                        dialog.cancel(); // MUST have
                    }
                })
                .build()
                .show();
    }


    private void showFileChooserCustom() {

        Intent intent = new Intent(this.getApplicationContext(),
                FileExplore.class);
        //
        // Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        // intent.setType("*/*");
        // intent.addCategory(Intent.CATEGORY_OPENABLE);

        try {
            Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
            photoPickerIntent.setType("image/*");
            startActivityForResult(photoPickerIntent, FILE_SELECT_CODE_CUSTOM);
            // startActivityForResult(intent, FILE_SELECT_CODE);
        } catch (android.content.ActivityNotFoundException ex) {
            // Potentially direct the user to the Market with a Dialog
            Toast.makeText(this, getString(R.string.pos_intall_manager),
                    Toast.LENGTH_SHORT).show();
        }
    }

    private void openCamera(int input, boolean islast) {

        if (Helper.isDeviceCamera()) {
            openDeviceCamera(input);
        } else {
            currentLocationId = "";
            currentProductId = "";
            if (!islast && questionObject != null
                    && questionObject.getDataID() != null)
                start_camera(questionObject.getDataID());
            else
                start_camera(null);
        }
    }

    private void openVideo(int input, boolean islast) {
        String extra = "";
        if (questionObject != null && questionObject.getDataID() != null)
            extra = questionObject.getDataID() + "_";
        String current_paths = "checker_" + extra + (System.currentTimeMillis() / 1000)
                + "_" + (System.currentTimeMillis() / (1000 * 60)) + ".3gp";
        try {
            File file = new File(
                    Environment
                            .getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM),
                    current_paths);
            path_Camera = file.getPath();
            uri_Camera = Uri.fromFile(file);
        } catch (Exception ex) {
            String path = CheckerApp.localFilesDir.getPath()//Environment.getExternalStorageDirectory().getPath()
                    + "/DCIM/Camera/";
            Calendar cal = Calendar.getInstance();

            File file = new File(path, current_paths);
            path_Camera = file.getPath();
            uri_Camera = Uri.fromFile(file);
        }
        Intent intent = new Intent(
                android.provider.MediaStore.ACTION_VIDEO_CAPTURE);
        intent.putExtra("android.intent.extra.durationLimit", 300);
        intent.putExtra("EXTRA_VIDEO_QUALITY", 0);
        // intent.putExtra(MediaStore.EXTRA_OUTPUT, uri_Camera);

        // startActivityForResult(intent, CAMERA_PIC_REQUEST);
        startActivityForResult(intent, input);
        // Intent cameraIntent = new Intent(
        // android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
        // startActivityForResult(cameraIntent, CAMERA_PIC_REQUEST);
    }

    private void openDeviceCamera(int input) {
        String extra = "";
        if (questionObject != null && questionObject.getDataID() != null)
            extra = questionObject.getDataID() + "_";
        String path = CheckerApp.localFilesDir.getPath()//Environment.getExternalStorageDirectory().getPath()
                + "/DCIM/Camera/";
        Calendar cal = Calendar.getInstance();
        String current_paths = "checker_" + extra + (System.currentTimeMillis() / 1000)
                + "_" + (System.currentTimeMillis() / (1000 * 60)) + ".jpg";
        File file = new File(path, current_paths);
        path_Camera = file.getPath();

        try {
            file.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        uri_Camera = Uri.fromFile(file);
        Intent intent = new Intent(
                android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, uri_Camera);

        // startActivityForResult(intent, CAMERA_PIC_REQUEST);
        startActivityForResult(intent, input);
        // Intent cameraIntent = new Intent(
        // android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
        // startActivityForResult(cameraIntent, CAMERA_PIC_REQUEST);
    }

    // @Override
    // protected void onActivityResult(int requestCode, int resultCode, Intent
    // data) {
    // // TODO Auto-generated method stub
    // switch(requestCode){
    // case 0:
    // if(resultCode==RESULT_OK){
    // if(IsInternetConnectted()){
    // try {
    // uploadFileList.add(data.getData());
    // // Toast.makeText(QuestionnaireActivity.this,
    // getString(R.string.questionnaire_file_attached_text),
    // // Toast.LENGTH_LONG);
    // } catch (Exception e) {
    // // TODO Auto-generated catch block
    // e.printStackTrace();
    // }
    // }
    // }
    // break;
    // }
    // }

    private String getRealPathFromURINew(Uri contentUri) {
        String real_path = contentUri.getPath();
        if (real_path.contains("media")) {
            try {
                String[] proj = {MediaStore.Images.Media.DATA};
                CursorLoader loader = new CursorLoader(
                        QuestionnaireActivity.this, contentUri, proj, null,
                        null, null);
                Cursor cursor = loader.loadInBackground();
                int column_index = cursor
                        .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                cursor.moveToFirst();
                return cursor.getString(column_index);
            } catch (java.lang.NoClassDefFoundError ex) {
                return getRealPathFromURI(contentUri);
            }
        }

        return real_path;
    }

    private String getUriRealPath(Context ctx, Uri uri) {
        String ret = "";

        if (isAboveKitKat()) {
            // Android OS above sdk version 19.
            ret = getUriRealPathAboveKitkat(ctx, uri);
        }
//        else
//        {
//
//            // Android OS below sdk version 19
//            ret = getImageRealPath(getContentResolver(), uri, null);
//        }

        return ret;
    }

    private String getUriRealPathAboveKitkat(Context ctx, Uri uri) {
        String ret = "";

        if (ctx != null && uri != null) {

            if (isContentUri(uri)) {
                if (isGooglePhotoDoc(uri.getAuthority())) {
                    ret = uri.getLastPathSegment();
                } else {
                    ret = getImageRealPath(uri, null);
                }
            } else if (isFileUri(uri)) {
                ret = uri.getPath();
            } else if (isDocumentUri(ctx, uri)) {

                // Get uri related document id.
                String documentId = DocumentsContract.getDocumentId(uri);

                // Get uri authority.
                String uriAuthority = uri.getAuthority();

                if (isMediaDoc(uriAuthority)) {
                    String idArr[] = documentId.split(":");
                    if (idArr.length == 2) {
                        // First item is document type.
                        String docType = idArr[0];

                        // Second item is document real id.
                        String realDocId = idArr[1];

                        // Get content uri by document type.
                        Uri mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                        if ("image".equals(docType)) {
                            mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                        } else if ("video".equals(docType)) {
                            mediaContentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                        } else if ("audio".equals(docType)) {
                            mediaContentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                        }

                        // Get where clause with real document id.
                        String whereClause = MediaStore.Images.Media._ID + " = " + realDocId;

                        ret = getImageRealPath(mediaContentUri, whereClause);
                    }

                } else if (isDownloadDoc(uriAuthority)) {
                    // Build download uri.
                    Uri downloadUri = Uri.parse("content://downloads/public_downloads");

                    // Append download document id at uri end.
                    Uri downloadUriAppendId = ContentUris.withAppendedId(downloadUri, Long.valueOf(documentId));

                    ret = getImageRealPath(downloadUriAppendId, null);

                } else if (isExternalStoreDoc(uriAuthority)) {
                    String idArr[] = documentId.split(":");
                    if (idArr.length == 2) {
                        String type = idArr[0];
                        String realDocId = idArr[1];

                        if ("primary".equalsIgnoreCase(type)) {
                            ret = CheckerApp.localFilesDir//Environment.getExternalStorageDirectory()
                                    + "/" + realDocId;
                        }
                    }
                }
            }
        }

        return ret;
    }

    /* Check whether current android os version is bigger than kitkat or not. */
    private boolean isAboveKitKat() {
        boolean ret = false;
        ret = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
        return ret;
    }

    /* Check whether this uri represent a document or not. */
    private boolean isDocumentUri(Context ctx, Uri uri) {
        boolean ret = false;
        if (ctx != null && uri != null) {
            ret = DocumentsContract.isDocumentUri(ctx, uri);
        }
        return ret;
    }

    /* Check whether this uri is a content uri or not.
     *  content uri like content://media/external/images/media/1302716
     *  */
    private boolean isContentUri(Uri uri) {
        boolean ret = false;
        if (uri != null) {
            String uriSchema = uri.getScheme();
            if ("content".equalsIgnoreCase(uriSchema)) {
                ret = true;
            }
        }
        return ret;
    }

    /* Check whether this uri is a file uri or not.
     *  file uri like file:///storage/41B7-12F1/DCIM/Camera/IMG_20180211_095139.jpg
     * */
    private boolean isFileUri(Uri uri) {
        boolean ret = false;
        if (uri != null) {
            String uriSchema = uri.getScheme();
            if ("file".equalsIgnoreCase(uriSchema)) {
                ret = true;
            }
        }
        return ret;
    }


    /* Check whether this document is provided by ExternalStorageProvider. */
    private boolean isExternalStoreDoc(String uriAuthority) {
        boolean ret = false;

        if ("com.android.externalstorage.documents".equals(uriAuthority)) {
            ret = true;
        }

        return ret;
    }

    /* Check whether this document is provided by DownloadsProvider. */
    private boolean isDownloadDoc(String uriAuthority) {
        boolean ret = false;

        if ("com.android.providers.downloads.documents".equals(uriAuthority)) {
            ret = true;
        }

        return ret;
    }

    /* Check whether this document is provided by MediaProvider. */
    private boolean isMediaDoc(String uriAuthority) {
        boolean ret = false;

        if ("com.android.providers.media.documents".equals(uriAuthority)) {
            ret = true;
        }

        return ret;
    }

    /* Check whether this document is provided by google photos. */
    private boolean isGooglePhotoDoc(String uriAuthority) {
        boolean ret = false;

        if ("com.google.android.apps.photos.content".equals(uriAuthority)) {
            ret = true;
        }

        return ret;
    }

    /* Return uri represented document file real local path.*/
    private String getImageRealPath(Uri uri, String whereClause) {
        String ret = "";

        // Query the uri with condition.
        Cursor cursor = getContentResolver().query(uri, null, whereClause, null, null);

        if (cursor != null) {
            boolean moveToFirst = cursor.moveToFirst();
            if (moveToFirst) {

                // Get columns name by uri type.
                String columnName = MediaStore.Images.Media.DATA;

                if (uri == MediaStore.Images.Media.EXTERNAL_CONTENT_URI) {
                    columnName = MediaStore.Images.Media.DATA;
                } else if (uri == MediaStore.Audio.Media.EXTERNAL_CONTENT_URI) {
                    columnName = MediaStore.Audio.Media.DATA;
                } else if (uri == MediaStore.Video.Media.EXTERNAL_CONTENT_URI) {
                    columnName = MediaStore.Video.Media.DATA;
                }

                // Get column index.
                int imageColumnIndex = cursor.getColumnIndex(columnName);

                // Get column value which is the uri related file local path.
                ret = cursor.getString(imageColumnIndex);
            }
        }

        return ret;
    }

    private String getRealPathFromURIimgs(Uri contentURI) {
        String result;
        Cursor cursor = getContentResolver().query(contentURI, null, null, null, null);
        if (cursor == null) { // Source is Dropbox or other similar local file path
            result = contentURI.getPath();
        } else {
            cursor.moveToFirst();
            int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            result = cursor.getString(idx);
            cursor.close();
        }
        return result;
    }

    public String getRealPathFromURI(Uri contentUri) {
        try {
            String[] proj = {MediaColumns.DATA};
            Cursor cursor = managedQuery(contentUri, proj, null, null, null);
            int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } catch (Exception ex) {
            return contentUri.getPath().replace("file:///", "");

        }
    }

    private TextView getTextFromHtmlFormate(String html, TextView tv) {

        Spanned sp = Helper.makeHtmlString(html);
        // tv.setTe
        tv.setText(sp, BufferType.SPANNABLE);
        return tv;
    }

    private RadioButton getTextFromHtmlFormate(String html, RadioButton tv) {
        Spanned sp = Helper.makeHtmlString(html);
        tv.setText(sp, BufferType.SPANNABLE);
        return tv;
    }

    private int getViewId(int id) {
        int val = id + 1;
        return val;
    }

    private boolean isChackBoxChecked() {
        if (multiSpinner != null) {
            List<String> selectedItems = multiSpinner.getSelectedStrings();
            return selectedItems.size() > 0;
        }

        boolean isNotFilled = false;

        boolean allOkay = false;
        for (int i = 0; i < checkboxgrp.getChildCount(); i++) {
            // CheckBox cb = (CheckBox) checkboxgrp.getChildAt(i);
            CheckBox cb = null;
            if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                        .getChildAt(i);
                if (thisLayout.getChildAt(0) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(0);
                else if (thisLayout.getChildAt(1) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(1);
                else if (thisLayout.getChildAt(2) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(2);
            } else {
                cb = (CheckBox) checkboxgrp.getChildAt(i);
            }
            if (cb.getTag() != null
                    && (cb.getTag().toString().equalsIgnoreCase("Not filled") || cb
                    .getTag()
                    .toString()
                    .equalsIgnoreCase(
                            "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½")))
                isNotFilled = true;

            if (cb.isChecked())
                allOkay = true;
        }

        if (allOkay == false && isNotFilled == false && !IsMandatory)
            allOkay = true;

        return allOkay;
    }

    public Boolean nextbtnClickListener() {
//		ShowAlert(this, getString(R.string.questionnaire_alert_title),
//				"1",
//				getString(R.string.questionnaire_btn_text));
//		ShowAlert(this, getString(R.string.questionnaire_alert_title),
//				"2",
//				getString(R.string.questionnaire_btn_text));
        previousPageDataId = questionObject.getDataID();
        if (Helper.comapreString(questionObject.getMiMandatory(), "1")) {
            IsMiMandatory = true;
        } else
            IsMiMandatory = false;

        if (uqHelper != null && uqHelper.qGroups != null) {
            saveQGroupAnswers();

        }
        if (showSubmitMenu == true) {
            if (show_attachedfilescreen) {
                attachFileContinue();
            } else
                customMenu(openMenu(null));
            return true;
        } else {
            nextBtn.setClickable(false);
            // nextBtn.setBackgroundResource(R.drawable.button_n);
            hideKeyBoard();
            if (!isRestoring)
                if (!On_Next_Button_Click("Next"))
                    return false;
            if (isjump)
                nextQIndex = currentIndex;
            nextButtonClicked();
            return true;
        }
    }

    View.OnClickListener goToNextPrevPage = new OnClickListener() {

        @Override
        public void onClick(View v) {
            logHeap();
            switch (v.getId()) {
                case R.id.nextbtn:
                case R.id.nextimg:
                    isNextButton = true;

                    nextbtnClickListener();
                    break;
                case R.id.prevbtn:
                case R.id.previmg:
                    isNextButton = false;
                    String txt = getResources().getString(
                            R.string.questionnaire_next_btn);

                    String txt1 = getResources().getString(
                            R.string.questionnaire_prev_btn);
                    if (modeSelect == 3) {
                        nextBtn.setText(txt);
                        previousBtn.setText(txt1);
                    } else {
                        nextBtn.setText(txt);
                        previousBtn.setText(txt1);
                    }
                    edit_purchase_details = null;
                    edit_purchase_payment = null;
                    edit_purchase_description = null;
                    edit_service_invoice_number = null;
                    edit_service_payment = null;
                    edit_service_description = null;
                    edit_transportation_payment = null;
                    edit_transportation_description = null;
                    IsMandatory = IsMiMandatory = false;
                    currentLocationId = "";
                    currentProductId = "";
                    hideKeyBoard();
                    previousButtonClicked();
                    break;
            }
        }
    };
    private String millis;

    private boolean On_Next_Button_Click(String where) {

        if (IsObjectdisplaybyCondition(questionObject
                .getObjectDisplayCondition())) {
            int i = 0;
            i++;
        } else if (where.equals("SumitSurvey")) {
            return true;
        }
        if ((lastDataId == null && isRestoring == false) && validateImageNeededisError())
            return false;

        if ((lastDataId == null && isRestoring == false) && !validatePurchaseInput())
            return false;

        if (questionObject.getObjectType().equals("4")
                && questionObject.getDisplayType() != null && (questionObject.getDisplayType().equals("0")
                || questionObject.getDisplayType().equals("1")
                || questionObject.getDisplayType().equals("2")
                || questionObject.getDisplayType().equals("3")
                || questionObject.getDisplayType().equals("4") || questionObject
                .getDisplayType().equals("5"))) {
            if ((questionObject.getListAnswers() == null || questionObject
                    .getListAnswers().size() <= 0)
                    && (questionObject.getAnswersSource() == null || questionObject
                    .getAnswersSource().length() <= 0)) {
                if (questionObject.getQuestionTypeLink() == null
                        || questionObject.getDisplayType() == null)
                    return true;
                saveAnswers(
                        Integer.parseInt(questionObject.getQuestionTypeLink()),
                        Integer.parseInt(questionObject.getDisplayType()));
                if (ValidateForm())
                    return true;
                else
                    return false;
            }
        }
        if (enableValidationQuestion)
            return true;
        uqHelper = UIQuestionGroupHelper.getinstance();
        if (uqHelper != null && uqHelper.qGroups != null) {
            String bool = uqHelper.validateAnswers2(QuestionnaireActivity.this);
            if (bool != null && bool.equals("err")) {
                ShowNonAnsweredGroupConfirmationAlert(null);
                return false;
            } else if (bool != null) {
                ShowNonAnsweredGroupConfirmationAlert(bool);
                return false;
            }

        } else if (set != null
                && set.getEnableNonansweredConfirmation().equals("1")
                && !IsMandatory && !IsMiMandatory) {
            if (!ValidateForm2()) {
                ShowNonAnsweredConfirmationAlert(where);
                return false;
            }

        } else {
            if (questionObject.getObjectType().equals("9")
                    && !validateWorkerBlankAnswer()) {
                ShowBranchWorkerConfirmationAlert(where);
                return false;
            }
            if (questionObject.getObjectType().equals("10")
                    && !validateBranchBlankAnswer()) {
                ShowBranchWorkerConfirmationAlert(where);
                return false;
            }
        }
        textBoxErrorMessage = getResources().getString(
                R.string.questionnaire_alert_additional);

        if (uqHelper != null && uqHelper.qGroups != null) {
            // saveQGroupAnswers();
            return true;
        }

        if ((lastDataId == null && isRestoring == false) && !ValidateForm())// && set != null &&
            // set.getEnableNonansweredConfirmation().equals("1")
            // )
            return false;
        if ((lastDataId == null && isRestoring == false) && IsMandatory && !ValidateForm())
            return false;
        IsMandatory = false;
        if (questionObject == null)
            return false;
        if (questionObject.getObjectType().equals("9")
                || questionObject.getObjectType().equals("10")) {

            saveAnswers(0, 0);
        } else if (questionObject.getObjectType().equals("15")) {
            saveAnswers(0, 15);
        } else if (questionObject.getObjectType().equals("12")) {
            saveAnswers(0, 12);
        } else {
            if (questionObject.getQuestionTypeLink() == null
                    || questionObject.getDisplayType() == null)
                return true;
            saveAnswers(Integer.parseInt(questionObject.getQuestionTypeLink()),
                    Integer.parseInt(questionObject.getDisplayType()));
        }
        return true;
    }

    private void On_SaveandexitButton_Click() {
        if (On_Next_Button_Click("ExitAndSave")) {
            if (recorder.recording) {
                recorder.stopRecording();
                final Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        DBAdapter.LogCommunication("Saved job ," + orderID,
                                "JobsLog.txt");
                        LongOperation longTask = new LongOperation(true, "");
                        longTask.execute();
                        exitAfterSubmitSurveyOrExitandsave(0);
                        // save current time stamp.
                        try {
                            DBHelper.saveTimeStamp(sdf.format(new Date()),
                                    orderID);
                        } catch (IOException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                }, 4000);

            } else {
                DBAdapter.LogCommunication("Saved job ," + orderID,
                        "JobsLog.txt");
                LongOperation longTask = new LongOperation(true, "");
                longTask.execute();
                exitAfterSubmitSurveyOrExitandsave(0);
                // save current time stamp.
                try {
                    DBHelper.saveTimeStamp(sdf.format(new Date()), orderID);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }

        }
    }

    private void On_SaveandPreviewButton_Click() {

        saveSelectedDatatoDB("", false);
        saveUploadFilestoDB("");
        setValueForPriview();
    }


    private void On_ExitanddeleteButton_Click() {
        // save current time stamp.
        QuestionnaireActivity.deleteJobRecords(orderID);


        exitAfterSubmitSurveyOrExitandsave(2);
    }

    public static void deleteJobRecords(String orderID) {
        try {
            SimpleDateFormat sdff = new SimpleDateFormat("yyyy-MM-dd  kk:mm:ss",
                    Locale.ENGLISH);
            DBHelper.deleteTimeStamp(sdff.format(new Date()), orderID);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        String where = Constants.DB_TABLE_QUESTIONNAIRE_ORDERID + "=" + "\""
                + orderID + "\"";
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.DB_TABLE_QUESTIONNAIRE, where, null);
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.DB_TABLE_ANSWERS, where, null);
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.UPLOAD_FILE_TABLE, where, null);
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.DB_TABLE_POS, where, null);
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.DB_TABLE_ORDERS, where, null);
        DBAdapter.openDataBase();
        DBAdapter.db.delete(Constants.DB_TABLE_SUBMITSURVEY, where, null);

        if (orderID.contains("CC")) {
            DBHelper.deleteJoblistRecords(Constants.DB_TABLE_JOBLIST_ORDERID
                    + "=" + "\"" + orderID + "\"");
        }
    }


    private void saveSelectedDatatoDB(String str, boolean doIncrement) {
        String freetext = "", finishTimeText = "", replytoserver = "";
        if (freeTextbox != null && !freeTextbox.getText().toString().equals(""))
            freetext = freeTextbox.getText().toString();
        if (replyMsgBox != null && !replyMsgBox.getText().toString().equals(""))
            replytoserver = replyMsgBox.getText().toString();

        QuestionnaireData qd = getFinishTimeAnswer(null);
        if (qd != null && qd.getFinishtime() != null
                && qd.getFinishtime().length() > 0) {
            finishTimeText = qd.getFinishtime();
        } else if (finishTime != null
                && !finishTime.getText().toString().equals(""))
            finishTimeText = finishTime.getText().toString();
        else {
            // Calendar date = Calendar.getInstance();
            finishTimeText = sdf.format(new Date());// (date.getTime());
        }

        if (startTime != null && !startTime.equals("")) {
        } else {
            startTime = sdf.format(new Date());// (date.getTime());
        }

        if (str.equals("submit")) {
            if (nonEmptyCount <= 0) {
                PrepareQuestionnaireNameValuePair(doIncrement);
            }

            Date dt = new Date();

            long mili = dt.getTime();
            // if (millis == null || millis.length() <= 0)
            millis = mili + "";

            DBHelper.insertQuestionnaire(
                    Constants.DB_TABLE_SUBMITSURVEY,
                    new String[]{
                            Constants.DB_TABLE_SUBMITSURVEY_OID,
                            Constants.DB_TABLE_SUBMITSURVEY_FT,
                            Constants.DB_TABLE_SUBMITSURVEY_SLT,
                            Constants.DB_TABLE_SUBMITSURVEY_SLNG,
                            Constants.DB_TABLE_SUBMITSURVEY_ELT,
                            Constants.DB_TABLE_SUBMITSURVEY_ELNG,
                            Constants.DB_TABLE_SUBMITSURVEY_REPORTED_START_TIME,
                            Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                            Constants.DB_TABLE_SUBMITSURVEY_UNEMPTY_QUES_COUNT,
                            Constants.DB_TABLE_SUBMITSURVEY_SID,
                            Constants.DB_TABLE_SUBMITSURVEY_purchase_details,
                            Constants.DB_TABLE_SUBMITSURVEY_purchase_payment,
                            Constants.DB_TABLE_SUBMITSURVEY_purchase_description,
                            Constants.DB_TABLE_SUBMITSURVEY_service_invoice_number,
                            Constants.DB_TABLE_SUBMITSURVEY_service_payment,
                            Constants.DB_TABLE_SUBMITSURVEY_service_description,
                            Constants.DB_TABLE_SUBMITSURVEY_transportation_payment,
                            Constants.DB_TABLE_SUBMITSURVEY_transportation_description,
                            Constants.DB_TABLE_SUBMITSURVEY_RS},
                    orderID, freetext, Helper.critStartLat,
                    Helper.critStartLong, Helper.critEndLat,
                    Helper.critEndLong, finishTimeText, startTime, String
                            .valueOf(nonEmptyCount), surveyId,
                    thisSurveyQuotas, (edit_purchase_details == null) ? null
                            : edit_purchase_details.getText().toString(),
                    (edit_purchase_payment == null) ? null
                            : edit_purchase_payment.getText().toString(),
                    (edit_purchase_payment == null) ? null
                            : edit_purchase_description.getText().toString(),
                    (edit_service_invoice_number == null) ? null
                            : edit_service_invoice_number.getText().toString(),
                    (edit_service_payment == null) ? null
                            : edit_service_payment.getText().toString(),
                    (edit_service_description == null) ? null
                            : edit_service_description.getText().toString(),
                    (edit_transportation_payment == null) ? null
                            : edit_transportation_payment.getText().toString(),
                    (edit_transportation_description == null) ? null
                            : edit_transportation_description.getText()
                            .toString(), millis, replytoserver);

        }

        // DBHelper.updateQuestionnaire(Constants.DB_TABLE_QUESTIONNAIRE,
        // new String[] { Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
        // Constants.DB_TABLE_QUESTIONNAIRE_QTEXT,
        // Constants.DB_TABLE_QUESTIONNAIRE_QVALUE,
        // Constants.DB_TABLE_QUESTIONNAIRE_QTL,
        // Constants.DB_TABLE_QUESTIONNAIRE_OT,
        // Constants.DB_TABLE_ANSWERS_BRANCHID,
        // Constants.DB_TABLE_ANSWERS_WORKERID,
        // Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
        // Constants.DB_TABLE_QUESTIONNAIRE_FT,
        // Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
        // Constants.DB_TABLE_QUESTIONNAIRE_LoopInfo },
        // questionnaireData, pos_shelf_item, set.getSetID());

        DBAdapter.LogCommunication("checkerDBLog.txt",
                "QuestionaireAct-updateThisQuestionnaire=" + set.getSetID());

    }

    private boolean validateImageNeededisError() {
        textBoxErrorMessage = getResources().getString(
                R.string.it_is_mandatory_to_attach_a_file);
        if (questionObject.getAttachment() == null
                || questionObject.getAttachment().equals("")
                || questionObject.getAttachment().equals("0")
                || questionObject.getAttachment().equals("1")) {
            textBoxErrorMessage = null;
            return false;
        } else if (recorder != null && recorder.recording == true
                && recorder.DataId != null
            // && recorder.DataId.equals(questionObject.getDataID())
        ) {

            textBoxErrorMessage = null;
            return false;
        } else if ((uploadList != null && uploadList.size() > 0)
                || (server_attached_files != null && server_attached_files
                .size() > 0)) {
            String dataid = questionObject.getDataID();
            if (dataid.contains("^")) {
                dataid += "#@" + questionObject.getLoopInfo();
            }

            for (int j = 0; server_attached_files != null
                    && j < server_attached_files.size(); j++) {

                if (server_attached_files.get(j).getFileDataID() != null
                        && server_attached_files.get(j).getFileDataID()
                        .equals(dataid)
                        && server_attached_files.get(j).getFileName() != null
                        && !server_attached_files.get(j).getFileName().trim()
                        .equals("")) {
                    textBoxErrorMessage = null;
                    return false;
                }
            }
            for (int i = 0; uploadList != null && i < uploadList.size(); i++) {

                if (uploadList.get(i).getDataID() != null
                        && !uploadList.get(i).getIsLast()
                        && uploadList.get(i).getDataID().equals(dataid)) {
                    textBoxErrorMessage = null;

                    return false;
                }
            }
        }
        // wiki
        if ((lastDataId == null && !isRestoring) && hideAttachedFiles()) {
            ShowAlert(this, getString(R.string.questionnaire_alert_title),
                    textBoxErrorMessage,
                    getString(R.string.questionnaire_btn_text));
            nextBtn.setClickable(true);
            return true;
        }
        return false;// yes there is error
    }

    private boolean validatePurchaseInput() {
        textBoxErrorMessage = null;
        if (edit_purchase_details != null
                && edit_purchase_details.getText() != null
                && edit_purchase_details.getText().toString() != null
                && edit_purchase_details.getText().toString().length() == 0) {

            textBoxErrorMessage = getResources().getString(
                    R.string.purchase_invoice_number)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_simple_error);
        }

        if (edit_purchase_payment != null
                && edit_purchase_payment.getText() != null
                && edit_purchase_payment.getText().toString() != null
                && edit_purchase_payment.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.purchase_payment)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_numeric_error);
            ShowAlert(this, getString(R.string.questionnaire_alert_title),
                    textBoxErrorMessage,
                    getString(R.string.questionnaire_btn_text));

            return false;
        } else {
            if (order.getsPurchaseLimit() != null
                    && order.getsPurchaseLimit().length() > 0) {
                try {
                    double plimit = Double.parseDouble(edit_purchase_payment
                            .getText().toString());
                    double pdata = Double
                            .parseDouble(order.getsPurchaseLimit());

                    if (pdata != 0.0 && plimit > pdata) {
                        textBoxErrorMessage = getResources().getString(
                                R.string.purchase_payment)
                                + ": ";
                        textBoxErrorMessage += getResources().getString(
                                R.string.purchase_exceeds_error);
                        ShowAlert(this,
                                getString(R.string.questionnaire_alert_title),
                                textBoxErrorMessage,
                                getString(R.string.questionnaire_btn_text));
                        return false;
                    }
                } catch (Exception ex) {
                }

            }

        }

        if (edit_purchase_description != null
                && edit_purchase_description.getText() != null
                && edit_purchase_description.getText().toString() != null
                && edit_purchase_description.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.purchase_description)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_simple_error);

            // ShowAlert(this, getString(R.string.questionnaire_alert_title),
            // textBoxErrorMessage,
            // getString(R.string.questionnaire_btn_text));
            // return false;
        }
        if (edit_service_invoice_number != null
                && edit_service_invoice_number.getText() != null
                && edit_service_invoice_number.getText().toString() != null
                && edit_service_invoice_number.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.service_invoice_number)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_simple_error);
            // ShowAlert(this, getString(R.string.questionnaire_alert_title),
            // textBoxErrorMessage,
            // getString(R.string.questionnaire_btn_text));
            // return false;
        }
        if (edit_service_payment != null
                && edit_service_payment.getText() != null
                && edit_service_payment.getText().toString() != null
                && edit_service_payment.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.service_payment)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_numeric_error);
            ShowAlert(this, getString(R.string.questionnaire_alert_title),
                    textBoxErrorMessage,
                    getString(R.string.questionnaire_btn_text));
            return false;
        }
        if (edit_service_description != null
                && edit_service_description.getText() != null
                && edit_service_description.getText().toString() != null
                && edit_service_description.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.service_description)
                    + ": ";
            // textBoxErrorMessage += getResources().getString(
            // R.string.purchase_simple_error);
            // ShowAlert(this, getString(R.string.questionnaire_alert_title),
            // textBoxErrorMessage,
            // getString(R.string.questionnaire_btn_text));
            // return false;
        }

        if (edit_transportation_payment != null
                && edit_transportation_payment.getText() != null
                && edit_transportation_payment.getText().toString() != null
                && edit_transportation_payment.getText().toString().length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.transportation_payment)
                    + ": ";
            textBoxErrorMessage += getResources().getString(
                    R.string.purchase_numeric_error);
            ShowAlert(this, getString(R.string.questionnaire_alert_title),
                    textBoxErrorMessage,
                    getString(R.string.questionnaire_btn_text));
            return false;
        }

        if (edit_transportation_description != null
                && edit_transportation_description.getText() != null
                && edit_transportation_description.getText().toString() != null
                && edit_transportation_description.getText().toString()
                .length() == 0) {
            textBoxErrorMessage = getResources().getString(
                    R.string.transportation_description)
                    + ": ";
            // textBoxErrorMessage += getResources().getString(
            // R.string.purchase_simple_error);
            // ShowAlert(this, getString(R.string.questionnaire_alert_title),
            // textBoxErrorMessage,
            // getString(R.string.questionnaire_btn_text));
            // return false;
        }
        return true;
    }

    private boolean ValidateForm() {
        if (lastDataId != null || isRestoring) return true;
        int qTypeLink = -1;
        int displayType = -1;
        try {
            qTypeLink = Integer.parseInt(questionObject.getQuestionTypeLink());
        } catch (Exception ex) {
        }
        try {
            displayType = Integer.parseInt(questionObject.getDisplayType());
        } catch (Exception ex) {
        }
        boolean returnValue = false;

        boolean isDateTimeOk = true;
        if (questionObject != null
                && questionObject.getMiType() != null
                && (questionObject.getMiType().equals("8")
                || questionObject.getMiType().equals("7")
                || questionObject.getMiType().equals("6") || questionObject
                .getMiType().equals("4"))) {
            vDateTime = Helper.TimePicker;
        }

        if (vDateTime == Helper.TimePicker && btextbox != null) {

            isDateTimeOk = DateValidator.validateTimeOnly(btextbox.getText()
                    .toString(), questionObject.getMiType());
        } else if (vDateTime == Helper.DatePicker && btextbox != null) {
            isDateTimeOk = DateValidator.validateDateOnly(btextbox.getText()
                    .toString());
        } else if (vDateTime == Helper.DateTimePicker && btextbox != null) {
            isDateTimeOk = DateValidator.validateDateTimeOnly(btextbox
                    .getText().toString());
        } else if (finishTime != null) {
            boolean isDateTimeOkk = DateValidator
                    .validateDateTimeOnly(finishTime.getText().toString());
            if (!isDateTimeOkk) {
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        getString(R.string.questionnaire_date_valid_error),
                        getString(R.string.questionnaire_btn_text));

                textBoxErrorMessage = "";
                returnValue = false;
                return returnValue;
            }
        }

        if (!isDateTimeOk) {
            ShowAlert(this, getString(R.string.questionnaire_alert_title),
                    getString(R.string.questionnaire_date_valid_error),
                    getString(R.string.questionnaire_btn_text));
            textBoxErrorMessage = "";
            returnValue = false;
            return returnValue;
        } else if (questionObject != null
                && questionObject.getMiType() != null
                && (questionObject.getMiType().equals("8")
                || questionObject.getMiType().equals("7")
                || questionObject.getMiType().equals("6") || questionObject
                .getMiType().equals("4")))
            returnValue = true;
        vDateTime = Helper.NoTimePicker;

        if (listObjects == null)
            returnValue = false;

        questionObject = listObjects.get(nextQIndex);
        if (questionObject.getQuestionTypeLink() == null
                || (questionObject.getObjectType().equals("15")))
            returnValue = false;

        if (questionObject.isMi()
                && (questionObject.getObjectType().equals("4"))) {
            boolean isCorrect = validateFreeTextBoxAnswer();
            if (!isCorrect) {
                if (textBoxErrorMessage.equals("")) {
                    textBoxErrorMessage = getResources().getString(
                            R.string.questionnaire_alert_additional);
                    ShowAlert(this,
                            getString(R.string.questionnaire_alert_title),
                            textBoxErrorMessage,
                            getString(R.string.questionnaire_btn_text));
                } else {
                    ShowAlert(this,
                            getString(R.string.questionnaire_alert_title),
                            textBoxErrorMessage,
                            getString(R.string.questionnaire_btn_text));
                    textBoxErrorMessage = "";
                }

                returnValue = false;
                return returnValue;
            }
        }

        if (isSplit) {
            // isSplit = false;
            returnValue = true;
            if (!validateMiAnswer()) {
                if (textBoxErrorMessage.equals("")) {
                    textBoxErrorMessage = getResources().getString(
                            R.string.questionnaire_alert_additional);
                    ShowAlert(this,
                            getString(R.string.questionnaire_alert_title),
                            textBoxErrorMessage,
                            getString(R.string.questionnaire_btn_text));
                    textBoxErrorMessage = "";
                    returnValue = false;
                } else {
                    ShowAlert(this,
                            getString(R.string.questionnaire_alert_title),
                            textBoxErrorMessage,
                            getString(R.string.questionnaire_btn_text));
                    textBoxErrorMessage = "";
                    returnValue = false;
                }

            }
            if (!returnValue) {
                nextBtn.setClickable(true);
                return false;
            }
            returnValue = true;
            boolean isCorrect = false;
            int val = 0;
            int miType = Integer.parseInt(questionObject.getMiType());
            switch (miType) {
                case 0:
                    return true;
                case 1:

                    try {
                        val = textbox.getText().length();
                        if (val == 0 && IsMiMandatory == true)
                            isCorrect = false;
                        if (val == 0
                                && (IsMiMandatory == false && (questionObject
                                .getMiFreeTextMinlength() == null || questionObject
                                .getMiFreeTextMinlength().equals("0"))))
                            return true;

                        int start = 0;
                        try {
                            start = Integer.parseInt(questionObject
                                    .getMiFreeTextMinlength());
                        } catch (Exception ex) {

                        }

                        int end = Integer.MAX_VALUE;
                        try {
                            end = Integer.parseInt(questionObject
                                    .getMiFreeTextMaxlength());
                        } catch (Exception ex) {

                        }

                        textBoxErrorMessage = getResources().getString(
                                R.string.questionnaire_alert_text_between_first);
                        textBoxErrorMessage = textBoxErrorMessage.replace("START",
                                String.valueOf(start));
                        textBoxErrorMessage = textBoxErrorMessage.replace("END",
                                String.valueOf(end));

                        if (start == 0 && end == 0) {
                            textBoxErrorMessage = getResources().getString(
                                    R.string.questionnaire_alert_additional);
                            isCorrect = true;
                        } else if (val >= start && val <= end)
                            isCorrect = true;
                        else
                            isCorrect = false;
                    } catch (Exception e) {
                        isCorrect = false;
                    }
                    break;
                case 6:
                case 7:
                case 8:
                    if (btextbox == null || btextbox.getText() == null)
                        isCorrect = false;
                    else {
                        val = btextbox.getText().length();
                        if (val == 0 && IsMiMandatory == true)
                            isCorrect = false;
                        else
                            isCorrect = true;
                    }
                    break;
                case 5:
                    isCorrect = true;
                    break;
                case 2:
                    try {
                        if (textbox == null || textbox.getText() == null)
                            return false;
                        if (textbox.getText().length() == 0
                                && IsMiMandatory == true)
                            return false;
                        if (textbox.getText().length() == 0
                                && (IsMiMandatory == false && (questionObject
                                .getMiNumberMin() == null || questionObject
                                .getMiNumberMin().equals("0"))))
                            return true;
                        double start = 0;
                        try {
                            start = Integer.parseInt(questionObject
                                    .getMiNumberMin());
                        } catch (Exception ex) {

                        }

                        double end = Integer.MAX_VALUE;
                        try {
                            end = Integer.parseInt(questionObject.getMiNumberMax());
                        } catch (Exception ex) {

                        }
                        textBoxErrorMessage = getResources().getString(
                                R.string.questionnaire_alert_text_betweeeen_first);
                        textBoxErrorMessage = textBoxErrorMessage.replace("START",
                                String.valueOf(start));
                        textBoxErrorMessage = textBoxErrorMessage.replace("END",
                                String.valueOf(end));

                        // val = Double.parseDouble(textbox.getText().toString());
                        if (Double.parseDouble(textbox.getText().toString()) >= start
                                && Double.parseDouble(textbox.getText().toString()) <= end)
                            isCorrect = true;
                        else
                            isCorrect = false;
                    } catch (Exception e) {

                        isCorrect = false;
                    }
                    break;
                case 3:
                    isCorrect = true;
                    break;
                case 4:
                    isCorrect = true;
                    break;
                case 11:
                    isCorrect = true;
                    break;
                case 12:
                    isCorrect = true;
                    break;
                case 13:
                    isCorrect = true;
                    break;
            }
            if (textBoxErrorMessage.equals("") || isCorrect == true) {

            } else {
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        textBoxErrorMessage,
                        getString(R.string.questionnaire_btn_text));
                textBoxErrorMessage = "";
            }

            return isCorrect;
        }

        if (!validateAnswer(qTypeLink, displayType)) {
            if (textBoxErrorMessage == null || textBoxErrorMessage.equals("")) {
                textBoxErrorMessage = getResources().getString(
                        R.string.questionnaire_alert_additional);
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        textBoxErrorMessage,
                        getString(R.string.questionnaire_btn_text));
            } else {
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        textBoxErrorMessage,
                        getString(R.string.questionnaire_btn_text));
                textBoxErrorMessage = "";
            }
            returnValue = false;
            return returnValue;
        }

        if (!validateMiAnswer() && IsMiMandatory) {
            if (textBoxErrorMessage.equals("")) {
                textBoxErrorMessage = getResources().getString(
                        R.string.questionnaire_alert_additional);
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        textBoxErrorMessage,
                        getString(R.string.questionnaire_btn_text));
            } else {
                ShowAlert(this, getString(R.string.questionnaire_alert_title),
                        textBoxErrorMessage,
                        getString(R.string.questionnaire_btn_text));
                textBoxErrorMessage = "";
            }
            returnValue = false;
            return returnValue;
        }
        IsMiMandatory = false;

        if (qTypeLink == 8 || qTypeLink == 9) {
            if (!isValidChackBoxChecked(questionObject
                    .getMaxAnswersForMultiple())) {
                System.out.println(isValidChackBoxChecked(questionObject
                        .getMaxAnswersForMultiple()));
                ShowAlert(
                        this,
                        getString(R.string.questionnaire_alert_title),
                        getString(R.string.questionnaire_multiple_max_ans_alert),
                        getString(R.string.questionnaire_btn_text));
                returnValue = false;
                return returnValue;
            }
        }
        textBoxErrorMessage = "";
        returnValue = true;

        return returnValue;
    }

    private boolean validateMiAnswer() {
        if (questionObject.getMiText()) {
            if (textbox != null
                    && textbox.getVisibility() == RelativeLayout.VISIBLE) {
                if (textbox.getText().toString().trim().equals(""))
                    return false;
            } else if (btextbox != null
                    && btextbox.getVisibility() == RelativeLayout.VISIBLE) {
                if (btextbox.getText().toString().trim().equals(""))
                    return false;
            }
        }
        return true;
    }

    private boolean ValidateForm2() {
        if (listObjects == null)
            return false;
        questionObject = listObjects.get(nextQIndex);
        if (questionObject.getQuestionTypeLink() == null)
            return true;
        if (!validateBlankAnswer(
                Integer.parseInt(questionObject.getQuestionTypeLink()),
                Integer.parseInt(questionObject.getDisplayType()))) {
            return false;
        }

        if (Integer.parseInt(questionObject.getQuestionTypeLink()) == 8
                || Integer.parseInt(questionObject.getQuestionTypeLink()) == 9) {
            if (!isValidChackBoxChecked(questionObject
                    .getMaxAnswersForMultiple())) {
                return false;
            }
        }
        return true;
    }

    private boolean validateBranchBlankAnswer() {

        if (questionObject.getBranchInputMandatory() == null
                || questionObject.getBranchInputMandatory().equals("")
                || questionObject.getBranchInputMandatory().equals("0")) {
            return true;
        }

        return selectedBranch >= 1;

    }

    private boolean validateWorkerBlankAnswer() {
        if (questionObject.getWorkerInputMandatory() == null
                || questionObject.getWorkerInputMandatory().equals("")
                || questionObject.getWorkerInputMandatory().equals("0")) {
            return true;
        }

        return selectedWorker >= 1;

    }

    private boolean validateBlankAnswer(int qtype, int displayType) {

        if (questionObject.getListAnswers() == null
                || questionObject.getListAnswers().size() <= 0)
            return true;
        switch (qtype) {
            case 3:
                // if (displayType == 7)
                // if (rangeBar != null) {
                // return rangeBar.getmLeftIndex() != -1;
                // }
                // break;
            case 7:
                if (displayType == 0 || displayType == 1 || displayType == 5)
                    if (radioGroup != null)
                        return radioGroup.getSelectedItemPosition() != -1;
                    else if (simpleListView != null) {
                        if (IsMandatory)
                            return selectedSimple >= 1;
                        else
                            return selectedSimple >= 0;
                    } else if (ratingBar != null) {
                        if (IsMandatory)
                            return ratingBar.getRating() >= 1;
                        else
                            return true;
                    }
                // else if (rangeBar != null) {
                // return rangeBar.getmLeftIndex() != -1;
                // }
                break;

            case 4:
                if (textbox != null && (!textbox.getText().toString().equals(""))) {
                    return true;
                } else if (btextbox != null
                        && (!btextbox.getText().toString().equals(""))) {
                    return true;
                }
                break;

            case 8:
            case 9:
                // if(displayType==4)
                return isChackBoxChecked();
        }
        return false;
    }

    private boolean validateadditionjumpapramsonly() {
        boolean isCorrect = false;
        int selectedIndex = getSingleChoiceAnswer();
        if (checkboxgrp != null) {

            for (int i = 0; i < checkboxgrp.getChildCount(); i++) {
                CheckBox cb = null;
                if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                    RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                            .getChildAt(i);
                    if (thisLayout.getChildAt(0) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(0);
                    else if (thisLayout.getChildAt(1) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(1);
                    else if (thisLayout.getChildAt(2) instanceof CheckBox)
                        cb = (CheckBox) thisLayout.getChildAt(2);

                } else {
                    cb = (CheckBox) checkboxgrp.getChildAt(i);
                }
                if (cb != null && cb.isChecked()) {
                    // qd.setAnswers(listAnswers.get(i));
                    Answers ans = (setCheckRadioAnswers(
                            Integer.parseInt(questionObject.getDisplayType()),
                            cb.getTag().toString(), listAnswers));

                    int mim = 0;
                    try {
                        mim = Integer.valueOf(ans.getAdditionalInfoMandatory());
                    } catch (Exception ex) {
                    }
                    if (mim > 0) {
                        IsMiMandatory = true;
                    }

                }
            }
            return isCorrect;
        }
        if (multiSpinner != null) {
            List<String> selectedItems = multiSpinner.getSelectedStrings();
            for (int i = 0; i < selectedItems.size(); i++) {

                Answers ans = (setCheckRadioAnswers(
                        Integer.parseInt(questionObject.getDisplayType()),
                        selectedItems.get(i), listAnswers));
                int mim = 0;
                try {
                    mim = Integer.valueOf(ans.getAdditionalInfoMandatory());
                } catch (Exception ex) {
                }
                if (mim > 0) {
                    IsMiMandatory = true;
                }

            }
            return isCorrect;
        }

        if (listAnswers != null
                && listAnswers.size() > selectedIndex
                && selectedIndex != -1
                && ((IsMandatory == true
                && radioGroup == null
                && selectedIndex != 0
                && listAnswers.get(selectedIndex - 1)
                .getHideAdditionalInfo() != null && listAnswers
                .get(selectedIndex - 1).getHideAdditionalInfo()
                .length() > 0) || ((IsMandatory == false || radioGroup != null)
                && listAnswers.get(selectedIndex)
                .getHideAdditionalInfo() != null && listAnswers
                .get(selectedIndex).getHideAdditionalInfo().length() > 0))) {
            try {
                if (IsMandatory && radioGroup == null && selectedIndex != 0) {

                    int i = Integer.valueOf(listAnswers.get(selectedIndex - 1)
                            .getHideAdditionalInfo());
                    if (i > 0)
                        isHideAdditionalInfoSingleChoiceAnswers = 2;
                    else
                        isHideAdditionalInfoSingleChoiceAnswers = 0;
                } else {
                    int i = Integer.valueOf(listAnswers.get(selectedIndex)
                            .getHideAdditionalInfo());
                    if (i > 0)
                        isHideAdditionalInfoSingleChoiceAnswers = 2;
                    else
                        isHideAdditionalInfoSingleChoiceAnswers = 0;

                }
            } catch (Exception ex) {
                isHideAdditionalInfoSingleChoiceAnswers = 0;
            }
        } else
            isHideAdditionalInfoSingleChoiceAnswers = 0;

        if (listAnswers != null
                && selectedIndex != -1
                && listAnswers.size() > selectedIndex
                && ((IsMandatory == true
                && radioGroup == null
                && selectedIndex != 0
                && listAnswers.get(selectedIndex - 1)
                .getAdditionalInfoMandatory() != null && listAnswers
                .get(selectedIndex - 1).getAdditionalInfoMandatory()
                .length() > 0) || ((IsMandatory == false || radioGroup != null)
                && listAnswers.get(selectedIndex)
                .getAdditionalInfoMandatory() != null && listAnswers
                .get(selectedIndex).getAdditionalInfoMandatory()
                .length() > 0))) {
            try {
                if (IsMandatory && radioGroup == null && selectedIndex != 0) {
                    int i = Integer.valueOf(listAnswers.get(selectedIndex - 1)
                            .getAdditionalInfoMandatory());
                    if (i > 0)
                        isMandatorySingleChoiceAnswers = 2;
                    else
                        isMandatorySingleChoiceAnswers = 0;
                } else {
                    int i = Integer.valueOf(listAnswers.get(selectedIndex)
                            .getAdditionalInfoMandatory());
                    if (i > 0)
                        isMandatorySingleChoiceAnswers = 2;
                    else
                        isMandatorySingleChoiceAnswers = 0;
                }
            } catch (Exception ex) {
                isMandatorySingleChoiceAnswers = 0;
            }
        } else
            isMandatorySingleChoiceAnswers = 0;

        if (isMandatorySingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = true;
        } else if (Helper.comapreString(questionObject.getMiMandatory(), "1")) {
            IsMiMandatory = true;
        } else
            IsMiMandatory = false;
        if (isHideAdditionalInfoSingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = false;
            isCorrect = true;
        }
        return isCorrect && !IsMiMandatory;

    }

    private boolean validateadditionjumpaprams() {
        boolean isCorrect = false;
        if (isServerAnswersActAsSubmit == false)
            return isCorrect;
        int selectedIndex = getSingleChoiceAnswer();
        if (listAnswers != null
                && listAnswers.size() > selectedIndex
                && selectedIndex != -1
                && listAnswers.get(selectedIndex).getHideAdditionalInfo() != null
                && listAnswers.get(selectedIndex).getHideAdditionalInfo()
                .length() > 0) {
            try {
                int i = Integer.valueOf(listAnswers.get(selectedIndex)
                        .getHideAdditionalInfo());
                if (i > 0)
                    isHideAdditionalInfoSingleChoiceAnswers = 2;
                else
                    isHideAdditionalInfoSingleChoiceAnswers = 0;

            } catch (Exception ex) {
                isHideAdditionalInfoSingleChoiceAnswers = 0;
            }
        } else
            isHideAdditionalInfoSingleChoiceAnswers = 0;

        if (listAnswers != null
                && selectedIndex != -1
                && listAnswers.size() > selectedIndex
                && listAnswers.get(selectedIndex).getAdditionalInfoMandatory() != null
                && listAnswers.get(selectedIndex).getAdditionalInfoMandatory()
                .length() > 0) {
            try {
                int i = Integer.valueOf(listAnswers.get(selectedIndex)
                        .getAdditionalInfoMandatory());
                if (i > 0)
                    isMandatorySingleChoiceAnswers = 2;
                else
                    isMandatorySingleChoiceAnswers = 0;

            } catch (Exception ex) {
                isMandatorySingleChoiceAnswers = 0;
            }
        } else
            isMandatorySingleChoiceAnswers = 0;

        if (isMandatorySingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = true;
        } else if (Helper.comapreString(questionObject.getMiMandatory(), "1")) {
            IsMiMandatory = true;
        } else
            IsMiMandatory = false;
        if (isHideAdditionalInfoSingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = false;
            isCorrect = true;
        }
        return isCorrect;

    }

    public boolean validateadditionjumpapramsRadioButton(int selectedIndex) {
        boolean isCorrect = false;
        Answers selectedAnswer = null;
        if (listAnswers != null && selectedIndex != -1
                && listAnswers.size() > selectedIndex) {
            selectedAnswer = listAnswers.get(selectedIndex);
        }
        show_hide_mi(selectedAnswer);
        isCorrect = isServerAnswersActAsSubmit;
        return isCorrect;
    }

    private void show_hide_mi(Answers selectedAnswer) {
        if (selectedAnswer == null)
            return;
        if (questionObject.getMiType().equals("11")
                || questionObject.getMiType().equals("12")
                || questionObject.getMiType().equals("13")
                || questionObject.getMiType().equals("14")
                || questionObject.getMiType().equals("15"))
            return;
        if (selectedAnswer.getHideAdditionalInfo() != null
                && selectedAnswer.getHideAdditionalInfo().length() > 0) {
            try {
                int i = Integer.valueOf(selectedAnswer.getHideAdditionalInfo());
                if (i > 0)
                    isHideAdditionalInfoSingleChoiceAnswers = 2;
                else
                    isHideAdditionalInfoSingleChoiceAnswers = 0;

            } catch (Exception ex) {
                isHideAdditionalInfoSingleChoiceAnswers = 0;
            }
        } else
            isHideAdditionalInfoSingleChoiceAnswers = 0;

        if (selectedAnswer.getAdditionalInfoMandatory() != null
                && selectedAnswer.getAdditionalInfoMandatory().length() > 0) {
            try {
                int i = Integer.valueOf(selectedAnswer
                        .getAdditionalInfoMandatory());
                if (i > 0)
                    isMandatorySingleChoiceAnswers = 2;
                else
                    isMandatorySingleChoiceAnswers = 0;

            } catch (Exception ex) {
                isMandatorySingleChoiceAnswers = 0;
            }
        } else
            isMandatorySingleChoiceAnswers = 0;

        if (isMandatorySingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = true;
        } else if (Helper.comapreString(questionObject.getMiMandatory(), "1")) {
            IsMiMandatory = true;
        } else
            IsMiMandatory = false;
        if (isHideAdditionalInfoSingleChoiceAnswers > 1)// hide=yes
        {
            IsMiMandatory = false;

        }

        if (IsMiMandatory == false
                && isHideAdditionalInfoSingleChoiceAnswers > 1
                && (textbox != null || btextbox != null || miWholeView != null)) {
            if (miWholeView != null)
                miWholeView.setVisibility(RelativeLayout.GONE);
            if (textbox != null)
                textbox.setVisibility(RelativeLayout.GONE);
            if (btextbox != null)
                btextbox.setVisibility(RelativeLayout.GONE);
            if (mitv != null) {
                mitv.setVisibility(RelativeLayout.GONE);
            }
        } else if (textbox != null || btextbox != null || miWholeView != null) {

            if (miWholeView != null)
                miWholeView.setVisibility(RelativeLayout.VISIBLE);
            if (textbox != null)
                textbox.setVisibility(RelativeLayout.VISIBLE);
            if (btextbox != null)
                btextbox.setVisibility(RelativeLayout.VISIBLE);

            if (mitv != null) {
                mitv.setVisibility(RelativeLayout.VISIBLE);
            }
        }

    }

    String textBoxErrorMessage = "";
    private boolean isSavingFirstTime = false;

    private boolean validateFreeTextBoxAnswer() {
        // IsMiMandatory = false;
        boolean IsMiMandatory = this.IsMiMandatory;
        boolean isCorrect = false;
        if (questionObject == null
                || questionObject.getMiType() == null
                || (textbox == null && btextbox == null && miWholeView == null)
                || (miWholeView != null && miWholeView.getVisibility() == RelativeLayout.GONE))
            return true;
        int miType = Integer.parseInt(questionObject.getMiType());
        if (miType == 0) return true;
        int val = 0;
        if (textbox != null)
            val = textbox.getText().length();

        if (btextbox != null)
            val = btextbox.getText().length();

        if (validateadditionjumpaprams())
            return true;
        if (validateadditionjumpapramsonly())
            return true;

        boolean hideAdditionalInfo = true;
        if (checkboxgrp != null)
            hideAdditionalInfo = QuestionnaireActivity.hideShowMiInCheckBox(listAnswers, checkboxgrp, questionObject);
        else if (multiSpinner != null)
            hideAdditionalInfo = QuestionnaireActivity.hideShowMiInMultipleDropDown(listAnswers, multiSpinner, questionObject);
        if (hideAdditionalInfo == false) IsMiMandatory = true;
        if (val == 0 && IsMiMandatory == true)
            return false;
        if (val == 0 && IsMiMandatory == false)
            return true;
        if (val == 0
                && (IsMiMandatory == false
                && (questionObject.getMiFreeTextMinlength() == null || questionObject
                .getMiFreeTextMinlength().equals("0")) && (questionObject
                .getMiNumberMin() == null || questionObject
                .getMiNumberMin().equals("0"))))
            return true;
        textBoxErrorMessage = "";
        switch (miType) {
            case 0:
                return true;
            case 1:

                try {
                    val = textbox.getText().length();
                    if (val == 0 && IsMiMandatory == true)
                        isCorrect = false;
                    if (val == 0
                            && (IsMiMandatory == false && (questionObject
                            .getMiFreeTextMinlength() == null || questionObject
                            .getMiFreeTextMinlength().equals("0"))))
                        return true;

                    int start = 0;
                    try {
                        start = Integer.parseInt(questionObject
                                .getMiFreeTextMinlength());
                    } catch (Exception ex) {

                    }

                    int end = Integer.MAX_VALUE;
                    try {
                        end = Integer.parseInt(questionObject
                                .getMiFreeTextMaxlength());
                    } catch (Exception ex) {

                    }

                    textBoxErrorMessage = getResources().getString(
                            R.string.questionnaire_alert_text_between_first);
                    textBoxErrorMessage = textBoxErrorMessage.replace("START",
                            String.valueOf(start));
                    textBoxErrorMessage = textBoxErrorMessage.replace("END",
                            String.valueOf(end));

                    if (start == 0 && end == 0) {
                        textBoxErrorMessage = getResources().getString(
                                R.string.questionnaire_alert_additional);
                        isCorrect = true;
                    } else if (val >= start && val <= end)
                        isCorrect = true;
                    else
                        isCorrect = false;
                } catch (Exception e) {
                    isCorrect = false;
                }
                break;
            case 6:
            case 7:
            case 8:
                if (btextbox == null || btextbox.getText() == null)
                    isCorrect = false;
                else {
                    val = btextbox.getText().length();
                    if (val == 0 && IsMiMandatory == true)
                        isCorrect = false;
                    else
                        isCorrect = true;
                }
                break;
            case 5:
                isCorrect = true;
                break;
            case 2:
                try {
                    if (textbox == null || textbox.getText() == null)
                        return false;
                    if (textbox.getText().length() == 0 && IsMiMandatory == true)
                        return false;
                    if (textbox.getText().length() == 0
                            && (IsMiMandatory == false && (questionObject
                            .getMiNumberMin() == null || questionObject
                            .getMiNumberMin().equals("0"))))
                        return true;
                    long start = 0;
                    try {
                        start = Long.parseLong(questionObject.getMiNumberMin());
                    } catch (Exception ex) {

                    }

                    long end = Long.MAX_VALUE;
                    try {
                        end = Long.parseLong(questionObject.getMiNumberMax());
                    } catch (Exception ex) {

                    }
                    textBoxErrorMessage = getResources().getString(
                            R.string.questionnaire_alert_text_betweeeen_first);
                    textBoxErrorMessage = textBoxErrorMessage.replace("START",
                            String.valueOf(start));
                    textBoxErrorMessage = textBoxErrorMessage.replace("END",
                            String.valueOf(end));

                    // val = Double.parseDouble(textbox.getText().toString());
                    if (Double.parseDouble(textbox.getText().toString()) >= start
                            && Double.parseDouble(textbox.getText().toString()) <= end)
                        isCorrect = true;
                    else
                        isCorrect = false;
                } catch (Exception e) {

                    isCorrect = false;
                }
                break;
            case 3:
                isCorrect = true;
                break;
            case 4:
                isCorrect = true;
                break;
            case 11:
                isCorrect = true;
                break;
            case 12:
                isCorrect = true;
                break;
            case 13:
                isCorrect = true;
                break;
            case 16:
                isCorrect = false;
                textBoxErrorMessage = getResources().getString(
                        R.string.email_validation_text);

                if (textbox == null || textbox.getText() == null)
                    break;
                if (textbox.getText().length() == 0 && IsMiMandatory == true)
                    break;
                if (Patterns.EMAIL_ADDRESS.matcher(textbox.getText().toString())
                        .matches()) {
                    isCorrect = true;
                }

                break;
        }
        return isCorrect;
    }

    private boolean validateAnswer(int qtype, int displayType) {
        if (ratingBar != null && IsMandatory && ratingBar.getRating() >= 1)
            return true;
        else if (ratingBar != null && IsMandatory == true) {
            textBoxErrorMessage = getResources().getString(
                    R.string.questionnaire_alert_no_answer);

            return false;
        }

        switch (qtype) {
            case 3:
            case 7:
            case 12:
                if (displayType == 5)
                    return true;
                if (displayType == 3)
                    return true;
                if (displayType == 0 || displayType == 1) {
                    boolean boool = false;

                    if (radioGroup != null)
                        boool = radioGroup.getSelectedItemPosition() != -1;
                    else if (simpleListView != null) {
                        if (IsMandatory)
                            boool = selectedSimple >= 1;
                        else
                            boool = selectedSimple >= 0;
                    }
                    // else if (rangeBar != null) {
                    // boool = rangeBar.getLeftIndex() != -1;
                    // }
                    else
                        boool = false;

                    if (boool || !IsMandatory) {
                        return true;
                    } else {
                        textBoxErrorMessage = getResources().getString(
                                R.string.questionnaire_alert_no_answer);

                        return false;
                    }
                }

                if (displayType == 2 || displayType == 4 || displayType == 6) {
                    boolean boool = false;
                    try {
                        boool = isChackBoxChecked();
                    } catch (Exception ex) {
                        boool = true;
                    }

                    if (boool || !IsMandatory) {
                        return true;
                    } else {
                        textBoxErrorMessage = getResources().getString(
                                R.string.no_answer_chosen);
                        return false;
                    }
                }
                break;

            case 4:
                boolean isCorrect = validateFreeTextBoxAnswer();
                return isCorrect;
            case 8:
            case 9:
            case 11:
                boolean boool = false;
                try {
                    boool = isChackBoxChecked();
                } catch (Exception ex) {
                    boool = true;
                }

                if (boool || !IsMandatory) {
                    return true;
                } else {
                    textBoxErrorMessage = getResources().getString(
                            R.string.no_answer_chosen);
                    return false;
                }
        }
        return true;
    }

    private boolean isValidChackBoxChecked(String val) {
        if (val == null)
            return true;

        int answercount = 0;
        for (int i = 0; checkboxgrp != null && i < checkboxgrp.getChildCount(); i++) {
            CheckBox cb = null;
            if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                        .getChildAt(i);
                if (thisLayout.getChildAt(0) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(0);
                else if (thisLayout.getChildAt(1) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(1);
                else if (thisLayout.getChildAt(2) instanceof CheckBox)
                    cb = (CheckBox) thisLayout.getChildAt(2);
            } else {
                cb = (CheckBox) checkboxgrp.getChildAt(i);
            }
            if (cb.isChecked())
                answercount++;
        }
        if ((answercount > Integer.parseInt(val)) && !(val.equals("0")))
            return false;

        return true;
    }

    private QuestionnaireData getAnswers(int qtype, int displayType,
                                         QuestionnaireData qd) {
        if (qd == null)
            return null;
        switch (qtype) {
            case 3:
            case 7:
            case 12:
                if (displayType == 0 || displayType == 7) {
                    int selectedIndex = getSingleChoiceAnswer();
                    if (selectedIndex != -1 && (listAnswers != null)
                            && listAnswers.size() > selectedIndex) {
                        qd.initListAnswer();
                        qd.setAnswers(listAnswers.get(selectedIndex));
                        // qd.setAnsText(listAnswers.get(selectedIndex).getAnswer());
                        qd.setPosition(selectedIndex);
                        if (listAnswers.get(selectedIndex).getJumpTo() != null
                                && listAnswers.get(selectedIndex).getJumpTo()
                                .length() > 0) {
                            if (isNextButton) {
                                isJumpFromSingleChoiceAnswers = true;
                                DataID = listAnswers.get(selectedIndex).getJumpTo();
                                if (DataID.equals("0"))
                                    DataID = "";
                                nextPageJumpID = listAnswers.get(selectedIndex)
                                        .getJumpTo();
                            }
                        }
                    }

                    return qd;
                } else if (displayType == 1 || displayType == 5) {
                    int selectedIndex = getSingleChoiceAnswer();
                    if (array_spinner != null && listAnswers != null
                            && array_spinner.length > listAnswers.size()) {
                        selectedIndex--;
                    }
                    if (selectedIndex != -1 && (listAnswers != null)) {
                        qd.initListAnswer();
                        qd.setAnswers(listAnswers.get(selectedIndex));
                        // qd.setAnsText(listAnswers.get(selectedIndex).getAnswer());
                        qd.setPosition(selectedIndex);
                        if (listAnswers.get(selectedIndex).getJumpTo() != null
                                && listAnswers.get(selectedIndex).getJumpTo()
                                .length() > 0) {
                            isJumpFromSingleChoiceAnswers = true;

                            DataID = listAnswers.get(selectedIndex).getJumpTo();
                            if (DataID.equals("0"))
                                DataID = "";
                            nextPageJumpID = listAnswers.get(selectedIndex)
                                    .getJumpTo();
                        }
                    }

                    return qd;
                }
            case 8:
            case 9:
            case 11:
                if (checkboxgrp != null) {
                    qd.initListAnswer();
                    for (int i = 0; i < checkboxgrp.getChildCount(); i++) {
                        CheckBox cb = null;
                        if (checkboxgrp.getChildAt(i) instanceof RelativeLayout) {
                            RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
                                    .getChildAt(i);
                            if (thisLayout.getChildAt(0) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(0);
                            else if (thisLayout.getChildAt(1) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(1);
                            else if (thisLayout.getChildAt(2) instanceof CheckBox)
                                cb = (CheckBox) thisLayout.getChildAt(2);
                        } else {
                            cb = (CheckBox) checkboxgrp.getChildAt(i);
                        }
                        if (cb.isChecked()) {
                            // qd.setAnswers(listAnswers.get(i));
                            qd.setAnswers(setCheckRadioAnswers(displayType, cb
                                    .getTag().toString(), listAnswers));
                        }

                    }
                    return qd;
                }
                if (multiSpinner != null) {
                    qd.initListAnswer();
                    List<String> selectedItems = multiSpinner.getSelectedStrings();
                    for (int i = 0; i < selectedItems.size(); i++) {

                        qd.setAnswers(setCheckRadioAnswers(displayType,
                                selectedItems.get(i), listAnswers));

                    }
                    return qd;

                }
                if (displayType == 1 || displayType == 5) {
                    int selectedIndex = getSingleChoiceAnswer();
                    if (array_spinner != null
                            && array_spinner.length > listAnswers.size()) {
                        selectedIndex--;
                    }
                    if (selectedIndex != -1 && (listAnswers != null)) {
                        qd.initListAnswer();
                        qd.setAnswers(listAnswers.get(selectedIndex));
                        // qd.setAnsText(listAnswers.get(selectedIndex).getAnswer());
                        qd.setPosition(selectedIndex);
                        if (listAnswers.get(selectedIndex).getJumpTo() != null
                                && listAnswers.get(selectedIndex).getJumpTo()
                                .length() > 0) {
                            isJumpFromSingleChoiceAnswers = true;

                            DataID = listAnswers.get(selectedIndex).getJumpTo();
                            if (DataID.equals("0"))
                                DataID = "";
                            nextPageJumpID = listAnswers.get(selectedIndex)
                                    .getJumpTo();
                        }
                    }

                    return qd;
                }
        }
        return qd;
    }

    private Answers setCheckRadioAnswers(int displayType, String text,
                                         ArrayList<Answers> listAnswers2) {
        for (int i = 0; i < listAnswers2.size(); i++) {
            if (listAnswers2.get(i).getAnswer().toLowerCase()
                    .equals(text.toLowerCase())) {
                if (displayType == 6) {
                    String rank = getRank(i + 1);
                    if (rank != null)
                        listAnswers2.get(i).setRank(Integer.parseInt(rank));
                }
                return listAnswers2.get(i);
            }
        }
        return null;
    }

    private QuestionnaireData getEditTextData(QuestionnaireData qd) {
        if (textbox != null)
            qd.setAnswerText(textbox.getText().toString());
        else if (btextbox != null)
            qd.setAnswerText(btextbox.getText().toString());
        return qd;
    }

    private int getSingleChoiceAnswer() {
        if (ratingBar != null)
            return (int) (ratingBar.getRating() - 1);
        if (radioGroup != null) {
            return (radioGroup.getSelectedItemPosition());

        } else if (thisAutoValues != null && simpleListView != null) {
            if (isCheckShown)
                return selectedSimple;
            else
                return -1;
        } else if (simpleListView != null) {

            return (selectedSimple);
        }
        return 0;
    }

    private void saveAnswers(int qtype, int displayType) {
        if (order.getAsArchive()) return;
        questionObject = listObjects.get(nextQIndex);
        boolean isUpdate = false;
        QuestionnaireData qd = null;
        for (int qcount = 0; qcount < questionnaireData.size(); qcount++) {
            qd = questionnaireData.get(qcount);
            if (qd.getDataID().equals(questionObject.getDataID())) {
                try {
                    updateAnswers(qd,
                            Helper.getInt(questionObject.getObjectType()),
                            qtype, displayType, qcount,
                            questionObject.getObjectCode());
                } catch (Exception ex) {

                }
                isUpdate = true;
                break;
            }
        }
        if (!isUpdate) {
            qd = addAnswers(Helper.getInt(questionObject.getObjectType()),
                    qtype, displayType, questionObject.getObjectCode());
        }
        DBHelper.updateThisQuestionnaire(Constants.DB_TABLE_QUESTIONNAIRE,
                new String[]{Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTEXT,
                        Constants.DB_TABLE_QUESTIONNAIRE_QVALUE,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTL,
                        Constants.DB_TABLE_QUESTIONNAIRE_OT,
                        Constants.DB_TABLE_ANSWERS_BRANCHID,
                        Constants.DB_TABLE_ANSWERS_WORKERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_FT,
                        Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                        Constants.DB_TABLE_QUESTIONNAIRE_LoopInfo}, qd,
                pos_shelf_item, set.getSetID());
        DBAdapter.LogCommunication("checkerDBLog.txt",
                "QuestionaireAct-updateThisQuestionnaire=" + set.getSetID());
        saveUploadFilestoDB("");

        uploadList.clear();
        uploadList = DBHelper.getQuestionnaireUploadFiles(
                Constants.UPLOAD_FILE_TABLE, new String[]{
                        Constants.UPLOAD_FILe_MEDIAFILE,
                        Constants.UPLOAD_FILe_DATAID,
                        Constants.UPLOAD_FILe_ORDERID,
                        Constants.UPLOAD_FILe_BRANCH_NAME,
                        Constants.UPLOAD_FILe_CLIENT_NAME,
                        Constants.UPLOAD_FILe_DATE,
                        Constants.UPLOAD_FILe_SET_NAME,
                        Constants.UPLOAD_FILe_SAMPLE_SIZE,}, orderID,
                Constants.DB_TABLE_SUBMITSURVEY_OID, uploadList);
        if (recorder != null) {
            recorder.setUploadList(uploadList);
            recorder.setUploadUriList(uploadFileList);
        }
        if (pos_shelf_item != null) {
            DBHelper.SavePOSData(pos_shelf_item, set.getSetID());
        }
    }

    private void saveAnswers(int qtype, int displayType, Objects quesObjects) {
        questionObject = quesObjects;

        QuestionnaireData qd = null;
        boolean isUpdate = false;
        for (int qcount = 0; qcount < questionnaireData.size(); qcount++) {
            qd = questionnaireData.get(qcount);
            if (qd.getDataID().equals(questionObject.getDataID())) {
                qd = updateAnswers(qd,
                        Helper.getInt(questionObject.getObjectType()), qtype,
                        displayType, qcount, questionObject.getObjectCode());
                isUpdate = true;
                break;
            }
        }
        if (!isUpdate) {
            qd = addAnswers(Helper.getInt(questionObject.getObjectType()),
                    qtype, displayType, questionObject.getObjectCode());
        }

        DBHelper.updateThisQuestionnaire(Constants.DB_TABLE_QUESTIONNAIRE,
                new String[]{Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTEXT,
                        Constants.DB_TABLE_QUESTIONNAIRE_QVALUE,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTL,
                        Constants.DB_TABLE_QUESTIONNAIRE_OT,
                        Constants.DB_TABLE_ANSWERS_BRANCHID,
                        Constants.DB_TABLE_ANSWERS_WORKERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_FT,
                        Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                        Constants.DB_TABLE_QUESTIONNAIRE_LoopInfo}, qd,
                pos_shelf_item, set.getSetID());
        DBAdapter.LogCommunication("checkerDBLog.txt",
                "QuestionaireAct-updateThisQuestionnaire=" + set.getSetID());
        saveUploadFilestoDB("");

        if (pos_shelf_item != null) {
            DBHelper.SavePOSData(pos_shelf_item, set.getSetID());
        }
    }

    private void saveQGroupAnswers() {
        if (order.getAsArchive()) return;
        uqHelper = UIQuestionGroupHelper.getinstance();
        questionnaireData = uqHelper.saveAnswers(QuestionnaireActivity.this,
                questionnaireData, set);
    }

    private QuestionnaireData addAnswers(int qbjecttype, int qtype,
                                         int displayType, String objcode) {
        QuestionnaireData qd = new QuestionnaireData();
        qd.setLoopinfo(questionObject.getLoopInfo());
        qd.setObjectType(questionObject.getObjectType());
        qd.setMiType(questionObject.getMiType());
        qd.setQuestionTypeLink(questionObject.getQuestionTypeLink());
        qd.setDataID(questionObject.getDataID());
        qd.setObjectCode(objcode);
        qd.setOrderID(orderID);
        qd.setQuestionText(questionObject.getQuestion());
        if (freeTextbox != null) {
            setFontSize(freeTextbox);
            qd.setFreetext(freeTextbox.getText().toString());
        }
        if (finishTime != null) {
            setFontSize(finishTime);
            qd.setFinishtime(finishTime.getText().toString());
        }
        if (questionObject.getMiText()) {
            if (textbox != null) {
                setFontSize(textbox);
                qd.setAnswerText(textbox.getText().toString());
                questionObject.setMiText(false);
            } else if (btextbox != null) {
                qd.setAnswerText(btextbox.getText().toString());
                questionObject.setMiText(false);
            }
        }
        if (qbjecttype == 9 || qbjecttype == 10) {
            qd = setBrachOrWorker(qbjecttype, qd);
        } else if (qbjecttype == 4) {
            if (qtype == 4)
                qd = getEditTextData(qd);
            else
                qd = getAnswers(qtype, displayType, qd);
        }
        if (qd != null) {
            if (isRadioNotCheck == true && isCheckShown == false
                    && thisAutoValues != null && thisAutoValues.size() > 0) {
                qd.setFreetext(ConvertTextCodetoText(thisAutoValues.get(0)
                        .getValue_AnswerCode(), true));
                qd.setAnswerText(ConvertTextCodetoText(thisAutoValues.get(0)
                        .getValue_AnswerCode(), true));
            } else if (isRadioNotCheck == false && thisAutoValues != null
                    && thisAutoValues.size() > 0) {
                String text = thisAutoValues.get(0).getValue_AnswerCode();
                for (int i = 1; i < thisAutoValues.size(); i++) {
                    text += "," + thisAutoValues.get(i).getValue_AnswerCode();
                }
                qd.setFreetext(ConvertTextCodetoText(text, true));
                qd.setAnswerText(ConvertTextCodetoText(thisAutoValues.get(0)
                        .getValue_AnswerCode(), true));
            } else if (textbox != null) {
                qd.setFreetext(ConvertTextCodetoText(textbox.getText()
                        .toString(), true));
                qd.setAnswerText(ConvertTextCodetoText(textbox.getText()
                        .toString(), true));
            }
            questionnaireData.add(qd);
        }
        return qd;

    }

    private QuestionnaireData getValidationQuesQuestionnaireData() {
        int qbjecttype = Integer.parseInt(questionObject.getObjectType());
        QuestionnaireData qd = new QuestionnaireData();
        qd.setObjectType(questionObject.getObjectType());
        qd.setQuestionTypeLink(questionObject.getQuestionTypeLink());
        qd.setDataID(questionObject.getDataID());
        qd.setObjectCode(questionObject.getObjectCode());
        qd.setOrderID(orderID);
        qd.setQuestionText(questionObject.getQuestion());

        if (freeTextbox != null)
            qd.setFreetext(freeTextbox.getText().toString());
        if (finishTime != null)
            qd.setFinishtime(finishTime.getText().toString());
        if (questionObject.getMiText()) {
            if (textbox != null) {
                qd.setAnswerText(textbox.getText().toString());
                questionObject.setMiText(false);
            } else if (btextbox != null) {
                qd.setAnswerText(btextbox.getText().toString());
                questionObject.setMiText(false);
            }
        }

        if (qbjecttype == 9 || qbjecttype == 10) {
            qd = setBrachOrWorker(qbjecttype, qd);
        } else if (qbjecttype == 4) {
            int qtype = Integer.parseInt(questionObject.getQuestionTypeLink());
            int displayType = Integer.parseInt(questionObject.getDisplayType());
            if (qtype == 4)
                qd = getEditTextData(qd);
            else
                qd = getAnswers(qtype, displayType, qd);
        }
        return qd;
    }

    private QuestionnaireData setBrachOrWorker(int qbjecttype,
                                               QuestionnaireData qd) {
        int selectedIndex = getSingleChoiceAnswer();
        switch (qbjecttype) {
            case 9:
                if (listWorkers != null && workerListView != null) {
                    if (selectedWorker <= 0) {
                        qd.setWorkerID("-1");
                        qd.setWorkertext("not selected");
                    } else {
                        qd.setWorkertext(listWorkers.get(selectedWorker - 1)
                                .getWorkerName());
                        qd.setWorkerID(listWorkers.get(selectedWorker - 1)
                                .getWorkerID());
                    }
                }
                break;
            case 10:
                if (listBranches != null && branchListView != null) {
                    if (selectedBranch <= 0) {
                        qd.setBranchID("-1");
                        qd.setBrachtext("not selected");
                        selectedBranchID = order.getBranchLink();
                    } else {
                        selectedBranchID = listBranches.get(selectedBranch - 1)
                                .getBranchID();
                        qd.setBranchID(selectedBranchID);
                        qd.setBrachtext(listBranches.get(selectedBranch - 1)
                                .getBranchName());
                    }

                }
                break;
        }
        return qd;
    }

    private QuestionnaireData updateAnswers(QuestionnaireData qd,
                                            int objecttype, int qtype, int displayType, int index,
                                            String objcode) {

        qd.setLoopinfo(questionObject.getLoopInfo());
        qd.setObjectType(questionObject.getObjectType());
        qd.setQuestionTypeLink(questionObject.getQuestionTypeLink());
        qd.setDataID(questionObject.getDataID());
        qd.setOrderID(orderID);
        qd.setObjectCode(objcode);
        qd.setQuestionText(questionObject.getQuestion());

        if (freeTextbox != null)
            qd.setFreetext(freeTextbox.getText().toString());
        if (finishTime != null)
            qd.setFinishtime(finishTime.getText().toString());

        if (questionObject.getMiText()
                || (questionObject.getMiType() != null && (questionObject
                .getMiType().equals("11")
                || questionObject.getMiType().equals("12")
                || questionObject.getMiType().equals("13")
                || questionObject.getMiType().equals("14") || questionObject
                .getMiType().equals("15")))) {
            if (questionObject.getMiText()) {
                if (textbox != null) {
                    setFontSize(textbox);
                    qd.setAnswerText(textbox.getText().toString());
                    questionObject.setMiText(false);
                } else if (btextbox != null) {
                    qd.setAnswerText(btextbox.getText().toString());
                    questionObject.setMiText(false);
                }
            }
        }

        if (objecttype == 9 || objecttype == 10) {
            qd = setBrachOrWorker(objecttype, qd);
        } else if (objecttype == 4) {
            if (qtype == 4)
                qd = getEditTextData(qd);
            else {
                if (listAnswers == null)
                    return null;
                qd.getAnswersList().clear();
                qd = getAnswers(qtype, displayType, qd);
            }
        }
        if (qd != null) {
            if (isRadioNotCheck == true && isCheckShown == false
                    && thisAutoValues != null && thisAutoValues.size() > 0) {
                qd.setFreetext(ConvertTextCodetoText(thisAutoValues.get(0)
                        .getValue_AnswerCode(), true));
                qd.setAnswerText(ConvertTextCodetoText(thisAutoValues.get(0)
                        .getValue_AnswerCode(), true));
            } else if (isRadioNotCheck == false && thisAutoValues != null
                    && thisAutoValues.size() > 0) {
                String text = thisAutoValues.get(0).getValue_AnswerCode();
                for (int i = 1; i < thisAutoValues.size(); i++) {
                    text += "," + thisAutoValues.get(i).getValue_AnswerCode();
                }
                qd.setFreetext(ConvertTextCodetoText(text, true));
                qd.setAnswerText(ConvertTextCodetoText(text, true));
            } else if (textbox != null) {
                qd.setFreetext(ConvertTextCodetoText(textbox.getText()
                        .toString(), true));
                qd.setAnswerText(ConvertTextCodetoText(textbox.getText()
                        .toString(), true));
            }

            questionnaireData.set(index, qd);
        }
        return qd;
    }

    public void ShowNonAnsweredGroupConfirmationAlert(final String where)// (Context
    // context,
    // String
    // title,
    // final
    // String
    // message,
    // String
    // button_lbl)
    {
        try {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setCancelable(false);
            builder.setTitle(getString(R.string.non_answered_conf_alert_title));
            if (where == null)
                builder.setMessage(getString(R.string.non_answered_conf_alert_msg));
            else
                builder.setMessage(where);
            builder.setCancelable(false).setPositiveButton(
                    getString(R.string.non_answered_conf_alert_cancel_btn),
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int id) {
                            nextBtn.setClickable(true);
                            return;
                        }
                    });

            AlertDialog alert = builder.create();
            alert.show();
            sendMessage(QUESTION_VALIDATION,
                    getString(R.string.non_answered_conf_alert_msg));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return;
    }

    public void ShowNonAnsweredConfirmationAlert(final String where)// (Context
    // context,
    // String
    // title,
    // final
    // String
    // message,
    // String
    // button_lbl)
    {
        try {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setCancelable(false);
            builder.setTitle(getString(R.string.non_answered_conf_alert_title));
            builder.setMessage(getString(R.string.non_answered_conf_alert_msg))
                    .setCancelable(false)
                    .setPositiveButton(
                            getString(R.string.non_answered_conf_alert_cancel_btn),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog,
                                                    int id) {
                                    nextBtn.setClickable(true);
                                    return;
                                }
                            })
                    .setNegativeButton(
                            getString(R.string.non_answered_conf_alert_continue_btn),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog,
                                                    int id) {
                                    if (questionObject == null)
                                        return;
                                    if (questionObject.getObjectType().equals(
                                            "9")
                                            || questionObject.getObjectType()
                                            .equals("10")) {
                                        saveAnswers(0, 0);
                                    } else {
                                        if (questionObject
                                                .getQuestionTypeLink() == null
                                                || questionObject
                                                .getDisplayType() == null)
                                            return;
                                        saveAnswers(
                                                Integer.parseInt(questionObject
                                                        .getQuestionTypeLink()),
                                                Integer.parseInt(questionObject
                                                        .getDisplayType()));
                                    }

                                    if (where.equals("ExitAndSave")) {
                                        LongOperation longTask = new LongOperation(
                                                false, "");
                                        longTask.execute();
                                        exitAfterSubmitSurveyOrExitandsave(0);
                                        return;
                                    } else if (where.equals("SumitSurvey")) {
                                        if (set.getEnableValidationQuestion()
                                                .equals("1")) {
                                            ShowValidationQuestion(questionnaireData
                                                    .get(getRandomNo(0,
                                                            questionnaireData
                                                                    .size() - 1))
                                                    .getDataID());
                                        } else {
                                            new SubmitSurveyTask().execute();
                                        }
                                        return;
                                    } else if (where.equals("BackKey")) {
                                        if (order != null && order.getStatusName() != null
                                                && order.getStatusName().contains("rchive")) {
                                            return;
                                        }
                                        LongOperation longTask = new LongOperation(
                                                false, "");
                                        longTask.execute();
                                        exitAfterSubmitSurveyOrExitandsave(0);
                                        Intent intent = new Intent();
                                        intent.putExtra(
                                                Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                                                orderID);
                                        intent.putExtra(
                                                Constants.QUESTIONNAIRE_STAUS,
                                                0);
                                        setResult(RESULT_OK, intent);
                                        return;
                                    } else if (isjump) {
                                        nextQIndex = currentIndex;
                                        nextButtonClicked();
                                        return;
                                    }

                                    if (!nextBtn.isClickable())
                                        nextButtonClicked();
                                        // else if(!previousBtn.isClickable()){
                                        // if(set.getEnableValidationQuestion().equals("1"))
                                        // ShowValidationQuestion(questionnaireData.get(getRandomNo(0,
                                        // questionnaireData.size()-1)).getDataID());
                                        // else
                                        // new SubmitSurveyTask().execute();
                                        // }
                                    else
                                        previousButtonClicked();
                                }
                            });
            AlertDialog alert = builder.create();
            alert.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return;
    }

    public void ShowBranchWorkerConfirmationAlert(final String where)// (Context
    // context,
    // String
    // title,
    // final
    // String
    // message,
    // String
    // button_lbl)
    {
        try {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setCancelable(false);
            builder.setTitle(getString(R.string.non_answered_conf_alert_title));
            builder.setMessage(getString(R.string.non_answered_conf_alert_msg))
                    .setCancelable(false)
                    .setPositiveButton(
                            getString(R.string.non_answered_conf_alert_cancel_btn),
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog,
                                                    int id) {
                                    nextBtn.setClickable(true);
                                    return;
                                }
                            });
            AlertDialog alert = builder.create();
            alert.show();
            sendMessage(QUESTION_VALIDATION,
                    getString(R.string.non_answered_conf_alert_msg));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return;
    }

    public void DeleteJob() {
        SplashScreen.addLog(new BasicLog(
                myPrefs.getString(Constants.SETTINGS_SYSTEM_URL_KEY, ""),
                myPrefs.getString(Constants.POST_FIELD_LOGIN_USERNAME, ""),
                "Job deleted" + orderID, orderID));
        boolean isDeleted = DBHelper.deleteSet(set.getSetID(), orderID);
        if (!isDeleted) {
            Toast.makeText(QuestionnaireActivity.this,
                    "Error deleting set.", Toast.LENGTH_LONG).show();
        }
        if (orderID.contains("-")) {

            if (lastSavedQuotas != null || isCompleted) {
                Surveys.decreaseQuotas(lastSavedQuotas, true, orderID);
                DBHelper.AddSurveys(Surveys.getSets(), false);
            }
            String where = Constants.DB_TABLE_QUESTIONNAIRE_ORDERID + "="
                    + "\"" + orderID + "\"";
            DBHelper.updateSurveySelectedBranch("", orderID);
            DBAdapter.openDataBase();
            DBAdapter
                    .LogCommunication(
                            "checkerDBLog.txt",
                            "QuestionaireAct-deleteThisQuestionnaire="
                                    + set.getSetID());
            DBAdapter.db.delete(Constants.DB_TABLE_QUESTIONNAIRE, where, null);
            DBAdapter.openDataBase();
            DBAdapter.db.delete(Constants.DB_TABLE_ANSWERS, where, null);
            DBAdapter.openDataBase();
            DBAdapter.db.delete(Constants.UPLOAD_FILE_TABLE, where, null);
            DBAdapter.openDataBase();
            DBAdapter.db.delete(Constants.DB_TABLE_POS, where, null);
            DBAdapter.openDataBase();

            DBAdapter.db.delete(Constants.DB_TABLE_SUBMITQUOTA, where, null);
            DBAdapter.openDataBase();
            DBAdapter.db.delete(Constants.DB_TABLE_SUBMITSURVEY, where, null);
            // /////////////////////////////////////////////////////////////////
            // where = Constants.DB_TABLE_ORDERS_ORDERID + "=" +
            // "\""
            // + orderID + "\"";
            // DBAdapter.openDataBase();
            // DBAdapter.db.delete(Constants.DB_TABLE_ORDERS, where,
            // null);
            // //
            // ///////////////////////////////////////////////////////////////////
            // where = Constants.DB_TABLE_JOBLIST_ORDERID + "=" +
            // "\""
            // + orderID + "\"";
            // DBAdapter.openDataBase();
            // DBAdapter.db.delete(Constants.DB_TABLE_JOBLIST,
            // where,
            // null);

            DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                            Constants.DB_TABLE_ORDERS_ORDERID,
                            Constants.DB_TABLE_ORDERS_STATUS,
                            Constants.DB_TABLE_ORDERS_START_TIME,}, orderID, "survey",
                    "", null);

            exitAfterSubmitSurveyOrExitandsave(42);
        } else {

            On_ExitanddeleteButton_Click();
        }
    }

    public void showSaveAndDeleteAlert(Context context) {
        DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {

            // @Override
            @Override
            public void onClick(DialogInterface dialog, int which) {
                switch (which) {
                    case DialogInterface.BUTTON_POSITIVE:
                        if (recorder.recording) {
                            recorder.stopRecording();
                        }
                        DeleteJob();

                        break;

                    case DialogInterface.BUTTON_NEGATIVE:
                        // No button clicked
                        break;
                }
            }
        };

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getString(R.string._alert_title));
        TextView textView = new TextView(context);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper
                .makeHtmlString(getString(R.string.questionnaire_exit_delete_alert)));
        builder.setView(textView);
        builder.setPositiveButton(
                getString(R.string.questionnaire_exit_delete_alert_yes),
                dialogClickListener)
                .setNegativeButton(
                        getString(R.string.questionnaire_exit_delete_alert_no),
                        dialogClickListener).show();

    }

    public void ShowQuotaAlert(Context context, String title,
                               final String message, String button_lbl, String actionToTake) {
        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        alert.setCancelable(false);

        alert.setTitle("");
        TextView textView = new TextView(context);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));

        // Spanned sp = Html.fromHtml(message);
        textView.setText(Helper.makeHtmlString(message));
        alert.setView(textView);
        if (actionToTake.equals("1")) {
            alert.setPositiveButton(button_lbl,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            dialog.dismiss();
                            DeleteJob();
                        }
                    });

        }
        // else if (actionToTake.equals("2")) {
        // alert.setPositiveButton(button_lbl,
        // new DialogInterface.OnClickListener() {
        // @Override
        // public void onClick(DialogInterface dialog, int which) {
        //
        // dialog.dismiss();
        // // previousBtn.setClickable(false);
        // //
        // // getEndLocations();
        // //
        // // saveSelectedDatatoDB("submit");
        // // saveUploadFilestoDB();
        // // Intent data = new Intent();
        // // if (orderID.contains("-")) {
        // //
        // // data.putExtra("isSurvey", true);
        // // }
        // // data.putExtra(
        // // Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
        // // orderID);
        // //
        // // data.putExtra(Constants.QUESTIONNAIRE_STAUS, 1);
        // // CheckerApp.setQuestionResult( data);
        // // finish();
        // if (nonEmptyCount <= 0) {
        // PrepareQuestionnaireNameValuePair(false);
        // }
        // String where = Constants.DB_TABLE_QUESTIONNAIRE_ORDERID
        // + "=" + "\"" + orderID + "\"";
        // DBAdapter.openDataBase();
        // DBAdapter.db.delete(
        // Constants.DB_TABLE_QUESTIONNAIRE, where,
        // null);
        // DBAdapter.openDataBase();
        // DBAdapter.db.delete(Constants.DB_TABLE_ANSWERS,
        // where, null);
        // DBAdapter.openDataBase();
        // DBAdapter.db.delete(Constants.UPLOAD_FILE_TABLE,
        // where, null);
        // DBAdapter.openDataBase();
        // DBAdapter.db.delete(Constants.DB_TABLE_POS, where,
        // null);
        // // /////////////////////////////////////////////////////////////////
        // // where = Constants.DB_TABLE_ORDERS_ORDERID + "="
        // // + "\"" + orderID + "\"";
        // // DBAdapter.openDataBase();
        // // DBAdapter.db.delete(Constants.DB_TABLE_ORDERS,
        // // where, null);
        // // //
        // //
        // ///////////////////////////////////////////////////////////////////
        // // where = Constants.DB_TABLE_JOBLIST_ORDERID + "="
        // // + "\"" + orderID + "\"";
        // // DBAdapter.openDataBase();
        // // DBAdapter.db.delete(Constants.DB_TABLE_JOBLIST,
        // // where, null);
        // DBHelper.updateOrders(
        // Constants.DB_TABLE_ORDERS,
        // new String[] {
        // Constants.DB_TABLE_ORDERS_ORDERID,
        // Constants.DB_TABLE_ORDERS_STATUS, },
        // orderID, "survey");
        //
        // exitAfterSubmitSurveyOrExitandsave(42);
        // }
        // });
        // }
        else {
            alert.setPositiveButton(button_lbl,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                            dialog.dismiss();
                            previousBtn.setClickable(false);

                            getEndLocations();

                            LongOperation longTask = new LongOperation(true,
                                    "submit");
                            longTask.execute();
                            Intent data = new Intent();
                            if (orderID.contains("-")) {

                                data.putExtra("isSurvey", true);
                            }
                            data.putExtra(
                                    Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                                    orderID);

                            String did = QuestionnaireActivity.this.backPointer;
                            if (!orderID.contains("-"))
                                data.putExtra(Constants.QUESTIONNAIRE_STAUS, 1);
                            else {
                                if (branchEditText != null
                                        && branchEditText.getText() != null)
                                    data.putExtra(Constants.BRANCH_NAME,
                                            branchEditText.getText().toString());
                                if (questionObject != null) did = questionObject.getDataID();
                                DBHelper.updateOrders(
                                        Constants.DB_TABLE_ORDERS,
                                        new String[]{
                                                Constants.DB_TABLE_ORDERS_ORDERID,
                                                Constants.DB_TABLE_ORDERS_STATUS,
                                                Constants.DB_TABLE_ORDERS_START_TIME,},
                                        orderID, "Completed", startTime, did);
                                data.putExtra(Constants.QUESTIONNAIRE_STAUS,
                                        142);
                            }
                            data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME,
                                    startTime);
                            if (showSubmitMenu == true && previousPageDataId != null)
                                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
                            else
                                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID,
                                        did);
                            CheckerApp.setQuestionResult(data);
                            //
                            // if
                            // (set.getEnableValidationQuestion().equals("1")) {
                            // ShowValidationQuestion(questionnaireData
                            // .get(getRandomNo(0,
                            // questionnaireData.size() - 1))
                            // .getDataID());
                            // } else if (IsAttachedFiles() && set != null) {
                            // ShowAttachedFiles();
                            // } else {
                            // getEndLocations();
                            // new SubmitSurveyTask().execute();
                            // }
                            // finish();
                        }
                    });

        }
        alert.show();
    }

    AlertDialog currentAlert = null;

    public void ShowAlert(Context context, String title, final String message,
                          String button_lbl) {
        if (currentAlert != null && currentAlert.isShowing()) currentAlert.dismiss();
        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        alert.setCancelable(false);
        alert.setTitle(title);
        TextView textView = new TextView(context);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper.makeHtmlString(message));

        WatchObject watchObject = new WatchObject();
        watchObject.setValidationString(message);
        sendMessage(QUESTION_VALIDATION, watchObject);

        alert.setView(textView);
        alert.setPositiveButton(button_lbl,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        if (message
                                .equals(getString(R.string.questionnaire_submit_survey_alert))
                                || message
                                .equals(getString(R.string.already_submit_review_alert))
                                || message
                                .equals(getString(R.string.submit_review_fail_alert))) {
                            exitAfterSubmitSurveyOrExitandsave(1);
                        }
                        dialog.dismiss();
                        nextBtn.setClickable(true);
                    }
                });

        currentAlert = alert.show();
    }

    Boolean isJumpFromSingleChoiceAnswers = false;
    int isHideAdditionalInfoSingleChoiceAnswers = 0;
    int isMandatorySingleChoiceAnswers = 0;
    String nextPageJumpID = "";
    private int oldpageCount = -1;
    private int oldviewOnPage = -1;
    private int oldQIndex = -1;
    private String lastbutton = "next";

    private int sumOfAllPreviouPAges(int[] questionPageArray, int pageCount) {
        int sum = 0;
        for (int i = 0; i < pageCount; i++) {
            sum += questionPageArray[i];
        }
        return sum;
    }

    private void checkQuotas() {
        if (questionObject != null && questionObject.getDataID() != null) {
            ArrayList<Quota> qq = getValidateQuota(questionObject.getDataID(),
                    thisSurveyQuotas);
            if (qq != null) {
                for (int i = 0; i < qq.size(); i++) {
                    // Surveys.decreaseQuotas(qq);
                    thisSurveyQuotas.remove(qq.get(i));
                }
            }

            ArrayList<Quota> q = getQuota(questionObject.getDataID());
            if (q != null && q.size() > 0) {
                if (thisSurveyQuotas == null)
                    thisSurveyQuotas = new ArrayList<Quota>();

                thisSurveyQuotas.addAll(q);
                int jjjj = 0;
                jjjj++;
            }
            String message = Helper.limitExceededMessage(q, set.currentSurveys,
                    null, QuestionnaireActivity.this);
            String actionToTake = Helper.limitExceeded(q, set.currentSurveys,
                    message, QuestionnaireActivity.this);
            if (actionToTake != null) {
                ShowQuotaAlert(QuestionnaireActivity.this,
                        getString(R.string.error_alert_title),
                        Helper.limitExceededMessage(q, set.currentSurveys,
                                null, QuestionnaireActivity.this),
                        getString(R.string.alert_btn_lbl_ok), actionToTake);

            }

        }

    }

    private void nextButtonClicked() {

        String did = null;
        if (questionObject != null) did = questionObject.getDataID();
        if (did != null)
            DBHelper.updateOrderLastid(orderID, did);

        isHideAdditionalInfoSingleChoiceAnswers = 0;
        isMandatorySingleChoiceAnswers = 0;
        selectedAnswerForMiView = null;

        this.lastbutton = "next";
        oldpageCount = pageCount;
        oldviewOnPage = viewOnPage;
        oldQIndex = nextQIndex;

        checkQuotas();
        if (posLayout != null && posLayout.getVisibility() == View.VISIBLE) {
            posLayout.setVisibility(View.GONE);
            subLayout.setVisibility(View.VISIBLE);
        }
        if (set != null
                && (set.getShowBackButton() == null || set.getShowBackButton()
                .equals("1"))) {

            previousImg.setVisibility(View.VISIBLE);
            previousBtn.setVisibility(View.VISIBLE);
        }

        if (isBackJump == true) {
            isBackJump = false;
            if (questionObject != null && questionObject.pageCount >= 0) {
                pageCount = questionObject.pageCount;
                viewOnPage = questionObject.viewOnPage;
                nextQIndex = questionObject.nextQIndex;
            }
            DataIDBackJump = "";
        }
        questionObject.pageCount = pageCount;
        questionObject.viewOnPage = viewOnPage;
        questionObject.nextQIndex = nextQIndex;
        // if (questionPageArray.length > pageCount)
        // questionPageArray[pageCount] = viewOnPage;
        // else.
        // questionPageArray[questionPageArray.length - 1] = viewOnPage;
        DataIDBackJump = questionObject.getDataID();
        // questionPageArray.set(pageCount, viewOnPage);
        // questionPageArray.add(viewOnPage);
        if (isJumpFromSingleChoiceAnswers) {
            Objects questionObject = null;
            for (int i = 0; i < listObjects.size(); i++) {
                questionObject = listObjects.get(i);
                if (questionObject.getDataID() != null
                        && questionObject.getDataID().equals(nextPageJumpID)) {
                    if (pageCount < 0)
                        pageCount = 0;
                    int sum = sumOfAllPreviouPAges(questionPageArray, pageCount);
                    questionPageArray[pageCount] = i - sum;
                    pageCount++;
                    releaseViews();
                    questionNumber++;
                    PrepareLayout(i, true, false);
                    nextBtn.setClickable(true);
                    isJumpFromSingleChoiceAnswers = false;
                    nextPageJumpID = "";
                    return;
                }
            }
            isJumpFromSingleChoiceAnswers = false;
            nextPageJumpID = "";
        }
        if (nextQIndex + 1 == listObjects.size()) {
            View dullView = findViewById(R.id.view_transparent);
            if (dullView != null)
                dullView.setVisibility(RelativeLayout.VISIBLE);
            showSubmitMenu = true;
            String txt = getResources().getString(
                    R.string.questionnaire_menu_btn);
            updateProgressOnScreen(1);

            nextBtn.setText(txt);
            return;

        }
        pageCount++;
        releaseViews();
        questionNumber++;
        if (isjump) {

            isjump = false;

        }
        if (!isRestoring) {

            PrepareLayout(nextQIndex + 1, true, false);
        }

        nextBtn.setClickable(true);
    }

    private void previousButtonClicked() {
        // SAVING start here
        selectedAnswerForMiView = null;
        if (uqHelper != null) {
            saveQGroupAnswers();
        }
        if (questionObject.getObjectType().equals("9")
                || questionObject.getObjectType().equals("10")) {
            saveAnswers(0, 0);
        } else if (questionObject.getObjectType().equals("15")) {
            saveAnswers(0, 15);
        } else if (questionObject.getObjectType().equals("12")) {
            saveAnswers(0, 12);
        } else {
            if (questionObject.getQuestionTypeLink() == null
                    || questionObject.getDisplayType() == null) {
            } else
                saveAnswers(
                        Integer.parseInt(questionObject.getQuestionTypeLink()),
                        Integer.parseInt(questionObject.getDisplayType()));
        }
        // SAVING ends here

        this.lastbutton = "previous";
        int saviorOfMyLife = -1;
        if (objectCount >= size - 1) {
            saviorOfMyLife = oldQIndex;
        }
        oldpageCount = pageCount;
        oldviewOnPage = viewOnPage;
        oldQIndex = nextQIndex;

        if (posLayout != null && posLayout.getVisibility() == View.VISIBLE) {
            posLayout.setVisibility(View.GONE);
            subLayout.setVisibility(View.VISIBLE);
        }
        isBackJump = false;
        if (questionObject != null && questionObject.backJumpDataID != null
                && !questionObject.backJumpDataID.equals("")) {
            DataIDBackJump = questionObject.backJumpDataID;

            questionObject.backJumpDataID = "";
            DataID = DataIDBackJump;
            DataIDBackJump = "";
            isBackJumpThenBack = true;
            if (questionObject.pageCount >= 0) {
                pageCount = questionObject.pageCount;
                viewOnPage = questionObject.viewOnPage;
                nextQIndex = questionObject.nextQIndex;
            }
            PrepareLayout(nextQIndex, true, false);
            return;
        }

        DataIDBackJump = "";
        pageCount--;
        nextImg.setVisibility(View.VISIBLE);
        nextBtn.setVisibility(View.VISIBLE);
        releaseViews();
        questionNumber--;
        isBackJump = false;
        DataIDBackJump = "";
        if (questionObject != null && questionObject.getBackPointer() != null) {
            DataID = questionObject.getBackPointer();
        }
        PrepareLayout(0, true, false);
    }

    private void previousButtonBackJumpClicked() {
        this.lastbutton = "previous";
        questionNumber--;

        nextQIndex = nextQIndex - 1;
        if (nextQIndex < 1 && pageCount == 0)
            PrepareLayout(0, true, false);
        else
            PrepareLayout(nextQIndex + 1, true, false);
        // if(isNextObj)
        // questionnaireLayout.removeAllViews();
    }

    private void releaseViews() {
        nonEmptyCount = 0;
        ReleaseMemory();
        if (iv != null) {
            Drawable drawable = iv.getDrawable();

            if (drawable != null && drawable instanceof BitmapDrawable) {
                BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
                Bitmap bitmap = bitmapDrawable.getBitmap();
                if (bitmap != null && !bitmap.isRecycled())
                    bitmap.recycle();

            }

            iv = null;
        }
        radioGroup = null;
        // rangeBar = null;
        textbox = null;
        btextbox = null;
        selectedSimple = -1;
        simpleListView = null;
        simpleEditText = null;
        checkboxgrp = null;
        listAnswers = null;
        if (miView != null && questionnaireLayout != null) {
            questionnaireLayout.removeView(miView);
        }
    }

    // ****start*****//
    public void setValueForPriview() {
        Helper.setQuestionnaireData(questionnaireData);
        Intent intent = new Intent(this.getApplicationContext(),
                QuestionnaireActivity.class);
        intent.putExtra(Constants.POST_FIELD_QUES_ORDER_ID, orderID);
        intent.putExtra(Constants.FIELD_ORDER_SET_ID, setIdForPreview);
        startActivityForResult(intent, QUESTIONNAIRE_ACTIVITY_CODE);

    }

    private void hideKeyBoard() {
        try {
            if (txtCurrent != null) {
                txtCurrent.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                        keyboard.hideSoftInputFromWindow(
                                txtCurrent.getWindowToken(), 0);
                    }
                }, 50);
            }
        } catch (Exception ex) {

        }
        try {

            txtAddPrice.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    keyboard.hideSoftInputFromWindow(
                            txtAddPrice.getWindowToken(), 0);
                }
            }, 50);
        } catch (Exception ex) {

        }
        try {
            txtAddQuantity.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    keyboard.hideSoftInputFromWindow(
                            txtAddPrice.getWindowToken(), 0);
                }
            }, 50);
        } catch (Exception ex) {

        }
        try {
            txtAddNote.postDelayed(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    keyboard.hideSoftInputFromWindow(
                            txtAddPrice.getWindowToken(), 0);
                }
            }, 50);

        } catch (Exception ex) {

        }
        // if (isKeyboardOn)
        {
            try {
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),
                        0);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    View.OnFocusChangeListener onKeyBoardOn = new OnFocusChangeListener() {

        @Override
        public void onFocusChange(View v, boolean hasFocus) {

            isKeyboardOn = true;
        }
    };
    public Dialog pd;

    // ****end****//
    private boolean CheckResponse(String result) {
        if (!Helper.IsValidResponse(result,
                Constants.JOB_DETAIL_RESP_FIELD_PARAM)) {
            ShowAlert(QuestionnaireActivity.this,
                    getString(R.string.error_alert_title),
                    getString(R.string.submit_review_fail_alert),
                    getString(R.string.alert_btn_lbl_ok));
            return false;
        }
        result = result.substring(
                result.indexOf(Constants.JOB_DETAIL_RESP_FIELD_PARAM),
                result.indexOf("</status>"));

        if (result.endsWith("3")) {
            ShowAlert(QuestionnaireActivity.this,
                    getString(R.string.error_alert_title),
                    getString(R.string.already_submit_review_alert),
                    getString(R.string.alert_btn_lbl_ok));
            return false;
        } else if (!(result.endsWith("0"))) {
            ShowAlert(QuestionnaireActivity.this,
                    getString(R.string.error_alert_title),
                    getString(R.string.submit_review_fail_alert),
                    getString(R.string.alert_btn_lbl_ok));
            return false;
        }
        return true;
    }

    private boolean CheckSurveyResponse(String result) {
        if (!Helper.IsValidResponse(result,
                Constants.JOB_DETAIL_RESP_FIELD_PARAM)) {
            return false;
        }
        result = result.substring(
                result.indexOf(Constants.JOB_DETAIL_RESP_FIELD_PARAM),
                result.indexOf("</status>"));
        if (!(result.endsWith("0"))) {
            return false;
        }

        return true;
    }

    public void saveUploadFilestoDB(String input) {

        Date dt = new Date();
        long mili = dt.getTime();
        if (millis == null || millis.length() <= 0)
            millis = mili + "";

        String setName = "-";
        if (set != null && set.getSetName() != null
                && set.getSetName().length() > 0)
            setName = set.getSetName();

        if (order != null && order.getSetName() != null
                && order.getSetName().length() > 0)
            setName = order.getSetName();
        if (input != null) {
            DBHelper.uploadFilesInDB(Constants.UPLOAD_FILE_TABLE, new String[]{
                            Constants.DB_TABLE_SUBMITSURVEY_OID,
                            Constants.UPLOAD_FILe_MEDIAFILE,
                            Constants.UPLOAD_FILe_DATAID,
                            Constants.UPLOAD_FILe_ORDERID,
                            Constants.UPLOAD_FILe_BRANCH_NAME,
                            Constants.UPLOAD_FILe_CLIENT_NAME,
                            Constants.UPLOAD_FILe_DATE, Constants.UPLOAD_FILe_SET_NAME,
                            Constants.UPLOAD_FILe_SAMPLE_SIZE,
                            Constants.UPLOAD_FILe_PRODUCTID,
                            Constants.UPLOAD_FILe_LOCATIONID,}, orderID,
                    uploadFileList, uploadList, input, millis, setName);
        }
        DBHelper.uploadFiles(Constants.UPLOAD_FILE_TABLE, new String[]{
                        Constants.DB_TABLE_SUBMITSURVEY_OID,
                        Constants.UPLOAD_FILe_MEDIAFILE, Constants.UPLOAD_FILe_DATAID,
                        Constants.UPLOAD_FILe_ORDERID,
                        Constants.UPLOAD_FILe_BRANCH_NAME,
                        Constants.UPLOAD_FILe_CLIENT_NAME, Constants.UPLOAD_FILe_DATE,
                        Constants.UPLOAD_FILe_SET_NAME,
                        Constants.UPLOAD_FILe_SAMPLE_SIZE,
                        Constants.UPLOAD_FILe_PRODUCTID,
                        Constants.UPLOAD_FILe_LOCATIONID,}, orderID, uploadFileList,
                uploadList, input, millis, setName);
    }

    private void saveValidationQuestiontoDB() {
        QuestionnaireData qd = getValidationQuesQuestionnaireData();
        String freetext = "", finishTimeText = "";
        if (freeTextbox != null && !freeTextbox.getText().toString().equals(""))
            freetext = freeTextbox.getText().toString();
        if (finishTime != null && !finishTime.getText().toString().equals(""))
            finishTimeText = finishTime.getText().toString();
        DBHelper.insertValidateQuestionnaire(
                Constants.VALITION_QUESTION_DATA_TABLE, new String[]{
                        Constants.DB_TABLE_SUBMITSURVEY_OID,
                        Constants.DB_TABLE_SUBMITSURVEY_FT,
                        Constants.DB_TABLE_SUBMITSURVEY_SLT,
                        Constants.DB_TABLE_SUBMITSURVEY_SLNG,
                        Constants.DB_TABLE_SUBMITSURVEY_ELT,
                        Constants.DB_TABLE_SUBMITSURVEY_ELNG,
                        Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                        Constants.QUES_RESP_FIELD_VALIDATION_DATAID}, orderID,
                freetext, Helper.critStartLat, Helper.critStartLong,
                Helper.critEndLat, Helper.critEndLong, finishTimeText,
                qd.getDataID(), String.valueOf(nonEmptyCount));

        DBHelper.updateValidationQuestionnaire(
                Constants.VALITION_QUESTION_TABLE, new String[]{
                        Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTEXT,
                        Constants.DB_TABLE_ANSWERS_BRANCHID,
                        Constants.DB_TABLE_ANSWERS_WORKERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_ORDERID}, qd,
                pos_shelf_item, set.getSetID());
    }

    public void TopToBottomSwipe() {
        int diff = (questionnaireLayout.getBottom() - (subLayout.getHeight() + subLayout.getScrollY()));
        if (diff > 0 && diff < 10)
            Toast.makeText(QuestionnaireActivity.this
                    , "bottomToTop", Toast.LENGTH_SHORT).show();

    }

    public void BottomToTopSwipe() {

        int diff = subLayout.getScrollY();
        if (diff > 0 && diff < 10)
            Toast.makeText(QuestionnaireActivity.this
                    , "toptobottom", Toast.LENGTH_SHORT).show();

    }

    private class LongOperation extends AsyncTask<String, Void, String> {
        boolean boolvar;
        String stringvar;

        public LongOperation(boolean boolvar, String stringvar) {
            this.boolvar = boolvar;
            this.stringvar = stringvar;
        }

        @Override
        protected String doInBackground(String... params) {
            saveSelectedDatatoDB(stringvar, boolvar);
            saveUploadFilestoDB(stringvar);
            return "Executed";
        }

        @Override
        protected void onPostExecute(String result) {
            finish();
            Revamped_Loading_Dialog.hide_dialog();
            sendMessage(QUESTION_FINISHED, "");
        }

        @Override
        protected void onPreExecute() {
            Revamped_Loading_Dialog.show_dialog(QuestionnaireActivity.this,
                    getResources().getString(R.string.alert_working));
        }

        @Override
        protected void onProgressUpdate(Void... values) {
        }
    }

    public void ReleaseMemory() {
        try {
            if (questionnaireLayout != null) {
                clearAllViews(questionnaireLayout);

            }

        } catch (Exception ex) {
        }
        if (questionnaireLayout != null) {
            questionnaireLayout.removeAllViews();
        }
    }

    public class SubmitSurveyTask extends AsyncTask<Void, Integer, String> {
        @Override
        protected void onPreExecute() {
            Revamped_Loading_Dialog.show_dialog(QuestionnaireActivity.this,
                    getString(R.string.Questionaire_submitting));
        }

        @Override
        protected void onPostExecute(String result) {
            Revamped_Loading_Dialog.hide_dialog();
            if (result == null || result.equals("SessionExpire"))
                return;
            if (CheckResponse(result)) {
                ShowAlert(QuestionnaireActivity.this,
                        getString(R.string.questionnaire_alert_title),
                        getString(R.string.questionnaire_submit_survey_alert),
                        getString(R.string.questionnaire_btn_text));
                String where = Constants.DB_TABLE_JOBLIST_ORDERID + "=" + "\""
                        + orderID + "\"";
                DBHelper.deleteJoblistRecords(where);
                DBHelper.deleteRecordbyOrdeid(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID
                        + "=" + "\"" + orderID + "\"");

            } else {

                LongOperation longTask = new LongOperation(false, "");
                longTask.execute();
            }
        }

        @Override
        protected String doInBackground(Void... params) {
            if (!IsInternetConnectted()) {
                PrepareQuestionnaireNameValuePair(false);
                return "";
            }
            if (Connector.cookies == null) {
                if (showLogin(doLogin()))
                    return "SessionExpire";
            }
            String result = SubmitSurvey();
            if (result.contains("<script>")) {
                doLogin();
                result = SubmitSurvey();
            }
            // if(set != null && set.getEnableValidationQuestion().equals("1"))
            // {
            // if(CheckSurveyResponse(result))
            // SubmitValidationQuestionSurvey();
            // }

            String s = set.getAllowCritFileUpload();
            if (set != null) {
                uploadFiles();
            }

            return result;
        }

        public String doLogin() {
            SharedPreferences myPrefs = getSharedPreferences("pref",
                    MODE_PRIVATE);
            return loginPost(
                    myPrefs.getString(Constants.POST_FIELD_LOGIN_USERNAME, ""),
                    myPrefs.getString(Constants.POST_FIELD_LOGIN_PASSWORD, ""),
                    Constants.POST_VALUE_LOGIN_DO_LOGIN);
        }

        private String loginPost(final String username, final String password,
                                 String dologin) {
            // Initialize the login data to POST
            List<NameValuePair> extraDataList = new ArrayList<NameValuePair>();
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_LOGIN_USERNAME, username));
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_LOGIN_PASSWORD, password));
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_LOGIN_DO_LOGIN, dologin));
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_LOGIN_NO_REDIR,
                    Constants.POST_VALUE_LOGIN_NO_REDIR));
            extraDataList.add(Helper.getNameValuePair(
                    Constants.POST_FIELD_LOGIN_IS_APP,
                    Constants.POST_VALUE_LOGIN_IS_APP));
            return Connector.postForm(Constants.getLoginURL(), extraDataList);
        }

        private void uploadFiles() {
            // for (int i = 0; i < uploadFileList.size(); i++) {
            // if (uploadList.size() > i) {
            // Connector.saveFiletoServer(
            // getRealPathFromURI(uploadFileList.get(i)),
            // Constants.getAttachmentURL(), orderID, uploadList
            // .get(i).getDataID(), "", "");
            // } else {
            // Connector.saveFiletoServer(
            // getRealPathFromURI(uploadFileList.get(i)),
            // Constants.getAttachmentURL(), orderID, "", "", "");
            // }
            // }
        }

        private String SubmitSurvey() {
            return Connector.postForm(Constants.getSubmitSurveyURL(),
                    PrepareQuestionnaireNameValuePair(false));
        }

        // private String SubmitValidationQuestionSurvey()
        // {
        // return Connector.postForm(Constants.getSubmitSurveyURL(),
        // PrepareValidationQuestionnaireNameValuePair());
        // }

        // private List<NameValuePair>
        // PrepareValidationQuestionnaireNameValuePair()
        // {
        // String freetext = "", finishTimeText = sdf.format(new
        // Date().getTime());;
        // if(freeTextbox != null &&
        // !freeTextbox.getText().toString().equals(""))
        // freetext = freeTextbox.getText().toString();
        // if(finishTime != null && !finishTime.getText().toString().equals(""))
        // finishTimeText = finishTime.getText().toString();
        // else{
        // Calendar date = Calendar.getInstance();
        // finishTimeText = sdf.format(date.getTime());
        // }
        //
        // List<NameValuePair> extraDataList = new ArrayList<NameValuePair>();
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_FIELD_QUES_ORDER_ID,
        // orderID));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_FIELD_QUES_CRITFREETEXT,
        // freetext));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_FIELD_QUES_CRITSTARTLAT,
        // critStartLat));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_FIELD_QUES_CRITSTARTLONG,
        // critStartLong));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_FIELD_QUES_CRITENDLAT,
        // critEndLat));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_VALUE_QUES_CRITENDLONG,
        // critEndLong));
        // extraDataList.add(Helper.getNameValuePair(Constants.POST_VALUE_QUES_REPORTED_FINISH_TIME,
        // finishTimeText));
        // QuestionnaireData qd = getValidationQuesQuestionnaireData();
        // extraDataList.add(Helper.getNameValuePair(Constants.QUES_RESP_FIELD_VALIDATION_DATAID,
        // qd.getDataID()));
        // //
        // extraDataList.add(Helper.getNameValuePair(Constants.QUES_RESP_FIELD_VALIDATION_ANSWERID,
        // qd.getDataID()));
        //
        // if(qd.getObjectType().equals("9") || qd.getObjectType().equals("10"))
        // {
        // if(qd.getObjectType().equals("10"))
        // extraDataList = getBranchSelection1(extraDataList, qd);
        // else
        // extraDataList = getWorkerSelection1(extraDataList, qd);
        // }else
        // {
        // if(qd.getQuestionTypeLink().equals("7") ||
        // qd.getQuestionTypeLink().equals("3"))
        // extraDataList = getSingleChoiceText1(extraDataList, qd);
        // else if(qd.getQuestionTypeLink().equals("8") ||
        // qd.getQuestionTypeLink().equals("9"))
        // extraDataList = getMultiChoiceText1(extraDataList, qd);
        // else if(qd.getQuestionTypeLink().equals("4"))
        // extraDataList = getTextBoxAnswer1(extraDataList, qd);
        // }
        // return extraDataList;
        // }

        // private List<NameValuePair> getSingleChoiceText1(List<NameValuePair>
        // extraDataList, QuestionnaireData qd)
        // {
        // if(qd.getAnswersList().size() > 0)
        // {
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID",
        // qd.getAnswersList().get(0).getAnswerID()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-answerText1",
        // qd.getAnswersList().get(0).getAnswer()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-mi",
        // qd.getAnswerText()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-questionText",
        // qd.getQuestionText()));
        // }else if(qd.getAnswerText() !=null && !qd.getAnswerText().equals(""))
        // {
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID", ""));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID(), ""));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-answerText1",
        // ""));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-mi",
        // qd.getAnswerText()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-questionText",
        // qd.getQuestionText()));
        // }
        // return extraDataList;
        // }
        //
        //
        // private List<NameValuePair> getMultiChoiceText1(List<NameValuePair>
        // extraDataList, QuestionnaireData qd)
        // {
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-questionText",
        // qd.getQuestionText().trim()));
        // for(int i=0; i<qd.getAnswersList().size(); i++)
        // {
        // Answers answer = qd.getAnswersList().get(i);
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID[]",
        // answer.getAnswerID()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"[]",
        // answer.getAnswerID()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-answerText"+(i+1),
        // answer.getAnswer()));
        // }
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-mi",
        // qd.getAnswerText()));
        // return extraDataList;
        // }
        //
        // private List<NameValuePair> getTextBoxAnswer1(List<NameValuePair>
        // extraDataList, QuestionnaireData qd)
        // {
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID", ""));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-answerText1",
        // ""));
        // if(qd.getAnswerText() != null)
        // qd.setAnswerText(qd.getAnswerText().trim());
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-mi",
        // qd.getAnswerText()));
        // extraDataList.add(Helper.getNameValuePair("obj"+qd.getDataID()+"-questionText",
        // qd.getQuestionText().trim()));
        // return extraDataList;
        // }
        //
        // private List<NameValuePair> getBranchSelection1(List<NameValuePair>
        // extraDataList, QuestionnaireData qd)
        // {
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID",
        // qd.getBranchID()));
        // extraDataList.add(Helper.getNameValuePair("BranchID",
        // qd.getBranchID()));
        // return extraDataList;
        // }
        //
        // private List<NameValuePair> getWorkerSelection1(List<NameValuePair>
        // extraDataList, QuestionnaireData qd)
        // {
        // extraDataList.add(Helper.getNameValuePair("ValidationAnswerID",
        // qd.getWorkerID()));
        // extraDataList.add(Helper.getNameValuePair("WorkerID",
        // qd.getWorkerID()));
        // return extraDataList;
        // }

    }

    private int nonEmptyCount;
    private int currentLoopCount;
    private SubmitQuestionnaireData submitData;
    private boolean isDisplayCondition = false;
    private String isShowPreviousButtonDueToLastItem;

    private boolean showLogin(String result) {
        String result1 = new Parser().getValue(result,
                Constants.LOGIN_RESP_FIELD_PARAM);
        if (result1.equals("0")) {
            SharedPreferences myPrefs = getSharedPreferences("pref",
                    MODE_PRIVATE);
            SharedPreferences.Editor prefsEditor = myPrefs.edit();
            prefsEditor.putBoolean(Constants.ALREADY_LOGIN_STATUS, false);
            prefsEditor.commit();
            Intent intent = new Intent(this.getApplicationContext(),
                    LoginActivity.class);
            startActivity(intent);
            Intent data = new Intent();
            if (orderID.contains("-")) {

                data.putExtra("isSurvey", true);
            }
            data.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);

            String did = this.backPointer;
            if (!orderID.contains("-")) {
                data.putExtra(Constants.QUESTIONNAIRE_STAUS, 1);
            } else {
                if (did == null && questionObject != null) did = questionObject.getDataID();
                DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                                Constants.DB_TABLE_ORDERS_ORDERID,
                                Constants.DB_TABLE_ORDERS_STATUS,
                                Constants.DB_TABLE_ORDERS_START_TIME,}, orderID,
                        "Completed", startTime, did);

                if (branchEditText != null && branchEditText.getText() != null)
                    data.putExtra(Constants.BRANCH_NAME, branchEditText
                            .getText().toString());
                data.putExtra(Constants.QUESTIONNAIRE_STAUS, 142);
            }
            if (showSubmitMenu == true && previousPageDataId != null)
                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
            else
                data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, did);
            data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME, startTime);
            CheckerApp.setQuestionResult(data);
            finish();
            return true;
        }
        return false;
    }

    @Override
    public void onLocationChanged(Location arg0) {
        // TODO Auto-generated method stub
        Helper.critEndLat = String.valueOf(arg0.getLatitude());
        Helper.critEndLong = String.valueOf(arg0.getLongitude());
    }

    @Override
    public void onProviderDisabled(String arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public void onProviderEnabled(String provider) {
        // TODO Auto-generated method stub

    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
        // TODO Auto-generated method stub

    }

    private boolean callBracketLayerFunction(String displayCondition) {

        while (true) {
            int start = displayCondition.lastIndexOf("(",
                    displayCondition.length());
            int end = displayCondition.indexOf(")", start);

            if (start == -1 || end == -1)
                break;
            String subString = displayCondition.substring(start, end + 1);
            boolean isOkay = IsObjectdisplaybyCondition(subString.replace("(",
                    "").replace(")", ""));
            if (isOkay) {
                displayCondition = displayCondition.replace(subString, "1=1");
            } else {
                displayCondition = displayCondition.replace(subString, "1=2");
            }
        }
        return IsObjectdisplaybyCondition(displayCondition);
    }

    private boolean outerFunctionTocallIfORGate(String displayCondition) {
        // displayCondition = displayCondition.replace("(", "");
        // displayCondition = displayCondition.replace(")", "");
        //
        if (displayCondition != null && displayCondition.contains("(")
                && displayCondition.contains("")) {
            return callBracketLayerFunction(displayCondition);
        }

        String[] strArr = displayCondition.split("\\|\\|");
        for (int i = 0; i < strArr.length; i++) {
            displayCondition = strArr[i];
            String[] str = null;
            try {
                if (IsObjectdisplaybyCondition(strArr[i]))
                    return true;
            } catch (Exception ex) {
                Toast.makeText(
                        QuestionnaireActivity.this,
                        getResources().getString(
                                R.string._error_display_condition),
                        Toast.LENGTH_LONG).show();
                return true;
            }
        }
        return false;
    }

    public boolean IsObjectdisplaybyCondition(String displayCondition) {
        if (displayCondition == null || displayCondition.equals(""))
            return true;
        if (displayCondition.replace(" ", "").equals("1=43"))
            return true;
        if (displayCondition.replace(" ", "").equals("1=2"))
            return false;
        if (displayCondition.replace(" ", "").equals("1=1"))
            return true;

        this.isDisplayCondition = true;
        if (displayCondition != null && displayCondition.contains("||")) {
            boolean isOkay = outerFunctionTocallIfORGate(displayCondition
                    .replace(" ", ""));

            this.isDisplayCondition = false;
            return isOkay;
        }

        // ($[12,S2,1]$+$[12,S2,2]$=0 & $[12,S2,98]$=1 & (1=1 & 1=2))
        // || (1=2)
        // || (1=1)
        displayCondition = displayCondition.replace("&amp;", "&");
        displayCondition = displayCondition.replace("&", "&amp;");

        displayCondition = displayCondition.replace("&amp;gt;", "&gt;");
        displayCondition = displayCondition.replace("&amp;lt;", "&lt;");

        // displayCondition = displayCondition.replace("'", "");
        displayCondition = displayCondition.trim();
        String[] strArr = displayCondition.split("&amp;");
        for (int i = 0; i < strArr.length; i++) {
            displayCondition = strArr[i];
            String[] str = null;
            try {
                if (!verifyDisplayConditionFull(strArr[i])) {
                    this.isDisplayCondition = false;
                    return false;
                }
            } catch (Exception ex) {
                Toast.makeText(
                        QuestionnaireActivity.this,
                        getResources().getString(
                                R.string._error_display_condition),
                        Toast.LENGTH_LONG).show();
                break;
            }
        }
        this.isDisplayCondition = false;
        return true;
    }

    private void getRHS(String condition) {
        String[] strarr = null;
        if (condition != null && condition.contains("=")) {
            strarr = condition.split("=");
        } else if (condition != null && condition.contains("&gt;")) {
            strarr = condition.split("&gt;");
        } else if (condition != null && condition.contains("&lt;")) {
            strarr = condition.split("&lt;");
        }
        if (strarr != null && strarr.length == 2) {
            rhs = strarr[1];
        } else rhs = null;
    }

    private boolean verifyDisplayConditionFull(String text) {

        if (text != null) {
            if (!text.contains("^"))
                text = text.trim();
            text = text.replace("&quot;", "'");
            text = text.replace("\\", "");

            if (text.equals("1=1"))
                return true;

            if (text.equals("1=2"))
                return false;
        }
        getRHS(text);

        // $[12,S2,1]$+ $[12,S2,2]$ > 0
        double total = 0;
        String totalSs = "";
        String ss = "";
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");

            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            // 12,s2,1
            String[] strarr = str.split(",");
            // strarr[0]=12 [1]=s2, []
            if (strarr.length == 1) {
                String strconverted = ConvertTextCodetoText("$[" + str + "]$",
                        false);
                text = text.replace("$[" + str + "]$", strconverted + "");
            } else if (strarr.length == 2) {
                String defaultValue = null;
                if (strarr[0].contains(";")) {
                    String[] defArray = strarr[0].split(";");
                    strarr[0] = defArray[0];
                    if (defArray.length > 1)
                        defaultValue = defArray[1];
                    else
                        defaultValue = "";
                }
                ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                if ((ss == null || ss.equals("0") || ss.equals(""))
                        && defaultValue != null) {
                    ss = defaultValue;
                }
                totalSs += ss;
                boolean isAdd = true;
                try {
                    String sbstring = text.substring(start - 1, start);
                    isAdd = sbstring.equals("+");
                } catch (Exception ex) {
                    isAdd = true;
                }
                if (ss.equals("")) {
                    text = text.replace("$[" + str + "]$", "''");
                }
                text = text.replace("$[" + str + "]$", ss);
                try {

                    double i = Double.parseDouble(ss);
                    if (isAdd == true)
                        total += i;

                } catch (Exception ex) {

                }

            } else if (strarr.length > 2) {
                boolean isAdd = true;
                try {
                    String sbstring = text.substring(start - 1, start);
                    isAdd = sbstring.equals("+");
                } catch (Exception ex) {
                    isAdd = true;
                }
                int number = 0;
                if (strarr[0] != null && strarr[0].contains("105")) {

                    String n = getText(105, strarr[1], strarr[2]);
                    try {
                        number = Integer.parseInt(n);
                    } catch (Exception ex) {

                    }
                } else if (strarr[0].contains("15")) {
                    number = getText(strarr[1], strarr[2], true);
                } else
                    number = getText(strarr[1], strarr[2], false);
                if (number == 0
                        && (strarr[0].equals("105") || strarr[0].equals("901")
                        || strarr[0].equals("15") || strarr[0]
                        .equals("16"))) {
                    totalSs = "";
                    String defaultValue = null;
                    ss = getText(Integer.parseInt(strarr[0]), strarr[1],
                            strarr[2]);

                    if ((ss == null || ss.equals("0") || ss.equals(""))
                            && defaultValue != null) {
                        ss = defaultValue;
                    }
                    totalSs += ss;
                    isAdd = true;
                    try {
                        String sbstring = text.substring(start - 1, start);
                        isAdd = sbstring.equals("+");
                    } catch (Exception ex) {
                        isAdd = true;
                    }
                    if (ss.equals("")) {
                        text = text.replace("$[" + str + "]$", "''");
                    }
                    text = text.replace("$[" + str + "]$", ss);
                    try {

                        double i = Double.parseDouble(ss);
                        if (isAdd == true)
                            total += i;

                    } catch (Exception ex) {

                    }
                }

                text = text.replace("$[" + str + "]$", number + "");
                if (isAdd == true)
                    total += number;
            }
            text = text.replace("$[" + str + "]$", "");
        }
        // text = text.replace("(", "");
        // text = text.replace(")", "");
        String str[];
        if (text.contains("&lt;=")) {

            str = text.split("&lt;=");
            try {
                double i = Double.parseDouble(str[1].trim());
                total = calculateMath(str[0], total);
                if (total <= i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

        } else if (text.contains("&gt;=")) {

            str = text.split("&gt;=");
            try {
                double i = Double.parseDouble(str[1].trim());
                total = calculateMath(str[0], total);
                if (total >= i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

        } else if (text.contains("&lt;")) {

            str = text.split("&lt;");
            try {
                double i = Double.parseDouble(str[1].trim());
                total = calculateMath(str[0], total);
                if (total < i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

        } else if (text.contains("&gt;")) {

            str = text.split("&gt;");
            try {
                double i = Double.parseDouble(str[1].trim());
                total = calculateMath(str[0], total);
                if (total > i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

        }
        if (text.contains("!=")) {

            str = text.split("!=");
            boolean b = (str[1].contains("'"));
            try {
                double i = Double.parseDouble(str[1].trim());
                total = calculateMath(str[0], total);
                if (total != i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

            if (b) {

                if (str.length == 2
                        && !str[0]
                        .replace("'", "")
                        .replace("(", "")
                        .replace(")", "")
                        .trim()
                        .equals(str[1].replace("'", "")
                                .replace("(", "").replace(")", "")
                                .trim()))
                    return true;
                else
                    return false;

                // if (totalSs.equals(""))
                // return false;
                // else
                // return true;
            }
            if (str.length == 2 && !str[0].equals(str[1]))
                return true;
            else
                return false;

        } else if (text.contains("in_array") && totalSs.length() > 0) {
            str = text.split("in_array");
            if (totalSs.contains("&amp;")) {
                totalSs = totalSs.replace("&amp;", "&");
            }
            String[] allAnwers = str[0].split("&nbsp;");
            for (int i = 0; i < allAnwers.length; i++) {
                String strleft = allAnwers[i].replace("'", "").replace("(", "")
                        .replace(")", "").trim();
                String strRight = str[1].replace("'", "").replace("(", "")
                        .replace(")", "").trim();
                String[] answersArray = strRight.split(",");
                boolean isOkay3 = strRight.contains(strleft);
                boolean isOkay1 = strleft.equals(strRight);
                boolean isOkay2 = strleft.contains(strRight);
                if (str.length > 1 && (isOkay1 || isOkay2 || isOkay3)) {
                    return true;
                } else {

                }
            }
            return false;
        } else if (text.contains("=")) {

            str = text.split("=");
            boolean b = (str[1].contains("'"));
            try {
                total = calculateMath(str[0], total);
                double i = Double.parseDouble(str[1].trim());
                if (total == i)
                    return true;
                else
                    return false;

            } catch (Exception ex) {

            }

            if (!b) {
                if (str.length == 2
                        && str[0]
                        .replace("'", "")
                        .replace("(", "")
                        .replace(")", "")
                        .trim()
                        .equals(str[1].replace("'", "")
                                .replace("(", "").replace(")", "")
                                .trim()))
                    return true;
                else
                    return false;

                // if (totalSs.equals(""))
                // return true;
                // else
                // return false;
            }

            if (str.length == 2
                    && str[0]
                    .replace("'", "")
                    .replace("(", "")
                    .replace(")", "")
                    .trim()
                    .equals(str[1].replace("'", "").replace("(", "")
                            .replace(")", "").trim()))
                return true;
            else
                return false;

        }

        return false;
    }

    private boolean verifyLoopDisplayConditionFull(String text,
                                                   String loopSource, boolean isOldLoop, String without901,
                                                   String dataid) {
        if (isOldLoop) {

        } else {
            return false;
        }

        if (text != null) {
            text = text.replace(" ", "");
            text = text.replace("&quot;", "'");
            text = text.replace("\\", "");
        }

        // $[12,S2,1]$+ $[12,S2,2]$ > 0
        double total = 0;
        String totalSs = "";
        String ss = "";
        ArrayList<LoopsEntry> loopList = null;
        ArrayList<Answers> ansList = null;
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");

            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            // 12,s2,1
            String[] strarr = str.split(",");
            // strarr[0]=12 [1]=s2, []
            if (strarr.length > 2) {

                loopList = getLoopList(loopSource, strarr[1], strarr[2],
                        dataid, without901);
                // text = text.replace("$[" + str + "]$", number + "");

            } else if (strarr.length == 2) {
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (strarr[1] != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getObjectCode() != null
                                && strarr[1].equals(questionnaireData.get(i)
                                .getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null) {
                            ansList = questionnaireData.get(i).getAnswersList();
                        }
                    }
                }

            }
            text = text.replace("$[" + str + "]$", "");
        }
        text = text.replace("(", "");
        text = text.replace(")", "");
        String str[];
        if (text.contains("=")) {

        } else if (text.contains("in_array")) {
            if (ansList != null
                    && questionObject.getLoopObject().getCurrentLoopCount() < ansList
                    .size()) {
                questionObject.getLoopObject()
                        .setCurrentLoopCount(
                                questionObject.getLoopObject()
                                        .getCurrentLoopCount() + 1);
                return true;
            }
        }
        return false;
    }

    private ArrayList<LoopsEntry> getLoopDisplayConditionFull(String text,
                                                              String loopSource, String without901, String dataid) {

        if (text != null) {
            text = text.replace(" ", "");
            text = text.replace("&quot;", "'");
            text = text.replace("\\", "");
        }

        // $[12,S2,1]$+ $[12,S2,2]$ > 0
        double total = 0;
        String totalSs = "";
        String ss = "";
        ArrayList<LoopsEntry> loopList = new ArrayList<LoopsEntry>();
        ArrayList<Answers> ansList = new ArrayList<Answers>();
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");

            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            // 12,s2,1
            String[] strarr = str.split(",");
            // strarr[0]=12 [1]=s2, []
            if (strarr.length > 2) {

                loopList = getLoopList(loopSource, strarr[1], strarr[2],
                        dataid, without901);
                // text = text.replace("$[" + str + "]$", number + "");

            } else if (strarr.length == 2) {
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (strarr[1] != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getObjectCode() != null
                                && strarr[1].equals(questionnaireData.get(i)
                                .getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null) {
                            ansList = questionnaireData.get(i).getAnswersList();
                        }
                    }
                }

            }
            text = text.replace("$[" + str + "]$", "");
        }
        text = text.replace("(", "");
        text = text.replace(")", "");
        String str[];
        if (text.contains("=")) {

        } else if (text.contains("in_array")) {

        }
        return loopList;
    }

    private ArrayList<LoopsEntry> getLoopList(String loopSource,
                                              String string1, String string2, String dataid2, String without901) {

        if (dataid2.contains("^") && without901.length() > 0) {
            if (dataid2.contains("$") || dataid2.contains("%")) {
                dataid2 = QuestionnaireActivity
                        .cleanDataIdfromDollarSign(dataid2);

            }
            String[] columns = dataid2.split("\\^");
            for (int i = 0; i < columns.length; i++) {
                if (columns[i].contains("=")) {
                    String[] nameValue = columns[i].split("=");
                    ArrayList<LoopsEntry> list = set.loopData;
                    if (nameValue.length > 1) {
                        list = set.getLoopAgainstListNamenColumnamenparentname(
                                loopSource, string2, nameValue[0],
                                nameValue[1], list, false);
                        if (list.size() > 0)
                            return list;
                    }

                }
            }

        }
        if (without901 != null && without901.contains("=")) {
            String[] w = without901.split("=");
            without901 = w[1].trim();
            without901 = ConvertTextCodetoText(without901, false);
        }
        if (without901 != null && !without901.equals("")
                && !without901.contains("="))
            return set.getLoopAgainstListNamenColumname(loopSource, string2,
                    set.loopData, true, without901);

        ArrayList<LoopsEntry> list = set.loopData;
        if (dataid2.contains("^")) {
            if (dataid2.contains("$") || dataid2.contains("%")) {
                dataid2 = QuestionnaireActivity
                        .cleanDataIdfromDollarSign(dataid2);

            }
            String[] columns = dataid2.split("\\^");

            int total = columns.length;
            for (int i = 0; i < total; i++) {
                if (columns[i].contains("=")) {
                    String[] nameValue = columns[i].split("=");

                    if (nameValue.length > 1
                            && list.size() == set.loopData.size()) {
                        list = set.getLoopAgainstListNamenColumname(loopSource,
                                nameValue[0], list, true, nameValue[1]);
                    } else if (nameValue.length > 1) {
                        list = set.getLoopAgainstListNamenColumnamenPArentRow(
                                loopSource, nameValue[0], list, true,
                                nameValue[1], set.loopData);
                    }

                    if (i == total - 1) {
                        list = set.getLoopAgainstListNamenColumnamenPArentRow(
                                loopSource, string2, list, true, null,
                                set.loopData);
                    }

                }
            }

        }
        if (list == null || list.size() == 0)
            list = set.loopData;
        return set.getLoopAgainstListNamenColumname(loopSource, string2, list,
                false, null);

    }

    public static String cleanDataIdfromDollarSign(String dataid2) {

        int indexStart = dataid2.indexOf("$");
        int indexEnd = dataid2.indexOf("^", indexStart + 1);
        while (indexStart > 0 && indexEnd > 0) {
            String sub1 = dataid2.substring(0, indexStart);
            String sub2 = dataid2.substring(indexEnd);
            dataid2 = sub1 + sub2;
            indexStart = dataid2.indexOf("$");
            indexEnd = dataid2.indexOf("^", indexStart + 1);

        }

        indexStart = dataid2.indexOf("%");
        indexEnd = dataid2.indexOf("^", indexStart + 1);
        while (indexStart > 0 && indexEnd > 0) {
            String sub1 = dataid2.substring(0, indexStart);
            String sub2 = dataid2.substring(indexEnd);
            dataid2 = sub1 + sub2;
            indexStart = dataid2.indexOf("%");
            indexEnd = dataid2.indexOf("^", indexStart + 1);

        }

        return dataid2;
    }

    public static String cleanColumnData(String dataid2) {
        int indexStart = dataid2.indexOf("$");
        int indexEnd = dataid2.length();
        if (indexStart > 0 && indexEnd > 0) {
            String did = dataid2.substring(indexStart, indexEnd);
            dataid2 = dataid2.replace(did, "");
        }
        return dataid2;
    }

    private double calculateMath(String text, double total)
            throws UnknownFunctionException, UnparsableExpressionException {
        Calculable calc;

        calc = new ExpressionBuilder(text).build();
        double result1 = calc.calculate();
        return result1;
    }

    private boolean verifyDisplayCondition(String[] str) {
        if (str.length > 1) {
            boolean b = (str[1].startsWith("'") && str[1].endsWith("'"));
            String s = CheckDisplayCondition(str[0]);
            if (b) {
                if (str[1].trim().contains(s.trim()))
                    return true;
            } else {
                if (str[1].trim().equals(s.trim()))
                    return true;
            }
        } else {
            String s = CheckDisplayCondition(str[0]);
            if (s.equals("0"))
                return false;
            return true;
        }
        return false;
    }

    public long convertTimeToNumeric(String time) {
        long l = 0;
        try {
            Date date = sdf.parse(time);
            l = date.getTime();
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return l;
    }

    public String ConvertTextCodetoText(String text, boolean isAutoValue) {
        if (text == null)
            return "";
        while (true) {
            switch (getTextCode(text)) {

                case 0:
                    return text;
                case 1:
                    return text;
                case 333:
                    // get lat lng
                    getEndLocations();

                    if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                            && Helper.critEndLong != null
                            && !Helper.critEndLong.equals("")) {
                        return text = text.replace(
                                "$[333]$",
                                getGPSTextCodeConversion(333, Helper.critEndLat,
                                        Helper.critEndLong));
                    } else {
                        return text = text.replace("$[333]$", "");
                    }
                case 334:
                    // get Street Address
                    getEndLocations();

                    if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                            && Helper.critEndLong != null
                            && !Helper.critEndLong.equals("")) {
                        return text = text.replace(
                                "$[334]$",
                                getGPSTextCodeConversion(334, Helper.critEndLat,
                                        Helper.critEndLong));
                    } else {
                        return text = text.replace("$[334]$", "");
                    }

                case 335:
                    // get Regional Address
                    getEndLocations();

                    if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                            && Helper.critEndLong != null
                            && !Helper.critEndLong.equals("")) {
                        return text = text.replace(
                                "$[335]$",
                                getGPSTextCodeConversion(335, Helper.critEndLat,
                                        Helper.critEndLong));
                    } else {
                        return text = text.replace("$[335]$", "");
                    }

                case 3350:
                    // get Time in
                    String time = getTimeText(3350);
                    return text = text.replace("$[3350]$", time);

                case 3351:
                    // get Time Out
                    time = getTimeText(3351);
                    return text = text.replace("$[3351]$", time);


                case 225:

                    if (order != null && order.getProjectID() != null)
                        text = text.replace("$[225]$", order.getProjectID());
                    else text = text.replace("$[225]$", "");
                    break;
                case 226:
                    if (order != null && order.getProjectName() != null)
                        text = text.replace("$[226]$", order.getProjectName());
                    else text = text.replace("$[226]$", "");
                    break;
                case 242:
                    if (order != null && order.getBriefingContent() != null)
                        text = text.replace("$[242]$", order.getBriefingContent());
                    else text = text.replace("$[242]$", "");
                    break;
                case 200:
                    if (orderID.contains("-"))
                        text = text.replace("$[200]$", order.getBranchPhone());
                    else
                        text = text.replace("$[200]$", order.getBranchFullname());

                    break;
                case 800:
                    SimpleDateFormat stimeformat = new SimpleDateFormat(
                            "yyyy-MM-dd", Locale.ENGLISH);
                    long l = 0;
                    try {
                        Date date = stimeformat.parse(sdf.format(new Date()
                                .getTime()));
                        l = date.getTime();

                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    text = text.replace("$[800]$", l + "");

                    break;
                case 801:
                    SimpleDateFormat timeformat = new SimpleDateFormat("kk:mm:ss",
                            Locale.ENGLISH);
                    l = 0;
                    try {
                        Date date = timeformat.parse(timeformat.format(new Date()
                                .getTime()));
                        l = date.getTime();

                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    text = text.replace("$[801]$", l + "");
                    break;
                case 201:
                    if (orderID.contains("-"))
                        text = text.replace("$[201]$", order.getBranchPhone());
                    else
                        text = text.replace("$[201]$", order.getBranchName());
                    break;
                case 220:

                    String[] languages = new String[15];
                    languages[0] = "English";
                    languages[1] = "Español";
                    languages[2] = "Română";
                    languages[3] = "עברית";
                    languages[4] = "日本人";
                    languages[5] = "Português";
                    languages[6] = "français";
                    languages[7] = "ру�?�?�?кий";
                    languages[8] = "Svenska";
                    languages[9] = "Türk";
                    languages[10] = "italian";
                    languages[11] = "Czech";
                    languages[12] = "हिंदी";
                    languages[13] = "българ�?ки";
                    languages[14] = "简体中文";
                    myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                    int language = myPrefs.getInt(
                            Constants.SETTINGS_LANGUAGE_INDEX, 0);
                    text = text.replace("$[220]$", languages[language]);
                    break;
                case 202:
                    text = text.replace("$[202]$", order.getFullname());
                    break;
                case 203:
                    if (order.getOrderID() != null
                            && !order.getOrderID().contains("-"))
                        text = text.replace("$[203]$", order.getOrderID());
                    else
                        text = text.replace("$[203]$", "");
                    break;
                case 204:
                    if (order.getCheckerCode() == null)
                        order.setCheckerCode("");
                    text = text.replace("$[204]$", order.getCheckerCode());
                    break;
                case 205:

                    text = text.replace("$[205]$", order.getBranchCode());
                    break;
                case 206:
                    if (set.getSetCode() == null)
                        set.setSetCode("");
                    text = text.replace("$[206]$", set.getSetCode());
                    break;
                case 207:
                    text = text.replace("$[207]$", "");
                    break;
                case 211:
                    text = text.replace("$[211]$", "");
                    break;
                case 209:
                    text = text.replace("$[209]$", "");
                    break;
                case 210:
                    text = text.replace("$[210]$", "");
                    break;
                case 212:
                    try {
                        myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                        String username = myPrefs.getString(
                                Constants.POST_FIELD_LOGIN_USERNAME, "");
                        text = text.replace("$[212]$", username);
                    } catch (Exception ex) {
                        text = text.replace("$[212]$", "");
                    }
                    break;
                case 216:
                    text = text.replace("$[216]$", "");
                    break;
                case 213:
                    text = text.replace("$[213]$", order.getClientName());
                    break;
                case 208:
                    if (order.getBranchPhone() == null)
                        order.setBranchPhone("");
                    text = text.replace("$[208]$", order.getBranchPhone());
                    break;
                case 214:
                    if (order.getAddress() == null)
                        order.setAddress("");
                    text = text.replace("$[214]$", order.getAddress());
                    break;
                case 215:
                    text = text.replace("$[215]$", order.getCityName());
                    break;
                case 217:
                    if (order.getOpeningHours() == null)
                        order.setOpeningHours("");
                    text = text.replace("$[217]$", order.getOpeningHours());
                    break;
                case 218:
                    text = text.replace("$[218]$", order.getSetName());
                    break;
                case 2180:
                    if (set != null && set.getSetID() != null)
                        text = text.replace("$[2180]$", set.getSetID());
                    else
                        text = text.replace("$[2180]$", "");
                    break;
//			case 310:
//				String stime = "";
//				if (startTime != null)
//					stime = startTime.toString();
//				text = text.replace("$[310]$", stime);
//				break;
                case 311:
                    String ftime = "";
                    if (finishTime != null)
                        ftime = finishTime.getText().toString();
                    text = text.replace("$[311]$", ftime);
                    break;

                case 310://review start time
                    String st = startTime;
                    try {
                        if (orderID != null) {
                            st = DBHelper.getTimeStamp(orderID);
                            text = text.replace("$[310]$", st);
                        }
                    } catch (Exception ex) {

                    }
                    if (st == null) st = sdf.format(new Date().getTime());
                    text = text.replace("$[310]$", st);
                    break;

                case 222://shopper email
                    myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                    String response = myPrefs.getString(Constants.POST_FIELD_LOGIN_RESPONSE, "");
                    //<Phone></Phone><Phone2></Phone2><Phone3></Phone3><Email></Email>
                    String value = getParamFromXML(response, "Email");
                    text = text.replace("$[222]$", value);
                    break;

                case 326://phone number
                    myPrefs = getSharedPreferences("pref", MODE_PRIVATE);
                    response = myPrefs.getString(Constants.POST_FIELD_LOGIN_RESPONSE, "");
                    //<Phone></Phone><Phone2></Phone2><Phone3></Phone3><Email></Email>
                    value = getParamFromXML(response, "Phone");
                    text = text.replace("$[326]$", value);
                    break;

                case 2181://set code//done
                    String setCode = set.getSetCode();
                    if (setCode == null) setCode = "";
                    text = text.replace("$[2181]$", setCode);
                    break;

                case 300:
                    text = text.replace("$[300]$", order.getDescription());
                    break;
                case 307:
                    text = text.replace("$[307]$",
                            Helper.stripHtml(order.getDescription()));
                    break;
                case 700:
                    text = text.replace("$[700]$",
                            "1");
                    break;
                case 301:
                    text = text.replace("$[301]$", order.getDate());
                    break;
                case 302:
                    try {
                        text = text.replace("$[302]$", order.getTimeStart());
                    } catch (Exception ex) {
                        text = text.replace("$[302]$", "");
                    }
                    break;
                case 303:
                    if (order.getsPurchaseDescription() == null)
                        order.setsPurchaseDescription("");
                    text = text.replace("$[303]$", order.getsPurchaseDescription());
                    break;
                case 304:
                    if (order.getsPurchaseLimit() == null)
                        order.setsPurchaseLimit("");
                    text = text.replace("$[304]$", order.getsPurchaseLimit());
                    break;

                case 400:
                    if (selectedWorker > -1 && listWorkers.size() >= selectedWorker) {
                        listWorkers = filterWorkers(listWorkers, selectedBranchID);
                        final String[] array_spinner = new String[listWorkers
                                .size() + 1];
                        array_spinner[0] = "Not Selected";

                        for (int i = 0; i < listWorkers.size(); i++) {
                            array_spinner[i + 1] = Helper.stripHtml(listWorkers
                                    .get(i).getWorkerName());

                        }

                        text = text.replace("$[400]$",
                                array_spinner[selectedWorker]);
                    } else
                        text = text.replace("$[400]$", "");
                    break;

                case 510:
                    text = text.replace("$[510]$", "");
                    break;

                case 401:
                    try {
                        if (!text.toLowerCase().contains("text")
                                || text.contains("$["))
                            return getTextmultiCode(text, isAutoValue);
                        else {

                        }
                    } catch (Exception e) {
                        return text;
                    }
                default:
                    return "";
            }
        }
        // return text;
    }

    private String getParamFromXML(String response, String paramName) {
        if (response != null && response.contains("<" + paramName + ">")
                && response.contains("</" + paramName + ">")) {
            int stIndex = -1;
            int eIndex = -1;
            stIndex = response.indexOf("<" + paramName + ">") + paramName.length() + 2;
            eIndex = response.indexOf("</" + paramName + ">");
            if (stIndex > -1 && eIndex > stIndex) {
                String val = response.substring(stIndex, eIndex);
                return val;
            }
        }
        return "";
    }

    private String getGPSTextCodeConversion(int i, String lat, String lng) {
        try {
            double dLat = Double.parseDouble(lat);
            double dLng = Double.parseDouble(lng);
            if (i == 334) {
                // get street address
                Geocoder geocoder = new Geocoder(this, Locale.getDefault());
                List<Address> addresses = geocoder.getFromLocation(dLat, dLng,
                        1);
                if (addresses.size() > 0) {
                    Address address = addresses.get(0);
                    String ad = "";
                    for (int k = 0; k < address.getMaxAddressLineIndex(); k++) {
                        ad += address.getAddressLine(k) + ",";
                    }
                    ad = ad + "" + address.getFeatureName() + " ,"
                            + address.getAdminArea() + " ,"
                            + address.getLocality();
                    return ", FootPrint:" + ad;
                }
            }
            if (i == 335) {
                // get regional address and country name
                Geocoder geocoder = new Geocoder(this, Locale.getDefault());
                List<Address> addresses = geocoder.getFromLocation(dLat, dLng,
                        1);
                if (addresses.size() > 0) {
                    Address address = addresses.get(0);
                    return ", FootPrint:" + "" + address.getFeatureName()
                            + " ," + address.getAdminArea() + " ,"
                            + address.getLocality() + " ,"
                            + address.getCountryName();
                }
            }
        } catch (Exception ex) {

        }
        return ", FootPrint:" + "Latitude=" + lat + ",Longitude=" + lng;
    }

    int getTextCode(String text) {
        // return 0;
        try {
            if (text.contains(";")) {
                int i = 0;
                i++;
            }
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            if (start == -1 || end == -1)
                return 0;
            String substring = text.substring(start + 2, end);
            return Integer.parseInt(substring); // 12,
            // 12312
        } catch (Exception e) {
            e.printStackTrace();
            return 401;
        }
    }

    String CheckDisplayCondition(String text) {
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            String[] strarr = str.split(",");
            if (strarr.length == 2) {
                String defaultValue = null;
                if (strarr[0].contains(";")) {
                    String[] defArray = strarr[0].split(";");
                    strarr[0] = defArray[0];
                    if (defArray.length > 1)
                        defaultValue = defArray[1];
                    else
                        defaultValue = "";
                }
                String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                if ((ss == null || ss.equals("0") || ss.equals(""))
                        && defaultValue != null) {
                    ss = defaultValue;
                }
                // String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                return ss;
            } else if (strarr.length > 2) {
                // if (strarr[1]!=null && strarr[1].contains(";"))
                // {
                // int ss = getGroupText(strarr[1], strarr[2]);
                // return "" + ss;
                // }
                // int ss = getText(strarr[1], strarr[2]);
                int number = 0;
                if (strarr[0].contains("15")) {
                    number = getText(strarr[1], strarr[2], true);
                } else
                    number = getText(strarr[1], strarr[2], false);
                return "" + number;
            } else {
                return ConvertTextCodetoText(text, false);
            }
        }
        return text;
    }

    String CheckDisplayConditionLoop(String text) {
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            String[] strarr = str.split(",");
            if (strarr.length == 2) {
                String defaultValue = null;
                if (strarr[0].contains(";")) {
                    String[] defArray = strarr[0].split(";");
                    strarr[0] = defArray[0];
                    if (defArray.length > 1)
                        defaultValue = defArray[1];
                    else
                        defaultValue = "";
                }
                String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                if ((ss == null || ss.equals("0") || ss.equals(""))
                        && defaultValue != null) {
                    ss = defaultValue;
                }
                // String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                return ss;
            } else if (strarr.length > 2) {
                // if (strarr[1]!=null && strarr[1].contains(";"))
                // {
                // int ss = getGroupText(strarr[1], strarr[2]);
                // return "" + ss;
                // }
                int number = 0;
                if (strarr[0].contains("15")) {
                    number = getText(strarr[1], strarr[2], true);
                } else
                    number = getText(strarr[1], strarr[2], false);
                return "" + number;
            } else {
                return ConvertTextCodetoText(text, false);
            }
        }
        return text;
    }

    boolean CheckAnswerDisplayCondition(String text) {
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            String[] strarr = str.split(",");
            if (strarr.length > 2) {
                int ss = getCodeAgainstCondition(12, strarr[1], strarr[2]);
                text = str.replace(str, ss + "");
            }
        }
        return measureDisplayFarmula(text);
    }

    private boolean measureDisplayFarmula(String text) {
        // TODO Auto-generated method stub
        return true;
    }

    String getTextmultiCode(String text, boolean isAutoValue) {
        String actual = text;
        double total = 0.0;
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            int nextStart = text.indexOf("$[", end + 2);
            int nextEnd = text.indexOf("]$", end + 2);
            Toast.makeText(QuestionnaireActivity.this, nextStart + "......" + text + "..." + nextEnd, Toast.LENGTH_LONG).show();
            if (nextEnd < nextStart)//implementing this for condition 4
            {
                end = nextEnd;
                Toast.makeText(QuestionnaireActivity.this, "....................................", Toast.LENGTH_LONG).show();
            }
            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end); // 12, 1323
            String[] strarr = str.split(",");
            String s = text.substring(start, end + 2);
            if (s.contains("13;")) {
                int i = 0;
                i++;
            }
            if (strarr.length >= 4) {
                if (strarr[0].equals("4")) {
                    Toast.makeText(QuestionnaireActivity.this, str, Toast.LENGTH_LONG).show();
                }
            }
            if (strarr.length == 1) {
                if (text.contains("text"))
                    break;
                String ss = ConvertTextCodetoText(s, isAutoValue);
                try {
                    double i = Double.parseDouble(ss);
                    total += i;
                } catch (Exception ex) {

                }
                text = text.replace(s, ss);
            } else if (strarr.length == 2) {
                String defaultValue = null;
                if (strarr[0].contains(";")) {
                    String[] defArray = strarr[0].split(";");
                    strarr[0] = defArray[0];
                    if (defArray.length > 1)
                        defaultValue = defArray[1];
                    else
                        defaultValue = "";
                }
                String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                if ((ss == null || ss.equals("0") || ss.equals(""))
                        && defaultValue != null) {
                    ss = defaultValue;
                }
                // String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                text = text.replace(s, ss);
                try {
                    double i = Double.parseDouble(ss);
                    total += i;
                } catch (Exception ex) {

                }
            } else if (strarr.length > 2) {
                if (Integer.parseInt(strarr[0]) == 120
                        || Integer.parseInt(strarr[0]) == 901) {
                    String defaultValue = null;
                    if (strarr[0].contains(";")) {
                        String[] defArray = strarr[0].split(";");
                        strarr[0] = defArray[0];
                        if (defArray.length > 1)
                            defaultValue = defArray[1];
                        else
                            defaultValue = "";
                    }
                    String ss = getText(Integer.parseInt(strarr[0]), strarr[1],
                            strarr[2]);
                    if (ss != null && ss.equals("NA"))
                        ss = "";
                    if ((ss == null || ss.equals("0") || ss.equals(""))
                            && defaultValue != null) {
                        ss = defaultValue;
                    }

                    if (ss != null)
                        text = text.replace(s, "" + ss);
                    try {
                        double i = Double.parseDouble(ss);
                        total += i;
                    } catch (Exception ex) {

                    }
                } else {
                    int number = 0;
                    if (strarr[0].contains("15")) {
                        number = getText(strarr[1], strarr[2], true);
                    } else
                        number = getText(strarr[1], strarr[2], false);
                    text = text.replace(s, "" + number);
                    try {
                        double i = Double.parseDouble(number + "");
                        total += i;
                    } catch (Exception ex) {

                    }
                }
            }
        }
        if (isAutoValue
                && (text.contains("+") || text.contains("/")
                || text.contains("*") || text.contains("-"))) {
            try {
                double kb = calculateMath(text, total);
                return kb + "";
            } catch (Exception ex) {
                return "";
            }
        }

        return text;
    }

    String getAnswerConditionCode(String text) {
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");
            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end); // 12, 1323
            String[] strarr = str.split(",");
            String s = text.substring(start, end + 2);
            if (strarr.length == 1) {
                if (text.contains("text"))
                    break;
                // String ss = ConvertTextCodetoText(s);
                // text = text.replace(s, ss);
            } else if (strarr.length == 2) {
                // String ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                // text = text.replace(s, ss);
            } else if (strarr.length > 2) {
                if (Integer.parseInt(strarr[0]) == 12) {
                    String defaultValue = null;
                    if (strarr[0].contains(";")) {
                        String[] defArray = strarr[0].split(";");
                        strarr[0] = defArray[0];
                        if (defArray.length > 1)
                            defaultValue = defArray[1];
                        else
                            defaultValue = "";
                    }
                    String ss = getText(Integer.parseInt(strarr[0]), strarr[1],
                            strarr[2]);
                    if ((ss == null || ss.equals("0") || ss.equals(""))
                            && defaultValue != null) {
                        ss = defaultValue;
                    }
                    //
                    // String ss = getText(Integer.parseInt(strarr[0]),
                    // strarr[1],
                    // strarr[2]);
                    text = text.replace(s, "" + ss);
                } else {
                    // int ss = getText(strarr[1], strarr[2]);
                    // text = text.replace(s, "" + ss);
                }
            }
        }
        return "";
    }

    private boolean getThisAnswer(String val2, List<Answers> listAnswer) {
        for (int i = 0; i < listAnswer.size(); i++) {
            if (val2.equals(listAnswer.get(i).getAnswerCode())) {
                return true;
            }
        }
        return false;
    }

    private boolean getThisAnswerbyAnswerId(String val2,
                                            List<Answers> listAnswer) {
        for (int i = 0; i < listAnswer.size(); i++) {
            if (val2.equals(listAnswer.get(i).getAnswerID())) {
                return true;
            }
        }
        return false;
    }

    private int getText(String val, String val2, boolean is15) {
        if (questionnaireData != null && !is15) {
            for (int i = 0; i < questionnaireData.size(); i++) {
                if (val.equals(questionnaireData.get(i).getObjectCode())
                        && questionnaireData.get(i).getAnswersList() != null
                        && questionnaireData.get(i).getAnswersList().size() > 0
                        && getThisAnswer(val2, questionnaireData.get(i)
                        .getAnswersList()))
                    return 1;
            }
        } else {
            for (int i = 0; i < questionnaireData.size(); i++) {
                if (val.equals(questionnaireData.get(i).getDataID())
                        && questionnaireData.get(i).getAnswersList() != null
                        && questionnaireData.get(i).getAnswersList().size() > 0
                        && getThisAnswerbyAnswerId(val2,
                        questionnaireData.get(i).getAnswersList()))
                    return 1;
            }
        }
        return 0;
    }

    private int getGroupdText(String val, String val2) {
        if (questionnaireData != null) {
            for (int i = 0; i < questionnaireData.size(); i++) {
                if (val.equals(questionnaireData.get(i).getObjectCode())
                        && questionnaireData.get(i).getAnswersList() != null
                        && questionnaireData.get(i).getAnswersList().size() > 0
                        && getThisAnswer(val2, questionnaireData.get(i)
                        .getAnswersList()))
                    return 1;
            }
        }
        return 0;
    }

    private int getCodeAgainstCondition(int index, String val, String val2) // 13,
    // 32432
    {
        switch (index) {
            case 12:
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getObjectCode() != null
                                && val.equals(questionnaireData.get(i)
                                .getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null) {
                            int s = 0;
                            String comma = "";
                            for (int j = 0; j < questionnaireData.get(i)
                                    .getAnswersList().size(); j++) {
                                if (val2 != null && questionnaireData.get(i)
                                        .getAnswersList().get(j) != null && questionnaireData.get(i)
                                        .getAnswersList().get(j).getAnswerCode() != null &&
                                        val2.equals(questionnaireData.get(i)
                                                .getAnswersList().get(j).getAnswerCode())) {
                                    s = 1;
                                }

                            }
                            return s;
                        }
                    }
                }
                return 0;
        }

        return 0;
    }

    private String getText(int index, String val, String val2) // 13, 32432
    {
        String loopafterpowersymbol = "";
        if (val.contains("^")) {
            loopafterpowersymbol = val.substring(val.indexOf("^"));
            val = val.replace(loopafterpowersymbol, "");
        }
        switch (index) {

            case 105:
                if (Orders.getBranchProps() != null
                        && Orders.getBranchProps().size() > 0) {
                    for (int i = 0; i < Orders.getBranchProps().size(); i++) {
                        if (Orders.getBranchProps().get(i).getID() != null
                                && Orders.getBranchProps().get(i).getID()
                                .equals(order.getBranchLink())
                                && Orders.getBranchProps().get(i).getPropID() != null
                                && Orders.getBranchProps().get(i).getPropID()
                                .equals(val)
                                && Orders.getBranchProps().get(i).getValueID() != null
                                && Orders.getBranchProps().get(i).getValueID()
                                .equals(val2)) {
                            return "1";
                        }
                    }
                }
                return "0";
            case 901:
                CurrentLoopData loopData = null;
                String result = "";
                if (allLoops != null) {

                    int i = 0;
                    i++;
                    loopData = getThisLoopObject(val);
                }
                if (set != null && questionObject != null
                        && questionObject.getDataID() != null && val2 != null
                        && questionObject.getLoopInfo() != null
                        && questionObject.getLoopRow() > 0
                        && questionObject.getLoopList() != null && val2 != null) {
                    String thisLoopSource = "";
                    thisLoopSource = questionObject.getLoopList();
                    if (loopData != null)
                        thisLoopSource = loopData.getCurrentLoopSource();
                    LoopsEntry loopEntry = set.get901SingleData(
                            questionObject.getDataID(), thisLoopSource, val2,
                            questionObject.getLoopRow());
                    result = loopEntry.getColumnData();
                    // String[] indeces = questionObject.getDataID().split("\\^");
                    // for (int i = 0; i < indeces.length; i++) {
                    // String[] namevalue = indeces[i].split("=");
                    // if (namevalue.length > 1 && namevalue[0].equals(val2)) {
                    //
                    // return namevalue[1];
                    //
                    // }
                    // }
                }

                return result;
            case 15:
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getDataID() != null
                                && val.equals(questionnaireData.get(i).getDataID())
                                && questionnaireData.get(i).getAnswersList() != null) {
                            String s = "0";
                            String comma = "";
                            for (int j = 0; j < questionnaireData.get(i)
                                    .getAnswersList().size(); j++) {
                                if (questionnaireData.get(i).getAnswersList()
                                        .get(j).getAnswer() != null
                                        && questionnaireData.get(i)
                                        .getAnswersList().get(j)
                                        .getAnswer().equals(val2)) {
                                    s = "1";
                                }
                            }
                            return s;
                        }
                    }
                }
                return "0";
            case 305:
                String customValue = "";
                if (customFields != null) {
                    for (int i = 0; i < customFields.size(); i++) {
                        if (customFields.get(i).getId() != null
                                && customFields.get(i).getId().equals(val)) {
                            customValue = customFields.get(i).getValue();
                        }
                    }
                    return customValue;
                }

                break;
            case 16:

                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getObjectCode() != null
                                && val.equals(questionnaireData.get(i)
                                .getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null) {
                            String s = "";
                            String comma = "";
                            for (int j = 0; j < questionnaireData.get(i)
                                    .getAnswersList().size(); j++) {
                                s += comma
                                        + questionnaireData.get(i).getAnswersList()
                                        .get(j).getAnswer();
                                comma = ",";
                            }
                            return s;
                        }
                    }
                }
                return "";
        }

        return "";
    }

    private String getTimeText(int i) {

        String time = sdf.format(new Date().getTime());
        if (i == 3350) {
            return "Time In:" + time;
        } else {
            return "Time Out:" + time;
        }
    }

    private String getGpsFootPrint(String text) {
        getEndLocations();

        if (Helper.critEndLat != null && !Helper.critEndLat.equals("")
                && Helper.critEndLong != null && !Helper.critEndLong.equals("")) {
            return text = text.replace(
                    "$[335]$",
                    getGPSTextCodeConversion(335, Helper.critEndLat,
                            Helper.critEndLong));
        } else {
            return text = text.replace("$[335]$", "");
        }

    }

    private String getText(int index, String val) // 13, 32432
    {
        String loopafterpowersymbol = null;
        if (val.contains("^")) {
            loopafterpowersymbol = val.substring(val.indexOf("^"));
            val = val.replace(loopafterpowersymbol, "");
        }

        switch (index) {
            case 207:
                break;
            case 16:
                if (questionnaireData != null) {

                    // $[16,Q2^Vehicle=Truck]$ in_array HONDA
                    // loopafterpowersymbol="Vehicle=Truck"

                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val != null
                                && questionnaireData.get(i) != null
                                && questionnaireData.get(i).getObjectCode() != null

                                && val.equals(questionnaireData.get(i)
                                .getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null
                                && (loopafterpowersymbol == null || (loopafterpowersymbol != null && questionnaireData
                                .get(i).getDataID()
                                .contains(loopafterpowersymbol)))) {
                            String s = "";
                            String comma = "";
                            for (int j = 0; j < questionnaireData.get(i)
                                    .getAnswersList().size(); j++) {
                                s += comma
                                        + questionnaireData.get(i).getAnswersList()
                                        .get(j).getAnswer();
                                comma = ", ";
                            }
                            return s;
                        }
                    }
                }
                return "NA";
            case 101:
                if (Orders.getBranchProps() != null
                        && Orders.getBranchProps().size() > 0) {
                    String value = "";
                    for (int i = 0; i < Orders.getBranchProps().size(); i++) {
                        if (Orders.getBranchProps().get(i).getID() != null
                                && Orders.getBranchProps().get(i).getID()
                                .equals(order.getBranchLink())
                                && Orders.getBranchProps().get(i).getPropID() != null
                                && Orders.getBranchProps().get(i).getPropID()
                                .equals(val)) {
                            value = Orders.getBranchProps().get(i).getValueID();
                            if (rhs != null && value.equals(rhs))
                                return value;
                        }
                    }
                    return value;
                }
                break;

            case 102:
                // new tuesday
                if (Orders.getBranchProps() != null
                        && Orders.getBranchProps().size() > 0) {
                    for (int i = 0; i < Orders.getBranchProps().size(); i++) {
                        if (Orders.getBranchProps().get(i).getID() != null
                                && Orders.getBranchProps().get(i).getID()
                                .equals(order.getBranchLink())
                                && Orders.getBranchProps().get(i).getPropID() != null
                                && Orders.getBranchProps().get(i).getPropID()
                                .equals(val)) {
                            return Orders.getBranchProps().get(i).getContent();
                        }
                    }
                }
                break;

            case 1:
                if (val != null && val.equals("133169")) {
                    int i = 0;
                    i++;
                }
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        String dataId = getProperDataId(questionnaireData.get(i)
                                .getDataID());

                        if (val.equals(dataId)) {

                            if (questionnaireData.get(i).getAnswersList() != null
                                    && questionnaireData.get(i).getAnswersList()
                                    .size() > 0)
                                return questionnaireData.get(i).getAnswersList()
                                        .get(0).getAnswer();
                            else if (questionnaireData.get(i).getAnswerText() != null)
                                return questionnaireData.get(i).getAnswerText();
                            else if (questionnaireData.get(i).getFreetext() != null)
                                return questionnaireData.get(i).getFreetext();

                        }
                    }
                }
                return "";
            case 2:
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        String dataId = getProperDataId(questionnaireData.get(i)
                                .getDataID());
                        if (val.equals(dataId)) {

                            return getZeroOrNot(questionnaireData.get(i)
                                    .getAnswerText(), questionnaireData.get(i)
                                    .getDataID());
                        }
                    }
                }
                return "";

            case 3:
                String value = "";
                if (questionnaireData != null) {

                    for (int i = 0; i < questionnaireData.size(); i++) {

                        String dataId = getProperDataId(questionnaireData.get(i)
                                .getDataID());
                        if (val.equals(dataId))
                            value = questionnaireData.get(i).getAnswerText();
                    }
                }

                if (value.contains(":") && !value.contains("-")
                        && (this.isDisplayCondition || this.thisAutoValues != null)) {
                    String s = value;
                    SimpleDateFormat timeformat = new SimpleDateFormat("kk:mm:ss",
                            Locale.ENGLISH);
                    try {
                        Date date = timeformat.parse(s);
                        long l = date.getTime() / 1000;
                        // SimpleDateFormat dtimeformat = new SimpleDateFormat(
                        // "yyyy-MM-dd", Locale.ENGLISH);
                        // Date today = new Date();
                        // today = dtimeformat.parse(android.text.format.DateFormat
                        // .format("yyyy-MM-dd", new java.util.Date()).toString());
                        value = (l /* + today.getTime() */) + "";
                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                } else if (!value.contains(":") && value.contains("-")
                        && (this.isDisplayCondition || this.thisAutoValues != null)) {
                    String s = value;
                    SimpleDateFormat timeformat = new SimpleDateFormat(
                            "yyyy-MM-dd", Locale.ENGLISH);
                    try {
                        Date date = timeformat.parse(s);
                        long l = date.getTime() / 1000;
                        // if (l < 0)
                        // l = -1 * l;
                        value = l + "";
                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }

                return value;
            case 1300:
                value = "";
                if (questionnaireData != null) {

                    for (int i = 0; i < questionnaireData.size(); i++) {

                        String questionCode = getProperDataId(questionnaireData.get(i)
                                .getObjectCode());
                        if (val.equals(questionCode))
                            value = questionnaireData.get(i).getAnswerText();
                    }
                }
                if (value != null && value.length() > 0)
                    value = "1";
                else value = "0";

                return value;

            case 11:
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val.equals(questionnaireData.get(i).getObjectCode())
                                && questionnaireData.get(i).getAnswersList() != null
                                && questionnaireData.get(i).getAnswersList().size() > 0) {
                            return questionnaireData.get(i).getAnswersList().get(0)
                                    .getAnswerCode();
                        }
                    }
                }
                return "";
            case 13:
                if (questionnaireData != null) {
                    for (int i = 0; i < questionnaireData.size(); i++) {
                        if (val.equals(questionnaireData.get(i).getObjectCode())
                                && questionnaireData.get(i).getAnswerText() != null)
                            return getZeroOrNot(questionnaireData.get(i)
                                    .getAnswerText(), questionnaireData.get(i)
                                    .getDataID());
                    }
                }
                return "";
        }
        return "";
    }

    private String getProperDataId(String dataID2) {
        if (dataID2.contains("_")) {

            String dataId = getDataIdFromDataId(dataID2);
            String groupId = getGroupIdFromDataId(dataID2.replace(dataId + "_",
                    ""));
            if (dataID2.contains("-")) {
                String titleId = getTitleFromDataId(dataID2.replace(dataId
                        + "_" + groupId + "-", ""));
                return groupId + ";" + titleId + ";" + dataId;
            }
            return groupId + ";" + "0" + ";" + dataId;
        }

        return dataID2;
    }

    private String getZeroOrNot(String answerText, String dataID2) {
        if (dataID2.contains("_")) {
            dataID2 = getDataIdFromDataId(dataID2);
        }
        if (set == null || answerText != null && answerText.length() > 0)
            return answerText;
        for (int i = 0; i < set.getListObjects().size(); i++) {
            if (set.getListObjects().get(i).getDataID() != null
                    && dataID2 != null
                    && set.getListObjects().get(i).getDataID().equals(dataID2)) {
                if (set.getListObjects().get(i).getMiType() != null
                        && (set.getListObjects().get(i).getMiType().equals("2") || set
                        .getListObjects().get(i).getMiType()
                        .equals("5"))) {
                    return "0";
                }
            }
        }
        if (answerText == null) answerText = "";
        return answerText;
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {

        if (keyCode == KeyEvent.KEYCODE_BACK) {

            if (previousBtn.getVisibility() == (View.VISIBLE)) {

                IsMandatory = IsMiMandatory = false;
                // previousBtn.setBackgroundResource(R.drawable.button_n);
                hideKeyBoard();
                String txt = getResources().getString(
                        R.string.questionnaire_next_btn);

                String txt1 = getResources().getString(
                        R.string.questionnaire_prev_btn);
                if (modeSelect == 3) {
                    // nextBtn.setCompoundDrawablesWithIntrinsicBounds(
                    // R.drawable.arrow_left, 0, 0, 0);
                    nextBtn.setText(txt);

                    // previousBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
                    // R.drawable.arrow_right, 0);
                    previousBtn.setText(txt1);

                } else {

                    // nextBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0,
                    // R.drawable.arrow_right, 0);
                    nextBtn.setText(txt);

                    // previousBtn.setCompoundDrawablesWithIntrinsicBounds(
                    // R.drawable.arrow_left, 0, 0, 0);
                    previousBtn.setText(txt1);
                }
                previousButtonClicked();
                return true;
            } else {
                if (On_Next_Button_Click("BackKey")) {
                    if (!order.getAsArchive()) {
                        LongOperation longTask = new LongOperation(false, "");
                        longTask.execute();
                        exitAfterSubmitSurveyOrExitandsave(0);
                        try {
                            if (!DBHelper.isSetExist(set.getSetID(), orderID))
                                DBHelper.duplicateSet(set.getSetID(), orderID);
                        } catch (IOException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String finishTimeText = "";
                        if (finishTime != null) finishTimeText = finishTime.getText().toString();
                        getHtml(listObjects, questionnaireData, orderID, uploadList, set, finishTimeText, this);

                        Intent intent = new Intent();
                        intent.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                                orderID);
                        intent.putExtra(Constants.QUESTIONNAIRE_STAUS, 0);
                        setResult(RESULT_OK, intent);
                    }
                    return super.onKeyDown(keyCode, event);
                }

            }

        }
        return super.onKeyDown(keyCode, event);
    }

    private void exitAfterSubmitSurveyOrExitandsave(int type) {
        // if (questionnaireData != null)
        // questionnaireData.clear();
        Intent intent = new Intent();
        intent.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);
        setResult(RESULT_OK, intent);
        Intent data = new Intent();
        String did = QuestionnaireActivity.this.backPointer;
        if (did == null && questionObject != null) did = questionObject.getDataID();
        if (orderID.contains("-") && type != 42) {

            data.putExtra("isSurvey", true);
            if (branchEditText != null && branchEditText.getText() != null)
                data.putExtra(Constants.BRANCH_NAME, branchEditText.getText()
                        .toString());
            if (questionObject != null) did = questionObject.getDataID();
            DBHelper.updateOrders(Constants.DB_TABLE_ORDERS, new String[]{
                            Constants.DB_TABLE_ORDERS_ORDERID,
                            Constants.DB_TABLE_ORDERS_STATUS,
                            Constants.DB_TABLE_ORDERS_START_TIME,}, orderID,
                    "In progress", startTime, did);

        }
        data.putExtra(Constants.DB_TABLE_QUESTIONNAIRE_ORDERID, orderID);
        data.putExtra(Constants.QUESTIONNAIRE_STAUS, type);
        if (showSubmitMenu == true && previousPageDataId != null)
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, previousPageDataId);
        else
            data.putExtra(Constants.DB_TABLE_ORDERS_LASTDATAID, did);
        data.putExtra(Constants.DB_TABLE_ORDERS_START_TIME, startTime);
        CheckerApp.setQuestionResult(data);
        if (type == 2 || type == 42)
            finish();
    }

    private void getSavedQuestionnaire() {

        if (LoginActivity.thisOrder != null && LoginActivity.thisSet != null
                && LoginActivity.thisSavedAnswer != null) {
            questionnaireData = LoginActivity.thisSavedAnswer;
            return;
        }
        questionnaireData = DBHelper.getQuestionnaireList(
                Constants.DB_TABLE_QUESTIONNAIRE, new String[]{
                        Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTEXT,
                        Constants.DB_TABLE_QUESTIONNAIRE_ORDERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_QTL,
                        Constants.DB_TABLE_QUESTIONNAIRE_OT,
                        Constants.DB_TABLE_ANSWERS_BRANCHID,
                        Constants.DB_TABLE_ANSWERS_WORKERID,
                        Constants.DB_TABLE_QUESTIONNAIRE_FT,
                        Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                        Constants.DB_TABLE_QUESTIONNAIRE_LoopInfo,},
                Constants.DB_TABLE_QUESTIONNAIRE_ORDERID + "=" + "\"" + orderID
                        + "\"", Constants.DB_TABLE_QUESTIONNAIRE_DATAID,
                questionnaireData);
        questionnaireData = getObjectCodesFromSet(questionnaireData, set);
        lastSavedQuotas = DBHelper.getQuotas(orderID);

//		try {
//			pos_shelf_item = DBHelper.getShelfItems(Constants.DB_TABLE_POS,
//					new String[] { Constants.DB_TABLE_POS_LocationId,
//							Constants.DB_TABLE_POS_OrderId,
//							Constants.DB_TABLE_POS_Price,
//							Constants.DB_TABLE_POS_ProductId,
//							Constants.DB_TABLE_POS_PropertyId,
//							Constants.DB_TABLE_POS_Quantity,
//							Constants.DB_TABLE_POS_SetId,
//							Constants.DB_TABLE_POS_Notee,
//							Constants.DB_TABLE_POS_date },
//					Constants.DB_TABLE_POS_OrderId + "=" + "\"" + orderID
//							+ "\"", pos_shelf_item, true);
//		} catch (Exception ex) {
//		}
        submitData = DBHelper
                .getSubmitQuestionnaireSingle(
                        Constants.DB_TABLE_SUBMITSURVEY,
                        new String[]{
                                Constants.DB_TABLE_SUBMITSURVEY_OID,
                                Constants.DB_TABLE_SUBMITSURVEY_FT,
                                Constants.DB_TABLE_SUBMITSURVEY_SLT,
                                Constants.DB_TABLE_SUBMITSURVEY_SLNG,
                                Constants.DB_TABLE_SUBMITSURVEY_ELT,
                                Constants.DB_TABLE_SUBMITSURVEY_ELNG,
                                Constants.DB_TABLE_SUBMITSURVEY_REPORTED_START_TIME,
                                Constants.DB_TABLE_SUBMITSURVEY_REPORTED_FINISH_TIME,
                                Constants.DB_TABLE_SUBMITSURVEY_UNEMPTY_QUES_COUNT,
                                Constants.DB_TABLE_SUBMITSURVEY_SID,
                                Constants.POST_FIELD_QUES_UNIX,
                                Constants.DB_TABLE_SUBMITSURVEY_purchase_details,
                                Constants.DB_TABLE_SUBMITSURVEY_purchase_payment,
                                Constants.DB_TABLE_SUBMITSURVEY_purchase_description,
                                Constants.DB_TABLE_SUBMITSURVEY_service_invoice_number,
                                Constants.DB_TABLE_SUBMITSURVEY_service_payment,
                                Constants.DB_TABLE_SUBMITSURVEY_service_description,
                                Constants.DB_TABLE_SUBMITSURVEY_transportation_payment,
                                Constants.DB_TABLE_SUBMITSURVEY_transportation_description,

                                Constants.DB_TABLE_SUBMITSURVEY_RS},
                        Constants.DB_TABLE_SUBMITSURVEY_OID + "=" + "\""
                                + orderID + "\"",
                        Constants.DB_TABLE_SUBMITSURVEY_OID);

        if (questionnaireData != null && questionnaireData.size() > 0) {
            uploadList.clear();
            uploadList = DBHelper.getQuestionnaireUploadFilesInDB(
                    Constants.UPLOAD_FILE_TABLE, new String[]{
                            Constants.UPLOAD_FILe_MEDIAFILE,
                            Constants.UPLOAD_FILe_DATAID,
                            Constants.UPLOAD_FILe_ORDERID,
                            Constants.UPLOAD_FILe_BRANCH_NAME,
                            Constants.UPLOAD_FILe_CLIENT_NAME,
                            Constants.UPLOAD_FILe_DATE,
                            Constants.UPLOAD_FILe_SET_NAME,
                            Constants.UPLOAD_FILe_SAMPLE_SIZE,
                            Constants.UPLOAD_FILe_PRODUCTID,
                            Constants.UPLOAD_FILe_LOCATIONID,},
                    Constants.DB_TABLE_SUBMITSURVEY_OID + "=" + "\"" + orderID
                            + "\"", Constants.DB_TABLE_SUBMITSURVEY_OID,
                    uploadList);
            uploadFileList.clear();
            for (int i = 0; i < uploadList.size(); i++) {
                uploadFileList.add(Uri.parse(uploadList.get(i).getFilePath()));
            }
        }
    }

    private QuestionnaireData getLastSavedItem(
            ArrayList<QuestionnaireData> questionnaireData,
            ArrayList<Objects> listObjects) {
        QuestionnaireData lastFoundItem = null;
        for (int i = 0; listObjects != null && i < listObjects.size(); i++) {
            for (int j = 0; j < questionnaireData.size(); j++) {
                if (listObjects.get(i) != null
                        && listObjects.get(i).getDataID() != null
                        && questionnaireData.get(j) != null
                        && questionnaireData.get(j).getDataID() != null
                        && listObjects.get(i).getDataID()
                        .equals(questionnaireData.get(j).getDataID())) {
                    lastFoundItem = questionnaireData.get(j);
                    break;
                }
            }
        }
        return lastFoundItem;
    }

    private ArrayList<QuestionnaireData> getObjectCodesFromSet(
            ArrayList<QuestionnaireData> questionnaireData2, Set set2) {
        if (questionnaireData2 != null && questionnaireData2.size() > 0
                && set2 != null && set2.getListObjects() != null
                && set2.getListObjects().size() > 0) {
            for (int i = 0; i < questionnaireData2.size(); i++) {
                for (int j = 0; j < set2.getListObjects().size(); j++) {
                    if (questionnaireData2.get(i) != null
                            && questionnaireData2.get(i).getDataID() != null
                            && set2.getListObjects().get(j) != null
                            && set2.getListObjects().get(j).getDataID() != null
                            && set2.getListObjects()
                            .get(j)
                            .getDataID()
                            .equals(questionnaireData2.get(i)
                                    .getDataID())) {
                        questionnaireData2.get(i).setObjectCode(
                                set2.getListObjects().get(j).getObjectCode());
                        for (int k = 0; questionnaireData2.get(i)
                                .getListAnswer() != null
                                && k < questionnaireData2.get(i)
                                .getListAnswer().size(); k++) {
                            // /////////////////////////////
                            for (int l = 0; set2.getListObjects().get(j)
                                    .getListAnswers() != null
                                    && l < set2.getListObjects().get(j)
                                    .getListAnswers().size(); l++) {
                                if (set2.getListObjects().get(j)
                                        .getListAnswers().get(l) != null
                                        && questionnaireData2.get(i)
                                        .getListAnswer().get(k) != null
                                        && set2.getListObjects()
                                        .get(j)
                                        .getListAnswers()
                                        .get(l)
                                        .getAnswerID()
                                        .equals(questionnaireData2
                                                .get(i).getListAnswer()
                                                .get(k).getAnswerID())) {
                                    questionnaireData2
                                            .get(i)
                                            .getListAnswer()
                                            .get(k)
                                            .setAnswerCode(
                                                    set2.getListObjects()
                                                            .get(j)
                                                            .getListAnswers()
                                                            .get(l)
                                                            .getAnswerCode());
                                }
                            }
                        }
                    }
                }
            }
        }
        return questionnaireData2;
    }

    private EditText displayListEdit(String text) {
        // Constants.QUESTIONNAIRE_JUMPTO_LBL
        EditText tv = new EditText(this.getApplicationContext());
        tv.setTextColor(getResources().getColor(
                android.R.color.black));

        if (modeSelect == 3) {
            tv.setGravity(Gravity.RIGHT);
        }
        tv.setText(Helper.makeHtmlString(text));
        tv.setTextColor(Color.BLACK);
        viewId = getViewId(viewId);
        tv.setId(viewId);
        setFontSize(tv);
        return tv;
    }

    private EditText displayListEdit(EditText editText, String text) {
        // Constants.QUESTIONNAIRE_JUMPTO_LBL
        EditText tv = editText;
        tv.setText(Helper.makeHtmlString(text));
        tv.setTextColor(Color.WHITE);
        viewId = getViewId(viewId);
        tv.setId(viewId);
        setFontSize(tv);
        return tv;
    }

    private TextView displayLabel(String text) {
        // Constants.QUESTIONNAIRE_JUMPTO_LBL
        TextView tv = new TextView(this.getApplicationContext());
        tv.setText(Helper.makeHtmlString(text));
        tv.setTextColor(Color.BLACK);
        viewId = getViewId(viewId);
        tv.setId(viewId);
        if (modeSelect == 3)
            tv.setGravity(Gravity.RIGHT);
        setFontSize(tv);
        return tv;
    }

    private ImageView displayupdownicon(Drawable drawable) {
        // Constants.QUESTIONNAIRE_JUMPTO_LBL
        ImageView tv = new ImageView(this.getApplicationContext());
        tv.setImageDrawable(drawable);
        viewId = getViewId(viewId);
        tv.setId(viewId);
        return tv;
    }

    private View displayJumptoDropdown(String[] items) {
        Spinner spinner = new Spinner(this);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
                UIHelper.getSpinnerLayoutSize(QuestionnaireActivity.this,
                        modeSelect), items);
        adapter.setDropDownViewResource(UIHelper.getSpinnerLayoutSize(
                QuestionnaireActivity.this, modeSelect));
        spinner.setAdapter(adapter);
        spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> arg0, View arg1,
                                       int arg2, long arg3) {
                // TODO Auto-generated method stub
                if (arg2 > 0) {
                    // currentIndex = nextQIndex;
                    Objects obj = listJumpto.get(arg2 - 1);
                    // currentIndex = obj.getObjectIndex() - 1;
                    if (questionObject != null
                            && questionObject.getDataID() != null
                            && obj != null
                            && obj.getDataID() != null
                            && questionObject.getDataID().equals(
                            obj.getDataID())) {
                        Toast.makeText(
                                QuestionnaireActivity.this,
                                getResources()
                                        .getString(
                                                R.string.s_item_column_0_line_18291_file_88),
                                Toast.LENGTH_SHORT).show();
                        return;
                    }
                    DataID = obj.getDataID();
                    isjump = true;
                } else {
                    currentIndex = nextQIndex;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> arg0) {
                // TODO Auto-generated method stub
            }
        });
        viewId = getViewId(viewId);
        spinner.setId(viewId);
        changeSpinnerFontSize(spinner);
        return spinner;
    }

    private class DbOpertation extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... params) {
            // Looper.prepare();
            doinbackgroundDbFunctions();
            // Looper.loop();
            return null;
        }

        @Override
        protected void onPostExecute(String result) {
            if (set == null) {
                ShowSetErrorAlert(
                        QuestionnaireActivity.this,
                        getString(R.string.questionnaire_alert_title),
                        getString(R.string.save_questionnaire_records_for_offline),
                        getString(R.string.questionnaire_btn_text));

                // finish();
            } else {

                postAsyncDbFunctions();
                Revamped_Loading_Dialog.hide_dialog();
            }
        }

        @Override
        protected void onPreExecute() {
            Revamped_Loading_Dialog.show_dialog(QuestionnaireActivity.this,
                    getString(R.string.prepare_screen_dialogue));

        }

    }

    public void ShowSetErrorAlert(Context context, String title,
                                  final String message, String button_lbl) {
        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        alert.setCancelable(false);
        alert.setTitle(title);
        TextView textView = new TextView(context);
        textView.setTextSize(UIHelper.getFontSize(QuestionnaireActivity.this,
                textView.getTextSize()));
        textView.setText(Helper.makeHtmlString(message));

        alert.setView(textView);
        alert.setPositiveButton(button_lbl,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        finish();
                    }
                });
        alert.show();
    }

    public void removeThisAttachment(int position) {
        if (uploadFileList != null && uploadFileList.size() > position) {
            uploadFileList.remove(position);
        }

        if (uploadList != null && uploadList.size() > position) {
            uploadList.remove(position);
        }
    }

    // new math engine

    private boolean checkDisplayCondition(String displayCondition) {

        displayCondition = convertTextCodesInCondition(displayCondition);

        if (displayCondition == null || displayCondition.equals(""))
            return true;
        if (displayCondition.replace(" ", "").equals("1=43"))
            return true;
        if (displayCondition.replace(" ", "").equals("1=2"))
            return false;
        if (displayCondition.replace(" ", "").equals("1=1"))
            return true;
        // ($[12,S2,1]$+$[12,S2,2]$=0 & $[12,S2,98]$=1 & (1=1 & 1=2))
        // || (1=2)
        // || (1=1)
        String[] strArr = displayCondition.split("&amp;");
        for (int i = 0; i < strArr.length; i++) {
            displayCondition = strArr[i];
            String[] str = null;
            try {
                if (!verifyDisplayConditionFull(strArr[i]))
                    return false;
            } catch (Exception ex) {
                Toast.makeText(
                        QuestionnaireActivity.this,
                        getResources().getString(
                                R.string._error_display_condition),
                        Toast.LENGTH_LONG).show();
                break;
            }
        }

        return true;
    }

    private String convertTextCodesInCondition(String text) {
        if (text != null) {
            if (!text.contains("^"))
                text = text.trim();
            text = text.replace("&quot;", "'");
            text = text.replace("\\", "");
        }
        double total = 0;
        String totalSs = "";
        String ss = "";
        while (true) {
            int start = text.indexOf("$[");
            int end = text.indexOf("]$");

            if (start == -1 || end == -1)
                break;
            String str = text.substring(start + 2, end);
            // 12,s2,1
            String[] strarr = str.split(",");
            // strarr[0]=12 [1]=s2, []
            if (strarr.length == 1) {
                String strconverted = ConvertTextCodetoText("$[" + str + "]$",
                        false);
                text = text.replace("$[" + str + "]$", strconverted + "");
            } else if (strarr.length == 2) {
                String defaultValue = null;
                if (strarr[0].contains(";")) {
                    String[] defArray = strarr[0].split(";");
                    strarr[0] = defArray[0];
                    if (defArray.length > 1)
                        defaultValue = defArray[1];
                    else
                        defaultValue = "";
                }
                ss = getText(Integer.parseInt(strarr[0]), strarr[1]);
                if ((ss == null || ss.equals("0") || ss.equals(""))
                        && defaultValue != null) {
                    ss = defaultValue;
                }
                totalSs += ss;
                boolean isAdd = true;
                try {
                    String sbstring = text.substring(start - 1, start);
                    isAdd = sbstring.equals("+");
                } catch (Exception ex) {
                    isAdd = true;
                }
                if (ss.equals("")) {
                    text = text.replace("$[" + str + "]$", "''");
                }
                text = text.replace("$[" + str + "]$", ss);
                try {

                    double i = Double.parseDouble(ss);
                    if (isAdd == true)
                        total += i;

                } catch (Exception ex) {

                }

            } else if (strarr.length > 2) {
                boolean isAdd = true;
                try {
                    String sbstring = text.substring(start - 1, start);
                    isAdd = sbstring.equals("+");
                } catch (Exception ex) {
                    isAdd = true;
                }
                int number = 0;
                if (strarr[0] != null && strarr[0].contains("105")) {

                    String n = getText(105, strarr[1], strarr[2]);
                    try {
                        number = Integer.parseInt(n);
                    } catch (Exception ex) {

                    }
                } else if (strarr[0].contains("15")) {
                    number = getText(strarr[1], strarr[2], true);
                } else
                    number = getText(strarr[1], strarr[2], false);

                if (number == 0) {
                    String defaultValue = null;
                    ss = getText(Integer.parseInt(strarr[0]), strarr[1],
                            strarr[2]);
                    if ((ss == null || ss.equals("0") || ss.equals(""))
                            && defaultValue != null) {
                        ss = defaultValue;
                    }
                    totalSs += ss;
                    isAdd = true;
                    try {
                        String sbstring = text.substring(start - 1, start);
                        isAdd = sbstring.equals("+");
                    } catch (Exception ex) {
                        isAdd = true;
                    }
                    if (ss.equals("")) {
                        text = text.replace("$[" + str + "]$", "''");
                    }
                    text = text.replace("$[" + str + "]$", ss);
                    try {

                        double i = Double.parseDouble(ss);
                        if (isAdd == true)
                            total += i;

                    } catch (Exception ex) {

                    }
                }
                text = text.replace("$[" + str + "]$", number + "");
                if (isAdd == true)
                    total += number;
            }
            text = text.replace("$[" + str + "]$", "");
        }
        return text;
    }

    @Override
    public void onMessageReceived(final MessageEvent messageEvent) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {

                } catch (Exception ex) {
                    Toast.makeText(QuestionnaireActivity.this,
                            ex.getLocalizedMessage(), 100).show();
                }

            }
        });

    }

    @Override
    public void onConnectionFailed(ConnectionResult arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public void onConnected(Bundle arg0) {
        // TODO Auto-generated method stub
        sendMessage(QuestionnaireActivity.QUESTION_START_ACTIVITY,
                "Job started!");
    }

    @Override
    public void onConnectionSuspended(int arg0) {
        // TODO Auto-generated method stub

    }

    public WatchObject getSavedAnswer(Objects qObj) {
        WatchObject thisWatchObj = new WatchObject();
        thisWatchObj.setThisQuestion(qObj);
        if (questionnaireData != null)
            for (int i = 0; i < questionnaireData.size(); i++) {
                String dataId = getProperDataId(questionnaireData.get(i)
                        .getDataID());
                if (qObj.getDataID().equals(dataId)) {
                    thisWatchObj.setThisSavedAnswer(questionnaireData.get(i));
                }
            }
        if (nextBtn
                .getText()
                .toString()
                .equals(getResources().getString(
                        R.string.questionnaire_menu_btn))) {
            thisWatchObj.setLast(true);
        }
        return thisWatchObj;
    }

    public void finish_screen() {
        Intent intent = new Intent();
        intent.putExtra("from_watch", true);
        setResult(1, intent);
        comunicator.questionJob = null;
        JobDetailActivity.isFromWatch = true;
        finish();

    }

    private void clearAllViews(ViewGroup v) {
        View a;
        boolean isgrp = false;
        for (int i = 0; i < v.getChildCount(); i++) { // attach listener to all
            // buttons
            a = v.getChildAt(i);
            if (a instanceof ViewGroup)
                clearAllViews((ViewGroup) a);
            else if (a != null) {
                if (a instanceof ImageView) {
                    Drawable drawable = ((ImageView) a).getDrawable();
                    // if (drawable==null) drawable = ((ImageView)
                    // a).getBackground();

                    // if (drawable != null && drawable instanceof
                    // BitmapDrawable) {
                    // BitmapDrawable bitmapDrawable = (BitmapDrawable)
                    // drawable;
                    // Bitmap bitmap = bitmapDrawable.getBitmap();
                    // if (bitmap != null && !bitmap.isRecycled())
                    // bitmap.recycle();
                    //
                    // }

                    v.removeView(a);
                    a = null;

                }
                if (a instanceof TextView) {
                    v.removeView(a);
                    a = null;

                }
                if (a instanceof EditText) {
                    v.removeView(a);
                    a = null;

                }
                if (a instanceof RadioButton) {
                    v.removeView(a);

                }
                if (a instanceof CheckBox) {
                    v.removeView(a);

                }
            }
        }
        return;
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        // TODO Auto-generated method stub

    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width,
                               int height) {
        // TODO Auto-generated method stub

    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        // TODO Auto-generated method stub

    }

    Camera camera;
    SurfaceView surfaceView;
    SurfaceHolder surfaceHolder;
    PictureCallback rawCallback;
    ShutterCallback shutterCallback;
    PictureCallback jpegCallback;
    private final String tag = "VideoServer";
    static final int OWN_CAMERA = 14324;

    private void start_camera(String dataid) {

        if (Helper.isDeviceCamera()) {
            if (dataid != null)
                openDeviceCamera(CAMERA_PIC_REQUEST);
            else
                openDeviceCamera(CAMERA_PIC_REQUEST_LAST);
        } else {

            Intent i = new Intent(
                    QuestionnaireActivity.this.getApplicationContext(),
                    PreviewDemo.class);
            i.putExtra("DATAID", dataid);
            i.putExtra("ORDERID", orderID);
            QuestionnaireActivity.this.startActivityForResult(i, OWN_CAMERA);
        }
//        openCamera(CAMERA_PIC_REQUEST, false);
//        onSaveState(1);
//        photomenu = false;
    }

    private void stop_camera() {
        findViewById(R.id.cameraSurface).setVisibility(RelativeLayout.GONE);
        camera.stopPreview();
        camera.release();
    }

    private void captureImage() {
        // TODO Auto-generated method stub
        camera.takePicture(shutterCallback, rawCallback, jpegCallback);
        stop_camera();
    }

    private void loadViews() {
        Context cntxt = getApplicationContext();
        Helper.changeTxtViewColor(previousBtn);
        Helper.changeTxtViewColor(nextBtn);
        Helper.changeTxtViewColor(lv_text);

        Helper.changeImageViewSrc(previousImg, cntxt);
        Helper.changeImageViewSrc(nextImg, cntxt);
        Helper.changeImageViewSrc(workerBranchImage, cntxt);
        Helper.changeImageViewSrc(simpleBranchImage, cntxt);
        Helper.changeImageViewSrc(imgattach, cntxt);

    }

    int xDelta, yDelta;

    private View.OnTouchListener onTouchListener() {
        return new View.OnTouchListener() {

            @SuppressLint("ClickableViewAccessibility")
            @Override
            public boolean onTouch(View view, MotionEvent event) {

                final int x = (int) event.getRawX();
                final int y = (int) event.getRawY();

                switch (event.getAction() & MotionEvent.ACTION_MASK) {
                    case MotionEvent.ACTION_BUTTON_PRESS:
                        customMenu(openMenu(null));
                        break;
                    case MotionEvent.ACTION_DOWN:
                        RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams)
                                view.getLayoutParams();

                        xDelta = x - lParams.leftMargin;
                        yDelta = y - lParams.topMargin;
                        break;

                    case MotionEvent.ACTION_UP:

//						Toast.makeText(TouchActivity.this,
//								"thanks for new location!", Toast.LENGTH_SHORT)
//								.show();
                        break;

                    case MotionEvent.ACTION_MOVE:
                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view
                                .getLayoutParams();
                        layoutParams.leftMargin = x - xDelta;
                        layoutParams.topMargin = y - yDelta;
                        layoutParams.rightMargin = 0;
                        layoutParams.bottomMargin = 0;
                        view.setLayoutParams(layoutParams);
                        break;
                }
                RelativeLayout mainLayout = (RelativeLayout) findViewById(R.id.backgroundTheme);
                mainLayout.invalidate();
                return true;
            }
        };
    }
}
