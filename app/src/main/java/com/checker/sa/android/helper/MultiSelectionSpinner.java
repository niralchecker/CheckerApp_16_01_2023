package com.checker.sa.android.helper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnMultiChoiceClickListener;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;

import com.checker.sa.android.adapter.menuAdapter;
import com.checker.sa.android.data.Answers;
import com.checker.sa.android.data.dataQuestionGroup;
import com.mor.sa.android.activities.QuestionnaireActivity;
import com.mor.sa.android.activities.R;

import static android.content.Context.MODE_PRIVATE;

public class MultiSelectionSpinner extends Spinner implements
		OnMultiChoiceClickListener {
	private ArrayList<Answers> listAnswers;
	String[] _items = null;
	boolean[] mSelection = null;

	ArrayAdapter<String> simple_adapter;
	private android.content.DialogInterface.OnClickListener btnListener;
	private int modeSelect;
	private String btnText;
	private boolean clearAllselected;
	private LinearLayout checkboxgrp;
	private QuestionnaireActivity qact;
	private dataQuestionGroup thisQuestionGroup=null;

	public void setBtnListener(
			android.content.DialogInterface.OnClickListener btnListener,
			String btnText) {
		this.btnListener = btnListener;
		this.btnText = btnText;
	}

	public MultiSelectionSpinner(Context context,ArrayList<Answers> listAnswers
			,dataQuestionGroup thisQuestionGroup) {
		super(context);
		this.thisQuestionGroup=thisQuestionGroup;
		simple_adapter = new ArrayAdapter<String>(context,
				android.R.layout.simple_spinner_item);
		super.setAdapter(simple_adapter);
		this.listAnswers=listAnswers;
	}

	public MultiSelectionSpinner(Context context, AttributeSet attributes,dataQuestionGroup thisQuestionGroup) {
		super(context);
		this.thisQuestionGroup=thisQuestionGroup;

		simple_adapter = new ArrayAdapter<String>(context,
				android.R.layout.simple_spinner_item);
		super.setAdapter(simple_adapter);
	}

	public MultiSelectionSpinner(Context context, int modeselect, ArrayList<Answers> listAnswers) {
		super(context);
		this.modeSelect = modeselect;
		if (modeselect != 3)
			simple_adapter = new ArrayAdapter<String>(context,
					android.R.layout.simple_spinner_item);
		else
			simple_adapter = new ArrayAdapter<String>(context,
					R.layout.custom_spinner_row_three_hebrew);
		this.listAnswers=listAnswers;
		super.setAdapter(simple_adapter);
	}

	public void onClick(DialogInterface dialog, int which, boolean isChecked) {
		if (mSelection != null && which < mSelection.length) {

		if (listAnswers!=null && listAnswers.get(which)!=null
				&& listAnswers.get(which).getClearOtherAnswers()!=null
			&& listAnswers.get(which).getClearOtherAnswers().equals("1"))
			{
				if (isChecked) {
					for (int i = 0; i < mSelection.length; i++) {
						mSelection[i] = false;
					}
					clearAllselected=true;
				}
				else if (mSelection[which]==true && clearAllselected==true && isChecked==false) {
					clearAllselected = false;
				}

			}
		else if (isChecked==true && clearAllselected==true)
		{
			return;
		}

			mSelection[which] = isChecked;
			if (thisQuestionGroup!=null)
			{
				UIQuestionGroupHelper.hideShowMiInCheckBox(thisQuestionGroup.getListAnswers()
						,thisQuestionGroup.getMultiSpinner(),null,thisQuestionGroup);

			}else if (qact!=null) {
				qact.hideBoxIfCheckBox(listAnswers);
			}
			simple_adapter.clear();// not working
			simple_adapter.add(buildSelectedItemString());
		} else {
			// throw new IllegalArgumentException(
			// "Argument 'which' is out of bounds.");
		}
	}

	AlertDialog alert;

	public void showDialog(final ArrayList<Answers> listAnswers, boolean[] mSelection, QuestionnaireActivity con)
	{
		this.qact=con;
		final Dialog dialog = new Dialog(con);
		try {
			dialog.setContentView(R.layout.multipledropdown);
		} catch (Exception ex) {
			int i = 0;
			i++;
		}
		checkboxgrp=(LinearLayout)dialog.findViewById(R.id.checkboxgrp);
		Helper helper = new Helper();
		CheckBox cbnotfilled;
		int visibleCount=-1;
		for (int ansCount = 0; ansCount < listAnswers.size(); ansCount++) {
			Answers answers = listAnswers.get(ansCount);
			if (answers.getAnswerDisplayCondition() != null) {
				Boolean b = con.IsObjectdisplaybyCondition(answers
						.getAnswerDisplayCondition());
				if (!b)
					continue;
			}
			visibleCount++;

			TextView cbTextLeft = new TextView(con);
			con.setFontSize(cbTextLeft);
			CheckBox cb = new CheckBox(con);

			if (Helper.getTheme(con) == 0) {
				cb.setCompoundDrawables(
						getResources().getDrawable(R.drawable.radio_selector_n),
						null, null, null);
			} else {

				cb.setCompoundDrawables(
						getResources().getDrawable(R.drawable.radio_selector_n),
						null, null, null);

			}

			cb.setId(ansCount + 1);
			cb.setTag(answers.getAnswer());
			LinearLayout.LayoutParams lp;
			SharedPreferences myPrefs = con.getSharedPreferences("pref", MODE_PRIVATE);

			if (answers.getIconName() != null && modeSelect != 3) {
				lp = new LinearLayout.LayoutParams(
						android.view.ViewGroup.LayoutParams.MATCH_PARENT,
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				lp.setMargins(0, 0, 20, 0);

				boolean isDownloadedYet = myPrefs.getBoolean(
						Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH, false);
				Drawable d = new BitmapDrawable(getResources(),
						helper.readFile(answers.getIconName(), isDownloadedYet));
				cb.setCompoundDrawablesWithIntrinsicBounds(null, null, d, null);
				cb.setText(Helper.makeHtmlString(con.ConvertTextCodetoText(
						answers.getAnswer(), false)));
			} else {
				lp = new LinearLayout.LayoutParams(
						android.view.ViewGroup.LayoutParams.MATCH_PARENT,
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT);

				if (modeSelect == 3) {
					cbTextLeft.setText(Helper
							.makeHtmlString(con.ConvertTextCodetoText(
									answers.getAnswer(), false)));
				} else {
					cb.setText(Helper.makeHtmlString(con.ConvertTextCodetoText(
							answers.getAnswer(), false)));
				}
			}
			cbTextLeft.setTextColor(Helper.getIntColor(answers.getColor()));
			cb.setTextColor(Helper.getIntColor(answers.getColor()));

			if (answers.getAnswer()!=null && answers.getAnswer().toString().toLowerCase().trim()
					.startsWith("not filled")
					|| answers
					.getAnswer()
					.equalsIgnoreCase(
							"???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¦???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚?¦???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???????ˆ??¬?…?ˆ????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?? ???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¦???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???????ˆ??¬?‚?¦???’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¦???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚?¦???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???????ˆ??¬?…?ˆ????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ??‚? ???’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’?‚?????????ˆ??¬?…?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ ???‚¬?„????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ??‚?????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’???‚¬?????ˆ??‚?¬???’?†?ˆ™???ˆ??‚?????’???‚¬?????ˆ??‚?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???????ˆ??¬?‚? ???’?‚?????????‚¬???‚?¬???????‚¬???‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’???‚¬? ???????ˆ??¬???ˆ??????’?†?ˆ™???ˆ??‚?????’?‚?????????ˆ??¬?…?????ˆ??‚?¬???’???‚¬?¦???ˆ??‚?????’?†?ˆ™???ˆ ???‚¬?„????’?‚?????????‚¬???‚?¬???ˆ¦?‚?????’?†?ˆ™???????ˆ??¬?…?????’???‚¬?????ˆ??‚??")) {
				cbnotfilled = cb;
			}

			{
				LinearLayout.LayoutParams lptu = new LinearLayout.LayoutParams(
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
						Gravity.RIGHT);
				LinearLayout.LayoutParams lpRadio = new LinearLayout.LayoutParams(
						55, 55, 100f);
				LinearLayout.LayoutParams lpImgView = new LinearLayout.LayoutParams(
						90, 90);

				lpRadio.setMargins(0, 20, 0, 20);

				ImageView imgView = new ImageView(con);
				imgView.setVisibility(RelativeLayout.GONE);
				if (answers.getIconName() != null
						&& !answers.getIconName().equals("")) {
					boolean isDownloadedYet = myPrefs.getBoolean(
							Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
							false);
					Drawable d = new BitmapDrawable(getResources(),
							helper.readFile(answers.getIconName(),
									isDownloadedYet));
					imgView.setVisibility(RelativeLayout.VISIBLE);
					imgView.setImageDrawable(d);
				}

				lp = new LinearLayout.LayoutParams(
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				LinearLayout hebrewLayout = new LinearLayout(
						con);
				hebrewLayout.setOrientation(LinearLayout.HORIZONTAL);
				LinearLayout.LayoutParams lpRight = new LinearLayout.LayoutParams(
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT,
						android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				lpRight.setMargins(0, 10, 0, 10);
				cbTextLeft.setGravity(Gravity.RIGHT);
				if (modeSelect != 30909) {

					View altMarker = ((LayoutInflater) con.getSystemService(Context.LAYOUT_INFLATER_SERVICE))
							.inflate(R.layout.checkbox_hebrew_row, null);
					cbTextLeft = (TextView) altMarker
							.findViewById(R.id.txtview);
					con.setFontSize(cbTextLeft);
					imgView = (ImageView) altMarker.findViewById(R.id.imgview);
					imgView.setVisibility(RelativeLayout.GONE);
					cb = (CheckBox) altMarker.findViewById(R.id.chkbox);
					cb.setChecked(mSelection[ansCount]);
					cbTextLeft.setText(Helper
							.makeHtmlString(con.ConvertTextCodetoText(
									answers.getAnswer(), false)));
					imgView.setTag(cb);
					cbTextLeft.setTag(cb);
					cbTextLeft.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							CheckBox cb = ((CheckBox) v.getTag());
							if (cb.isChecked())
								cb.setChecked(false);
							else
								cb.setChecked(true);
							checkboxClick((View) v.getTag(), listAnswers);
						}
					});
					imgView.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							CheckBox cb = ((CheckBox) v.getTag());
							if (cb.isChecked())
								cb.setChecked(false);
							else
								cb.setChecked(true);
							checkboxClick((View) v.getTag(), listAnswers);
						}
					});

					if (answers.getIconName() != null
							&& !answers.getIconName().equals("")) {
						boolean isDownloadedYet = myPrefs.getBoolean(
								Constants.IS_DOWNLOADED_FOR_NEW_DOWNLOAD_PATH,
								false);
						Drawable d = new BitmapDrawable(getResources(),
								helper.readFile(answers.getIconName(),
										isDownloadedYet));
						imgView.setVisibility(RelativeLayout.VISIBLE);
						imgView.setImageDrawable(d);
					}



					checkboxgrp.addView(altMarker);
					// cb.setId(ansCount + 1);
					cb.setTag(answers.getAnswer());

				}
			}

			con.setFontSize(cb);
			cb.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {

					checkboxClick(v, listAnswers);
				}
			});

			// setFontSize(cbTextLeft);
		}
//		if (isCheckShown == false && cbnotfilled != null) {
//			cbnotfilled.setChecked(true);
//		}
		Button dialogButton = (Button) dialog.findViewById(R.id.btnOk);
		// if button is clicked, close the custom dialog
		dialogButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				dialog.dismiss();
			}
		});
		dialog.getWindow().setLayout(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
		dialog.getWindow().setBackgroundDrawable(
				new ColorDrawable(android.graphics.Color.TRANSPARENT));
		dialog.show();
	}


	public void checkboxClick(View v, ArrayList<Answers> listAnswers) {
		if (((CheckBox) v).isChecked()) {
			for (int k = 0; k < listAnswers.size(); k++) {

				if (v.getTag().equals(listAnswers.get(k).getAnswer())) {

					onClick(null, k, true);
				}
			}
			// v.startAnimation(AnimationUtils.loadAnimation(
			// QuestionnaireActivity.this,
			// R.anim.click_animation));

			if (modeSelect != 3) {
				ColorDrawable[] color = {
						new ColorDrawable(Color.parseColor("#4863A0")),
						new ColorDrawable(Color.parseColor("#FFFFFF")) };
				TransitionDrawable trans = new TransitionDrawable(color);
				// This will work also on old devices. The latest
				// API says you have to use setBackground instead.
				v.setBackgroundDrawable(trans);
				trans.startTransition(1000);
			}
			// clear all

			for (int k = 0; k < listAnswers.size(); k++) {

				if (v.getTag().equals(listAnswers.get(k).getAnswer())
						&& listAnswers.get(k).getClearOtherAnswers() != null
						&& listAnswers.get(k).getClearOtherAnswers()
						.equals("1")) {
					for (int l = 0; l < listAnswers.size(); l++) {
						CheckBox cb = null;
						if (checkboxgrp.getChildAt(l) instanceof RelativeLayout) {
							RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
									.getChildAt(l);
							if (thisLayout.getChildAt(0) instanceof CheckBox)
								cb = (CheckBox) thisLayout.getChildAt(0);
							else if (thisLayout.getChildAt(1) instanceof CheckBox)
								cb = (CheckBox) thisLayout.getChildAt(1);
							else if (thisLayout.getChildAt(2) instanceof CheckBox)
								cb = (CheckBox) thisLayout.getChildAt(2);
						} else {
							cb = (CheckBox) checkboxgrp.getChildAt(l);
						}

						if (listAnswers.get(l).getClearOtherAnswers() != null
								&& listAnswers.get(l).getClearOtherAnswers()
								.equals("1") && cb != null
								&& cb.isChecked() && cb != ((CheckBox) v)) {
							((CheckBox) v).setChecked(false);
							return;
						}

						if (cb != null)
							cb.setChecked(false);
					}
					((CheckBox) v).setChecked(true);
				} else if (listAnswers.get(k).getClearOtherAnswers() != null
						&& listAnswers.get(k).getClearOtherAnswers()
						.equals("1")) {
					CheckBox cb = null;
					if (checkboxgrp.getChildAt(k) instanceof RelativeLayout) {
						RelativeLayout thisLayout = (RelativeLayout) checkboxgrp
								.getChildAt(k);
						if (thisLayout.getChildAt(0) instanceof CheckBox)
							cb = (CheckBox) thisLayout.getChildAt(0);
						else if (thisLayout.getChildAt(1) instanceof CheckBox)
							cb = (CheckBox) thisLayout.getChildAt(1);
						else if (thisLayout.getChildAt(2) instanceof CheckBox)
							cb = (CheckBox) thisLayout.getChildAt(2);
					} else {
						cb = (CheckBox) checkboxgrp.getChildAt(k);
					}

					if (cb != null && cb.isChecked()) {
						((CheckBox) v).setChecked(false);
						break;
					}
				}
			}
		} else {
			for (int k = 0; k < listAnswers.size(); k++) {

				if (v.getTag().equals(listAnswers.get(k).getAnswer())) {

					onClick(null, k, false);
				}
			}
			if (modeSelect != 3) {
				ColorDrawable[] color = {
						new ColorDrawable(Color.parseColor("#E77471")),
						new ColorDrawable(Color.parseColor("#FFFFFF")) };
				TransitionDrawable trans = new TransitionDrawable(color);
				// This will work also on old devices. The latest
				// API says you have to use setBackground instead.
				v.setBackgroundDrawable(trans);
				trans.startTransition(1000);
			}

		}

	}


	@Override
	public boolean performClick() {
		if(listAnswers!=null)
		{
			showDialog(listAnswers,mSelection, (QuestionnaireActivity) getContext());
		}
		else {
			AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
			builder.setMultiChoiceItems(_items, mSelection, this);

			//((AlertDialog)alert).
			if (this.btnListener != null) {
				if (this.btnText != null) {
					builder.setPositiveButton(
							getResources().getString(R.string.save_and_download),
							this.btnListener);
				} else {
					builder.setPositiveButton(btnText, this.btnListener);
				}
			} else {
				CharSequence cs = "Done";
				builder.setPositiveButton(cs,
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog, int which) {
								if (alert != null)
									alert.dismiss();
							}

						});
			}
			builder.show();
			alert = builder.create();
		}
		return true;
	}

	@Override
	public void setAdapter(SpinnerAdapter adapter) {
		throw new RuntimeException(
				"setAdapter is not supported by MultiSelectSpinner.");
	}

	public void setItems(String[] items) {
		_items = items;
		mSelection = new boolean[_items.length];
		simple_adapter.clear();
		simple_adapter.add(_items[0]);
		Arrays.fill(mSelection, false);
	}

	public void setItems(List<String> items) {
		_items = items.toArray(new String[items.size()]);
		mSelection = new boolean[_items.length];
		simple_adapter.clear();
		simple_adapter.add(_items[0]);
		Arrays.fill(mSelection, false);
	}

	public void setSelection(String[] selection) {
		for (String cell : selection) {
			for (int j = 0;_items!=null && j < _items.length; ++j) {
				if (_items[j].equals(cell)) {
					mSelection[j] = true;
				}
			}
		}
	}

	public void setSelection(List<String> selection) {
		for (int i = 0; mSelection != null && i < mSelection.length; i++) {
			mSelection[i] = false;
		}
		for (String sel : selection) {
			for (int j = 0; j < _items.length; ++j) {
				if (_items[j].equals(sel)) {
					mSelection[j] = true;
				}
			}
		}
		simple_adapter.clear();
		simple_adapter.add(buildSelectedItemString());
	}

	public void setSelection(int index) {
		for (int i = 0; mSelection != null && i < mSelection.length; i++) {
			mSelection[i] = false;
		}
		if (index == -1) {

		} else {
			if (mSelection != null && index >= 0 && index < mSelection.length) {
				mSelection[index] = true;
			} else {
				throw new IllegalArgumentException("Index " + index
						+ " is out of bounds.");
			}
		}
		simple_adapter.clear();
		simple_adapter.add(buildSelectedItemString());
	}

	public void setSelection(int[] selectedIndicies) {
		for (int i = 0; mSelection != null && i < mSelection.length; i++) {
			mSelection[i] = false;
		}
		for (int index : selectedIndicies) {
			if (index >= 0 && index < mSelection.length) {
				mSelection[index] = true;
			} else {
				throw new IllegalArgumentException("Index " + index
						+ " is out of bounds.");
			}
		}
		simple_adapter.clear();
		simple_adapter.add(buildSelectedItemString());
	}

	public List<String> getSelectedStrings() {
		List<String> selection = new LinkedList<String>();
		for (int i = 0; _items != null && i < _items.length; ++i) {
			if (mSelection[i]) {
				selection.add(_items[i]);
			}
		}
		return selection;
	}

	public List<Integer> getSelectedIndicies() {
		List<Integer> selection = new LinkedList<Integer>();
		for (int i = 0; _items != null && i < _items.length; ++i) {
			if (mSelection[i]) {
				selection.add(i);
			}
		}
		return selection;
	}

	private String buildSelectedItemString() {
		StringBuilder sb = new StringBuilder();
		boolean foundOne = false;

		for (int i = 0; _items != null && i < _items.length; ++i) {
			if (mSelection[i]) {
				if (foundOne) {
					sb.append(", ");
				}
				foundOne = true;

				sb.append(_items[i]);
			}
		}
		return sb.toString();
	}

	public String getSelectedItemsAsString() {
		StringBuilder sb = new StringBuilder();
		boolean foundOne = false;

		for (int i = 0; _items != null && i < _items.length; ++i) {
			if (mSelection[i]) {
				if (foundOne) {
					sb.append(", ");
				}
				foundOne = true;
				sb.append(_items[i]);
			}
		}
		return sb.toString();
	}
}
